<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">COE 111L - Spring 2017 - W 9-10 AM - WRW 209</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/ECL2017S/feed.xml" />
<link rel="alternate" type="text/html" href="http:/ECL2017S/" />
<updated>2017-08-28T11:34:31-05:00</updated>
<id>http:/ECL2017S/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/ECL2017S/</uri>
  <email>amir@ices.utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Announcement 3: Final Semester Grades]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/announcement/3-final-grades"/>
  <id>http:/ECL2017S/announcement/3-final-grades</id>
  <published>2017-05-16T00:00:00-05:00</published>
  <updated>2017-05-16T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The following figure is the histogram of the grand total grade for this course.&lt;br /&gt;
&lt;!-- Anyone above $3.5/4.0$, received a letter grade of **A**.  --&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/3/gradeDistECL2017S.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/announcement/3-final-grades&quot;&gt;Announcement 3: Final Semester Grades&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on May 16, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 11: Python advanced topics - decorators and classes]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/11-python-advanced-decorator-class"/>
  <id>http:/ECL2017S/lecture/11-python-advanced-decorator-class</id>
  <published>2017-04-26T00:00:00-05:00</published>
  <updated>2017-04-26T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture discusses some further important topics in Python: Decorators and Classes.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;pyton-decorators&quot;&gt;Pyton Decorators&lt;/h2&gt;
&lt;p&gt;In simple words, Python decorators are functions that can modify (e.g., add to) the functionalities of other functions. As will be described below, decorators are particularly useful in making your code shorter. To understand the workings of decorators, we will have to recall a few properties of functions in Python.&lt;/p&gt;

&lt;p&gt;Firstly, since every entity in Python is an object, including functions, almost everything, including functions can be assigned to a variable. For example, the simple function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def hello(name='Amir'):
    return 'Hello ' + name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
can be assigned to a new variable,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;greet = hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which is also a function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;greet
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;function __main__.hello&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and more importantly, it is not attached to the original function &lt;code&gt;hello()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;del hello
hello
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&amp;lt;ipython-input-6-b1946ac92492&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 hello

NameError: name 'hello' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;greet
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;function __main__.hello&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;greet()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'Hello Amir'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;functions-inside-other-functions&quot;&gt;Functions inside other functions&lt;/h3&gt;
&lt;p&gt;Now one thing to keep in mind, is that you can define functions inside functions in Python, just as you can do in almost any other capable language.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def hello(name='Amir'):
    print('This is from inside function hello()')
    
    def greet():
        return '\t This is from inside function greet() inside function hello()'
    
    def welcome():
        return '\t This is from inside function welcome() inside function hello()'
    
    print(greet())
    print(welcome())
    print(&quot;This is from inside function hello()&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
So now, if you type,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;hello()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;This is from inside function hello()
    This is from inside function greet() inside function hello()
    This is from inside function welcome() inside function hello()
This is from inside function hello()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another cool feature to know about, is that you can have functions both as input and return values to and from another function. We have seen this already in previous lectures, where we discussed functions for the first time.&lt;/p&gt;

&lt;p&gt;With this in mind, let’s create a function like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def decorateThisFunction(func):

    def wrapInputFunction():
        print(&quot;Some decorating code can be executed here, before calling the input function&quot;)

        func()

        print(&quot;Some decorating code can be executed here, after calling the input function&quot;)

    return wrapInputFunction

def needsDecorator():
    print(&quot;\t This function needs a Decorator&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
So now,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;needsDecorator()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;This function needs a Decorator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, it can happen in your programming that you need to do a specific set of tasks for a function repeatedly, so you may prefer to redefine/reassign your function to your decorated function, such that whenever you call your function by its own name, it is always returned in the modified (decorated) state. For example, see what happens with,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;needsDecorator = decorateThisFunction(needsDecorator)   # Reassign needsDecorator to the new decorated state
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which upon calling outputs,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;needsDecorator()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Some decorating code can be executed here, before calling the input function
    This function needs a Decorator
Some decorating code can be executed here, after calling the input function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happened above is that we wrapped the function and modified its behavior using a simple &lt;strong&gt;decorator&lt;/strong&gt;. We could have also assigned this new modified (decorated) state of the function to a variable with other name than the function name itself. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;test = decorateThisFunction(needsDecorator)
test()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Some decorating code can be executed here, before calling the input function
    This function needs a Decorator
Some decorating code can be executed here, after calling the input function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, you should have done this &lt;strong&gt;before&lt;/strong&gt; reassigning the function name &lt;code&gt;needsDecorator&lt;/code&gt; to its new, decorated, state. If you do this after the reassignment, then this is what you get,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;test = decorateThisFunction(needsDecorator)
test()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Some decorating code can be executed here, before calling the input function
Some decorating code can be executed here, before calling the input function
    This function needs a Decorator
Some decorating code can be executed here, after calling the input function
Some decorating code can be executed here, after calling the input function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other word, you decorate your already-decorated function &lt;code&gt;needsDecorator()&lt;/code&gt;, one more time by passing it to &lt;code&gt;decorateThisFunction()&lt;/code&gt;.  Now, since this functionality is needed frequently in Python, Python has a special syntax for it, the &lt;strong&gt;Decorator syntax&lt;/strong&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;@decorateThisFunction
def needsDecorator():
    print &quot;This function needs a Decorator&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The above statement is an exact equivalent to,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;needsDecorator = decorateThisFunction(needsDecorator)   # Reassign needsDecorator to the new decorated state
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which we used before to decorate our function.&lt;/p&gt;

&lt;p&gt;You may wonder what the use of decorators could be. Decorators can be a handy tool for functionalities that have to be repeated for many functions. For example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Profiling_(computer_programming)&quot; target=&quot;_blank&quot;&gt;Porofiling&lt;/a&gt; and timing the performance of functions require the idea of decorators. Most often, decorators are useful and needed in web development with Python.&lt;/p&gt;

&lt;h2 id=&quot;pyton-classes&quot;&gt;Pyton classes&lt;/h2&gt;

&lt;p&gt;The concept of Python class, as in almost any other programming language, relates to packing &lt;strong&gt;a set of variables&lt;/strong&gt; together &lt;strong&gt;with a set of functions&lt;/strong&gt; operating on the data. The goal of writing classes is to achieve more modular code by grouping data and functions into manageable units. One thing to keep in mind for scientific computing is that, classes, and more generally, &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot;&gt;Object Oriented Programming (OOP)&lt;/a&gt;, are not necessary, and could be a hinderance to efficient computing if used naively. Nevertheless, classes lead to either more elegant solutions to the programming problem, or a code that is easier to extend and maintain in large scale projects. In the non-mathematical programming world where there are no mathematical concepts and associated algorithms to help structure the programming problem, software development can be very challenging. In those cases, Classes greatly improve the understanding of the problem and simplify the modeling of data. As a consequence, almost all large-scale software systems being developed in the world today are heavily based on classes (but certainly not all scientific projects!).&lt;/p&gt;

&lt;p&gt;Programming with classes is offered by most modern programming languages, including Python. Python uses the concept of classes in almost every bit of it. However, most Python users don’t even notice the heavy dependence of Python on classes under the hood, until the actually learn what a class is, just as we have made progress in this class so far, without knowing about classes.&lt;/p&gt;

&lt;p&gt;Classes can be used for many purposes in scientific programming and computation. One of the most frequently encountered tasks is to represent mathematical functions that have a set of parameters in addition to one or more independent variables. To expand on this, consider the problem described in the following section.&lt;/p&gt;

&lt;h3 id=&quot;a-common-programming-challenge-in-numerical-computing&quot;&gt;A common programming challenge in numerical computing&lt;/h3&gt;
&lt;p&gt;To motivate for the class concept, let’s look at functions with parameters. One example is $y(t) = v_0t-\frac{1}{2}gt^2$. Conceptually, in physics, $y$ is viewed as a function of $t$, but mathematically $y$ also depends on two other parameters, $v_0$ and $g$, although it is not natural to view $y$ as a function of these parameters. One can therefore write $f(t;v_0g)$ to emphasize that $t$ is the independent variable, while $v_0$ and $g$ are parameters. Strictly speaking, $g$ is a fixed parameter (as long as the experiment is run on the surface of the earth), so only $v_0$ and $t$ can be arbitrarily chosen in the formula.
It would then be better to write $y(t;v_0). Here is an implementation of this function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def y(t, v0):
    g = 9.81
    return v0*t - 0.5*g*t**2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This function gives the height of the projectile as a function of time. Now suppose you wanted to differentiate $y$ with respect to $t$ in order to obtain the velocity. You could write the following code to do so,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff(f, x, h=1E-5):
    return (f(x+h) - f(x))/h
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But, here is the catch with this problem of differentiation. The &lt;code&gt;diff&lt;/code&gt; function works with any function &lt;code&gt;f&lt;/code&gt; that takes &lt;strong&gt;only&lt;/strong&gt; one argument. In other words, if we want to input &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;diff&lt;/code&gt;, then we will have to redefine &lt;code&gt;y&lt;/code&gt; to take only one argument.  You may wonder why not change &lt;code&gt;diff&lt;/code&gt;. For this simple problem, this could be a solution. But, with larger problems, you are more likely to use sophisticated routines and modules that have been already developed and many of these routines take a function as input that only has one input variable. This is quite often the case with high-performance integration routines.&lt;/p&gt;

&lt;p&gt;One, perhaps bad, solution to the above problem is to use &lt;strong&gt;global variables&lt;/strong&gt;. The requirement is thus to define Python implementations of mathematical functions of one variable with one argument, the independent variable,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def y(t):
    g = 9.81
    return v0*t - 0.5*g*t**2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This function will work only if &lt;code&gt;v0&lt;/code&gt; is a global variable, initialized before one attempts to call the function. Here is an example call where &lt;code&gt;diff&lt;/code&gt; differentiates y,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v0 = 3
dy = diff(y, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The use of global variables is in general considered bad programming. Why global variables are problematic in the present case can be illustrated when there is need to work with several versions of a function. Suppose we want to work with two versions of $y(t;v_0)$, one with $v_0=1$ and one with $v_0=5$. Every time we call &lt;code&gt;y&lt;/code&gt;, we must remember which version of the function we work with, and set &lt;code&gt;v0&lt;/code&gt; accordingly prior to the call,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v0 = 1; r1 = y(t)
v0 = 5; r2 = y(t)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Another problem&lt;/em&gt; is that variables with simple names like &lt;code&gt;v0&lt;/code&gt;, may easily be used as global variables in other parts of the program. These parts may change our &lt;code&gt;v0&lt;/code&gt; in a context different from the &lt;code&gt;y&lt;/code&gt; function, but the change affects the correctness of the &lt;code&gt;y&lt;/code&gt; function. In such a case, we say that changing &lt;code&gt;v0&lt;/code&gt; has &lt;strong&gt;side effects&lt;/strong&gt;, i.e., &lt;strong&gt;the change affects other parts of the program in an unintentional way&lt;/strong&gt;. This is one reason why a golden rule of programming tells us to &lt;strong&gt;limit the use of global variables as much as possible&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An alternative solution to the problem of needing two &lt;code&gt;v0&lt;/code&gt; parameters could be to introduce two &lt;code&gt;y&lt;/code&gt; functions, each with a distinct &lt;code&gt;v0&lt;/code&gt; parameter,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def y1(t):
    g = 9.81
    return v0_1*t - 0.5*g*t**2
def y2(t):
    g = 9.81
    return v0_2*t - 0.5*g*t**2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to initialize &lt;code&gt;v0_1&lt;/code&gt; and &lt;code&gt;v0_2&lt;/code&gt; once, and then we can work with &lt;code&gt;y1&lt;/code&gt; and &lt;code&gt;y2&lt;/code&gt;. However, if we need $100$ &lt;code&gt;v0&lt;/code&gt; parameters, we need $100$ functions. This is tedious to code, error prone, difficult to administer, and simply a really bad solution to a programming problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, is there a good remedy?&lt;/strong&gt; The answer is yes: the class concept solves all the problems described above.&lt;/p&gt;

&lt;h4 id=&quot;class-representation-of-a-function&quot;&gt;Class representation of a function&lt;/h4&gt;
&lt;p&gt;A class as contains a set of variables (data) and a set of functions, held together as one unit. The variables are visible in all the functions in the class. That is, we can view the variables as “global” in these functions. These characteristics also apply to modules, and modules can be used to obtain many of the same advantages as classes offer (see comments in Sect. 7.1.6). However, classes are technically very different from modules. You can also make many copies of a class, while there can be only one copy of a module. When you master both modules and classes, you will clearly see the similarities and differences. Now we continue with a specific example of a class.&lt;/p&gt;

&lt;p&gt;Consider the function $y(t;v_0) = v_0t - \frac{1}{2}gt^2$. We may say that $v_0$ and $g$, represented by the variables &lt;code&gt;v0&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;, constitute the data. A Python function, say &lt;code&gt;value(t)&lt;/code&gt;, is then needed to compute the value of $y(t;v_0)$ and this function must have access to the data &lt;code&gt;v0&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;, while &lt;code&gt;t&lt;/code&gt; is an argument. A programmer experienced with classes will then suggest to collect the data &lt;code&gt;v0&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;, and the function &lt;code&gt;value(t)&lt;/code&gt;, together as a &lt;strong&gt;class&lt;/strong&gt;. In addition, a class usually has another function, called &lt;strong&gt;constructor&lt;/strong&gt; for &lt;strong&gt;initializing the data&lt;/strong&gt;. The constructor is always named &lt;code&gt;__init__&lt;/code&gt;. Every &lt;strong&gt;class must have a name&lt;/strong&gt;, often &lt;strong&gt;starting with a capital&lt;/strong&gt;, so we choose &lt;code&gt;Y&lt;/code&gt; as the name since the class represents a mathematical function with name &lt;code&gt;y&lt;/code&gt;. The next step is to implement this class in Python. A complete class code &lt;code&gt;Y&lt;/code&gt; for our problem here would look as follows in Python:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class Y:
    def __init__(self, v0):
        self.v0 = v0
        self.g = 9.81
    def value(self, t):
        return self.v0*t - 0.5*self.g*t**2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;A class creates a new data type&lt;/strong&gt;, here of name &lt;code&gt;Y&lt;/code&gt;, so when we use the class to make objects, those objects are of type Y. &lt;strong&gt;All the standard Python objects, such as lists, tuples, strings, floating-point numbers, integers, …, are built-in Python classes&lt;/strong&gt;, and each time the user creates on these variable types, one instance os these classes is created by the Python interpreter. A user-defined object class (like Y) is usually called an &lt;strong&gt;instance&lt;/strong&gt;. We need such an instance in order to use the data in the class and call the value function. The following statement constructs an instance bound to the variable name y:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;y = Y(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Seemingly, we &lt;em&gt;call the class &lt;code&gt;Y&lt;/code&gt; as if it were a function&lt;/em&gt;. Indeed, &lt;code&gt;Y(3)&lt;/code&gt; is automatically translated by Python to a call to the constructor &lt;code&gt;__init__&lt;/code&gt; in class Y. The arguments in the call, here only the number &lt;code&gt;3&lt;/code&gt;, are always passed on as arguments to &lt;code&gt;__init__&lt;/code&gt; after the &lt;code&gt;self&lt;/code&gt; argument. That is, &lt;code&gt;v0&lt;/code&gt; gets the value &lt;code&gt;3&lt;/code&gt; and self is just dropped in the call. This may be confusing, but it is a rule that the self argument is never used in calls to functions in classes.
With the instance &lt;code&gt;y&lt;/code&gt;, we can compute the value of y(t=0.1;v_0=3) by the statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v = y.value(0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the &lt;code&gt;self&lt;/code&gt; input argument is dropped in the call to &lt;code&gt;value()&lt;/code&gt;. To access functions and variables in a class, one must prefix the function and variable names by the name of the instance and a dot: the value function is reached as &lt;code&gt;y.value&lt;/code&gt;, and the variables are reached as &lt;code&gt;y.v0&lt;/code&gt; and &lt;code&gt;y.g&lt;/code&gt;. One could, for example, print the value of &lt;code&gt;v0&lt;/code&gt; in the instance &lt;code&gt;y&lt;/code&gt; by writing,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print y.v0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
We have already introduced the term &lt;strong&gt;instance&lt;/strong&gt; for the object of a class. &lt;strong&gt;Functions&lt;/strong&gt; in classes are commonly called &lt;strong&gt;methods&lt;/strong&gt;, and &lt;strong&gt;variables (data)&lt;/strong&gt; in classes are called &lt;strong&gt;data attributes&lt;/strong&gt;. Methods are also known as &lt;strong&gt;method attributes&lt;/strong&gt;. For example, in our sample class &lt;code&gt;Y&lt;/code&gt; we have two methods or method attributes, &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;, two data attributes, &lt;code&gt;v0&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;, and four attributes in total (&lt;code&gt;__init__&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;v0&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;). Note that the names of attributes can be chosen freely, just as names of ordinary Python functions and variables. However, &lt;strong&gt;the constructor
must have the name &lt;code&gt;__init__&lt;/code&gt;, otherwise it is not automatically called when new instances are created&lt;/strong&gt;. You can do whatever you want in whatever method, but it is a common convention to &lt;strong&gt;use the constructor for initializing the variables in the class&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So far, we have explained a method of writing our function of interest in a class style, which resolves the need to pass a auxiliary variable to a function explicitly. But if you look at the original problem that we had, you will notice that we still cannot use our class &lt;code&gt;Y&lt;/code&gt; instance &lt;code&gt;y&lt;/code&gt; as an argument to other functions similar to &lt;code&gt;diff()&lt;/code&gt;. The final resolution to this problem is to add a &lt;code&gt;__call__&lt;/code&gt; method to our originally defined &lt;code&gt;Y&lt;/code&gt; class.&lt;/p&gt;

&lt;h3 id=&quot;callable-objects&quot;&gt;Callable objects&lt;/h3&gt;
&lt;p&gt;If you recall, computing the value of the mathematical function represented by class &lt;code&gt;Y&lt;/code&gt;, with &lt;code&gt;y&lt;/code&gt; as the name of the instance, is performed by writing &lt;code&gt;y.value(t)&lt;/code&gt;. If we could write just &lt;code&gt;y(t)&lt;/code&gt;, the &lt;code&gt;y&lt;/code&gt; instance would look as an ordinary function. Such a syntax is indeed possible and offered by the special method named &lt;code&gt;__call__&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class Y:
    def __init__(self, v0):
        self.v0 = v0
        self.g = 9.81
    def value(self, t):
        return self.v0*t - 0.5*self.g*t**2
    def __call__(self, t):
        return self.v0*t - 0.5*self.g*t**2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
then, writing &lt;code&gt;y(t)&lt;/code&gt; implies a call like &lt;code&gt;y.__call__(t)&lt;/code&gt;, which is equivalent to &lt;code&gt;y.value(t)&lt;/code&gt;. The previous value method is now redundant. A good programming convention is to &lt;strong&gt;include a &lt;code&gt;__call__&lt;/code&gt; method in all classes that represent a mathematical function&lt;/strong&gt;. Instances with &lt;code&gt;__call__&lt;/code&gt; methods are said to be &lt;strong&gt;callable objects&lt;/strong&gt;, just as plain functions are callable objects as well. The call syntax for callable objects is the same, regardless of whether the object is a function or a class instance.&lt;/p&gt;

&lt;p&gt;You can always test if an instance is callable or not by &lt;code&gt;callable()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;callable(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Reference&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
The book &lt;a href=&quot;http://link.springer.com/book/10.1007%2F978-3-662-49887-3&quot; target=&quot;_blank&quot;&gt;A Primer on Scientific Programming with Python&lt;/a&gt; by Hans Petter Langtangen, provides a good starting point on the use of Classes and OOP in Python from a scientific programming perspective. The examples provided in this lecture heavily rely on Langtangen’s notes on Python classes in his textbook in chapter 7. You can download a complete electronic copy of this book for free from Springer website, if you redirect to Springer page from &lt;a href=&quot;http://www.lib.utexas.edu/&quot; target=&quot;_blank&quot;&gt;UT Austin library page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/11-python-advanced-decorator-class&quot;&gt;Lecture 11: Python advanced topics - decorators and classes&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on April 26, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 10: Python advanced topics - IO, Monte Carlo, wrappers and interoperability]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/10-python-advanced-io-monte-carlo-interoperability"/>
  <id>http:/ECL2017S/lecture/10-python-advanced-io-monte-carlo-interoperability</id>
  <published>2017-04-19T00:00:00-05:00</published>
  <updated>2017-04-19T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture discusses some further important topics in Python IO, the use of random numbers and Monte Carlo simulations, as well as methods of integrating Python codes with codes from other programming languages, in particular, the use of Python as a wrapper for highly efficient, fast, low-level codes written in Fortran and C.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;more-on-io-in-python&quot;&gt;More on IO in Python&lt;/h2&gt;
&lt;p&gt;There are a few topics and methods of &lt;a href=&quot;https://en.wikipedia.org/wiki/Input/output&quot; target=&quot;_blank&quot;&gt;input/output (IO)&lt;/a&gt; in Python that we have not discussed yet, such as reading data from special data files, or web pages. Such problems, happen almost daily in a scientific research career, even in High Performance Computing, and Python’s capability to easily handle such IO problems is indeed one of the main reasons for Python’s popularity.&lt;/p&gt;

&lt;h3 id=&quot;reading-data-from-special-data-files&quot;&gt;Reading data from special data files&lt;/h3&gt;
&lt;p&gt;It will happen quite often in your research that you will need to read data from a spreadsheet data file, most importantly &lt;code&gt;*.csv&lt;/code&gt; and Microsoft Excel files (e.g., &lt;code&gt;*.xls&lt;/code&gt; data files), or also frequently, from an &lt;code&gt;*.xml&lt;/code&gt; data file. There are many ways and Python libraries to read such files. For Excel files, the task can be a bit complex, since Excel files can contain multiple sheets. A good starting point might be &lt;a href=&quot;http://www.python-excel.org/&quot; target=&quot;_blank&quot;&gt;this webpage&lt;/a&gt;, also &lt;a href=&quot;http://pbpython.com/excel-pandas-comp.html&quot; target=&quot;_blank&quot;&gt;Pandas module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For CSV files, Python standard library has a solution. Suppose you want to read &lt;a href=&quot;http:/ECL2017S/lecture/10/jec_pdb_r4s.csv&quot; target=&quot;_blank&quot;&gt;this CSV file&lt;/a&gt;. A Python solution would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import csv
with open('jec_pdb_r4s.csv','r') as myfile:
    for counter, row in enumerate(csv.reader(myfile)):
        print(row)
        if counter&amp;gt;10: break
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;['pdb', 'pdb_id', 'chain', 'site', 'zr4s_JTT', 'r4s_JTT', 'zr4s_JC', 'r4s_JC']
['132L_A', '132L', 'A', '2', '-0.3133', '1.02', '0.04475', '1.188']
['132L_A', '132L', 'A', '3', '0.8385', '1.955', '0.2036', '1.311']
['132L_A', '132L', 'A', '4', '2.093', '2.973', '1.451', '2.272']
['132L_A', '132L', 'A', '5', '-0.8878', '0.5537', '-0.7985', '0.5382']
['132L_A', '132L', 'A', '6', '-1.443', '0.1028', '-1.426', '0.05416']
['132L_A', '132L', 'A', '7', '-0.1195', '1.177', '-0.07917', '1.093']
['132L_A', '132L', 'A', '8', '-0.7236', '0.6869', '-0.8997', '0.4602']
['132L_A', '132L', 'A', '9', '-1.107', '0.3755', '-0.8971', '0.4622']
['132L_A', '132L', 'A', '10', '0.7076', '1.848', '0.7369', '1.722']
['132L_A', '132L', 'A', '11', '0.9573', '2.051', '0.8809', '1.833']
['132L_A', '132L', 'A', '12', '-0.8315', '0.5993', '-0.9243', '0.4413']
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how I have used Python &lt;code&gt;enumerate()&lt;/code&gt; function to control the number of lines that is read from the file (The file contains more than 70000 lines of data!).&lt;/p&gt;

&lt;p&gt;Similarly, if you wanted to write a CSV file, you can use &lt;code&gt;csv.writer()&lt;/code&gt; method,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;with open('jec_pdb_r4s.csv','r') as infile, open('jec_out.csv', 'w') as outfile:
    for counter, row in enumerate(csv.reader(infile)):
        csv.writer(outfile).writerow(row)
        if counter&amp;gt;10: break
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of the code is &lt;a href=&quot;http:/ECL2017S/lecture/10/jec_out.csv&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt; (If you run this code on Windows machines, you will probably get an extra empty line between each row in the csv file).&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;*.xml&lt;/code&gt; files, Python standard library has a package &lt;a href=&quot;https://docs.python.org/3/library/xml.etree.elementtree.html&quot; target=&quot;_blank&quot;&gt;ElementTree&lt;/a&gt;, which you can use for both parsing and writing xml data files.&lt;/p&gt;

&lt;h3 id=&quot;reading-data-from-web&quot;&gt;Reading data from web&lt;/h3&gt;
&lt;p&gt;Nowadays, a lot of data repositories are available online publicly, and you may encounter problems that need to parse data from an online repository. For many of the most famous repositories, such as the &lt;a href=&quot;http://www.rcsb.org/pdb/home/home.do&quot; target=&quot;_blank&quot;&gt;Protein databank&lt;/a&gt;, excellent python packages have been written that automate the process of fetching data from online pages or repositories (e.g., &lt;a href=&quot;http://biopython.org/wiki/Biopython&quot; target=&quot;_blank&quot;&gt;Biopython&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Nevertheless you may need at some point in your research or career to read data from a web address. Most often, the online data is contained in a &lt;code&gt;html&lt;/code&gt; file, like the content of the &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;about page&lt;/a&gt; for this course, for example, which has the address: &lt;a href=&quot;http:/ECL2017S/about&quot; target=&quot;_blank&quot;&gt;http://www.shahmoradi.orghttp:/ECL2017S/about&lt;/a&gt;. Suppose you wanted to extract the content of this page. A simple solution would be the following via Python’s standard &lt;a href=&quot;https://docs.python.org/3/library/urllib.html&quot; target=&quot;_blank&quot;&gt;urllib&lt;/a&gt; module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import urllib.request as ur
myurl = 'http://www.shahmoradi.orghttp:/ECL2017S/about'
with ur.urlopen(myurl) as webfile:
    webcontent = [line.decode(&quot;utf-8&quot;) for line in webfile.readlines()]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now the variable &lt;code&gt;webcontent&lt;/code&gt; is a list, whose elements are each row in the html file for this page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;webcontent[0:10]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;['&amp;lt;!DOCTYPE html&amp;gt;\n',
'&amp;lt;html&amp;gt;\n',
'&amp;lt;head&amp;gt;\n',
'&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;\n',
'&amp;lt;title&amp;gt;COE 111L - SPRING 2017&amp;lt;/title&amp;gt;\n',
'&amp;lt;meta name=&quot;description&quot; content=&quot;Engineering Computation Lab&quot;&amp;gt;\n',
'&amp;lt;meta name=&quot;keywords&quot; content=&quot;Amir, Shahmoradi, Instructor&quot;&amp;gt;\n',
'\n',
'&amp;lt;!-- Twitter Cards --&amp;gt;\n',
'&amp;lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&amp;gt;\n']
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the content of the file is read in &lt;code&gt;byte&lt;/code&gt; format. Therefore, to convert it to string, one has to apply &lt;code&gt;.decode(&quot;utf-8&quot;)&lt;/code&gt; on each line. Similar to opening a file on harddisk, one can also use &lt;code&gt;.read()&lt;/code&gt; and &lt;code&gt;.readline()&lt;/code&gt; methods to read the contant of the web address. Alternatively, one could also save the entire content of the web address, in a single file locally,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import urllib.request as ur
myurl = 'http://www.shahmoradi.orghttp:/ECL2017S/about'
ur.urlretrieve(myurl, filename='about.html')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will output &lt;a href=&quot;http:/ECL2017S/lecture/10/about.html&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt; in your current working diretory of Python.&lt;/p&gt;

&lt;p&gt;Now, the file that we imported from the web does not contains any scientific data. But, in the homework you will see a real-world scientific example and value of Python’s ability to parse the content of web pages.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;writing-data-in-html-web-format&quot;&gt;Writing data in HTML (web) format&lt;/h3&gt;
&lt;p&gt;Doing research at a professional level requires reporting the results professionally as well. That is, the results of the project, including the final report itself have to be &lt;strong&gt;auto-generated&lt;/strong&gt; and &lt;strong&gt;reproducile&lt;/strong&gt; as much as possible, and reachable to the widest audience (which nowadays means, availibility on the world-wide web).&lt;/p&gt;

&lt;p&gt;Suppose you have worked on your final project for this course, which has resulted in several figures, that you wanted to put them all together on a single webpage in your repository on Github, together with some information about each figure. Let’s say the figures are
  &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_1_t10.0.png&quot; target=&quot;_blank&quot;&gt;figure 1&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_2_t12.0.png&quot; target=&quot;_blank&quot;&gt;figure 2&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_3_t14.0.png&quot; target=&quot;_blank&quot;&gt;figure 3&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_4_t15.0.png&quot; target=&quot;_blank&quot;&gt;figure 4&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_5_t16.0.png&quot; target=&quot;_blank&quot;&gt;figure 5&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_6_t18.0.png&quot; target=&quot;_blank&quot;&gt;figure 6&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_7_t20.0.png&quot; target=&quot;_blank&quot;&gt;figure 7&lt;/a&gt;.  Now, since these figures represent the time evolution of the growth of the tumor, you would wnat to write a code that automatically generates an HTML (or Markdown) files, which contains the correct HTML code for adding these figures in your page for the project. You could for example write the following Python code to achieve this goal,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;with open('SampleProjectReport.html', 'w') as html:
    html.write('&amp;lt;HTML&amp;gt;&amp;lt;BODY BGCOLOR=&quot;white&quot;&amp;gt;\n')
    html.write('&amp;lt;H1&amp;gt;Sample Semester Project: Tumor growth modeling&amp;lt;/H1&amp;gt;&amp;lt;br&amp;gt; \n')
    html.write('&amp;lt;H2&amp;gt;Each of following subplots figure represents the stage of the growth of tumor at the specified date in the figure title.&amp;lt;/H2&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; \n')

    time = [10.0,12.0,14.0,15.0,16.0,18.0,20.0]
    nfig = 7
    figReposPrefix = 'http://www.shahmoradi.orghttp:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_'
    for ifig in range(1,nfig+1):
        html.write( '&amp;lt;img src=&quot;{}{:d}_t{:.1f}.png&quot; width=&quot;900px&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;\n'.format(figReposPrefix,ifig,time[ifig-1]) )
    html.write('&amp;lt;H2&amp;gt;Conclusions:&amp;lt;/H2&amp;gt;\n')
    html.write('&amp;lt;p&amp;gt;Chances of survival for this rat are virtually zero.&amp;lt;/p&amp;gt;&amp;lt;br&amp;gt;\n')
    html.write('&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;\n')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This code will generate an HTML file, which you can view in browser &lt;a href=&quot;http:/ECL2017S/lecture/10/SampleProjectReport.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;random-numbers-in-python&quot;&gt;Random numbers in Python&lt;/h2&gt;
&lt;p&gt;One of the most important topics in todays’s science and computer simulation is &lt;a href=&quot;https://en.wikipedia.org/wiki/Random_number_generation&quot; target=&quot;_blank&quot;&gt;random number generation&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot; target=&quot;_blank&quot;&gt;Monte Carlo simulation&lt;/a&gt; methods. In the simplest scenario for your research, you may need to generate a sequence of uniformly distributed random numbers in Python. There are several approaches to handle such random number generation problems in Python. Here is one, via Python’s standard &lt;code&gt;random&lt;/code&gt; module:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [43]: import random as rnd

In [44]: rnd.random()   # generates a random number in the half open interval [0,1)
Out[44]: 0.012519922307372311

In [45]: rnd.
rnd.BPF             rnd.Random          rnd.betavariate     rnd.gauss           rnd.normalvariate   rnd.randrange       rnd.shuffle         rnd.weibullvariate
rnd.LOG4            rnd.SG_MAGICCONST   rnd.choice          rnd.getrandbits     rnd.paretovariate   rnd.sample          rnd.triangular
rnd.NV_MAGICCONST   rnd.SystemRandom    rnd.expovariate     rnd.getstate        rnd.randint         rnd.seed            rnd.uniform
rnd.RECIP_BPF       rnd.TWOPI           rnd.gammavariate    rnd.lognormvariate  rnd.random          rnd.setstate        rnd.vonmisesvariate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
As you see in the list of available methods in &lt;code&gt;random&lt;/code&gt;, you can generate random numbers from a wide variaty of univariate probability distributions, e.g.,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [46]: rnd.betavariate(0.5,0.5)   # Beta variate with the input parameters
Out[46]: 0.9281984408820623

In [54]: rnd.expovariate(1)         # random variable from exponential distribution with mean 1.
Out[54]: 2.546912414260747

In [55]: rnd.gammavariate(1,1)      # random variable from gamma distribution with parameters 1,1.
Out[55]: 0.5364897808236537
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Recall that if you needed help on a method or function in Python, you could use &lt;code&gt;help()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [61]: help(rnd.weibullvariate)
Help on method weibullvariate in module random:

weibullvariate(alpha, beta) method of random.Random instance
    Weibull distribution.

    alpha is the scale parameter and beta is the shape parameter.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To generate &lt;code&gt;float&lt;/code&gt; random numbers between the given input bounds,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [64]: rnd.uniform(50,100)    # generate a random float between 50 and 100
Out[64]: 65.59688328558263
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;b&gt;ATTENTION: &lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
Alwasy make sure you import modules with unique names, as different modules with similar component names may overwrite each other. For example &lt;code&gt;import random&lt;/code&gt; followed by &lt;code&gt;from numpy import *&lt;/code&gt; wil cause the &lt;code&gt;random&lt;/code&gt; module to be overwritten by &lt;code&gt;numpy.random&lt;/code&gt; module.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
Also pay attention to sublte differences between similar functions, with the same names, but in different modules. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
np.random.randint(1,6,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
will draw a random integer from the interval $[1,6)$ excluding the value $6$ (the third input, $1$, indicates how many numbers has to be drawn randomly by the function). However,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import random as rnd
rnd.randint(1,6)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
will draw a random integer form the interval $[1,6]$. Also note that &lt;code&gt;randint()&lt;/code&gt; from module &lt;code&gt;random&lt;/code&gt; is a scalar function, whereas the numpy’s version is vectorized.&lt;/p&gt;

&lt;h3 id=&quot;the-deterministic-aspect-of-randomness-in-python&quot;&gt;The deterministic aspect of randomness in Python&lt;/h3&gt;
&lt;p&gt;There is a truth about random numbers and random number generators and algorithms, not only in Python, but in all programming languages, and that is, &lt;strong&gt;true random numbers do not exist in the world of programming&lt;/strong&gt;. What we call a seuqence of random numbers, is simply a sequence of numbers that we, the user, to the best of our knowledge, don’t know how it was generated, and therefore, &lt;strong&gt;the sequence looks random to us, bu not the to the developer of the algorithm!&lt;/strong&gt;. To prove this, type the following code in a Python session,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [13]: import numpy as np

In [14]: np.random.seed(42)

In [15]: np.random.randint(1,6,6)
Out[15]: array([4, 5, 3, 5, 5, 2])

In [16]: np.random.randint(1,6,6)
Out[16]: array([3, 3, 3, 5, 4, 3])

In [17]: np.random.seed(42)

In [18]: np.random.randint(1,6,6)
Out[18]: array([4, 5, 3, 5, 5, 2])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You notice that everytime the random function is called, it generates a new sequence of random numbers, apparently completely random. But as soon as the function &lt;code&gt;np.random.seed(42)&lt;/code&gt; is called, it appears that the random number generator also restarts from the beginning, generating the same sequence of random numbers as it did before.&lt;/p&gt;

&lt;p&gt;You can even test the same code on a different computer, and as long as you set the seed of the random number generator to a specific value (here 42), &lt;code&gt;np.random.seed(42)&lt;/code&gt;, you will the same sequence of random numbers. So afterall, random numbers are not random at all, as they can be generated detrerministically, however, they mimic the behavior of true random numbers. The ability to set the seed for a random number generator is actually very useful, since it enables us to replicate the work of a code, exactly it has been done in the past. In particular, this is very useful for code debugging. However, beware of cases were you need to get a different result, everytime you run the code. If you set the random seed of the random generator to to a fixed value, right at the beginning of the code, you will never get a random behavior.&lt;/p&gt;

&lt;h3 id=&quot;drawing-a-random-element-from-a-list&quot;&gt;Drawing a random element from a list&lt;/h3&gt;
&lt;p&gt;Suppose you have the following list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
mylist = np.linspace(0,100,51)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([   0.,    2.,    4.,    6.,    8.,   10.,   12.,   14.,   16.,
         18.,   20.,   22.,   24.,   26.,   28.,   30.,   32.,   34.,
         36.,   38.,   40.,   42.,   44.,   46.,   48.,   50.,   52.,
         54.,   56.,   58.,   60.,   62.,   64.,   66.,   68.,   70.,
         72.,   74.,   76.,   78.,   80.,   82.,   84.,   86.,   88.,
         90.,   92.,   94.,   96.,   98.,  100.])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and now you wanted to draw a random element from the above list. You could do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import random as rnd
rnd.choice(mylist)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;80.0 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give a random element from the list. You could also generate a random shuffling of the list by,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import random as rnd
rnd.shuffle(mylist)
mylist
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([  98.,   12.,   76.,   60.,   46.,   22.,   24.,   92.,   66.,
         16.,    6.,   34.,   14.,    8.,   18.,   50.,   30.,   74.,
          4.,    2.,   38.,   90.,   70.,   56.,   94.,   80.,   32.,
         20.,   10.,   44.,   72.,   84.,    0.,   78.,  100.,   88.,
         86.,   96.,   48.,   52.,   62.,   64.,   26.,   36.,   40.,
         54.,   68.,   58.,   82.,   42.,   28.])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;summary-of-some-important-random-functions-in-python&quot;&gt;Summary of some important random functions in Python&lt;/h3&gt;
&lt;p&gt;As you may have noticed, since none of the random functions are builtin, things can get really confusing very easily, by simply mixing numpy’s random mdule with Python’s random module. The following helps to clarify some of the most important differences between these two modules.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;
Table 1: Some useful functions and their functionalities in &lt;code&gt;random&lt;/code&gt; and &lt;code&gt;numpy&lt;/code&gt; modules
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;th&gt;random module&lt;/th&gt;
&lt;th&gt;numpy.random module&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;random uniform numbers in $[0,1)$&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;random()&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;random(N)&lt;/code&gt; (vectorized)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;random uniform numbers in $[a,b)$&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;uniform(a,b)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;uniform(a,b,N)&lt;/code&gt; (vectorized)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;random integers in $[a,b]$&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;randint(a,b)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;randint(a,b+1,N)&lt;/code&gt; (vectorized) &lt;br /&gt; &lt;code&gt;random_integers(a,b+1,N)&lt;/code&gt; (vectorized) &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;random Gaussian deviate with parameters $[\mu, \sigma]=[m,s]$&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;gauss(m,s)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;normal(m,s,N)&lt;/code&gt; (vectorized)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;setting random number generator seed $i$&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;seed(i)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;seed(i)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;shuffling list mylist&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;shuffle(mylist)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;shuffle(mylist)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;choose a random element from mylist&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;choice(mylist)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt; -- &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;monte-carlo-simulations&quot;&gt;Monte Carlo simulations&lt;/h3&gt;
&lt;p&gt;A Monte Carlo simulation is basically any simulation problem that somehow involves random numbers. Let’s start with an example of throwing a die repeatedly for N times. We can simulate the process of throwing a die by the following python code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def throwFairDie():
    import random as rnd
    return rnd.randint(1, 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, each time the function is called, it returns a random value for one throw of a virtual die,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [7]: throwFairDie()
Out[7]: 6

In [8]: throwFairDie()
Out[8]: 1

In [9]: throwFairDie()
Out[9]: 4

In [10]: throwFairDie()
Out[10]: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This is likely one of the simplest examples of &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot; target=&quot;_blank&quot;&gt;Monte Carlo simulations&lt;/a&gt;. Now suppose we wanted to make sure that the die is fair, meaning that each number (out of 6 possibilities) only appears with a frequency of $1/6$ over many throws of the die. To test this hypothesis, we could write the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np

def throwFairDie():
    import random as rnd
    return rnd.randint(1, 6)

def getMeanDieValue(n=10000):
    meanDieValue = np.zeros((n,6),dtype=np.double)
    randomThrow = throwFairDie() - 1        # assign the first value to the above array
    meanDieValue[0,randomThrow] = 1.0 / 1.0 # one try so far, one success for the die value that is obtained.
    for i in range(1,n):
        randomThrow = throwFairDie() - 1
        meanDieValue[i,randomThrow] = 1.0   # add one success for the value obtained
        meanDieValue[i,:] += meanDieValue[i-1,:]    # combine the recent success with the total number of successes from previous tries.
        meanDieValue[i-1,:] /= np.double(i)  # Now normalize the values form the last try to the total number of tries.
    meanDieValue[-1:,:] /= np.double(n)  # Now normalize the very last try to the total number of tries.
    return meanDieValue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
What this function does, is that it throws a die for given input number of times (n=10000 by default if not given as input), and then calculates for each new try, how many times each of the die values have occurred so far, and then finally outputs all the result as numpy &lt;code&gt;double&lt;/code&gt; array, each row of which contains the number of successes for each of the 6 die values. Normally, if the die is fair, you would expect that with more tries, the average number of successes for each try would converge more and more to the canonical value $1/6\sim0.1667$. We can test this, by calling the function with a large number of tries, and checking the values in the last row of the output array,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print( getMeanDieValue()[-1:,:] )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[ 0.1645  0.1668  0.1683  0.1664  0.169   0.165 ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print( getMeanDieValue(n=100000)[-1:,:] )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[ 0.16488  0.1665   0.16635  0.16841  0.1661   0.16776]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A better approach would be plot the output as a function of the number of tries, and see if the results for each of possible die outcomes do indeed converge to the canonical value or not.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
import matplotlib.pyplot as plt

nDieValues = 6 # 6 possible values for a die throw
nTrial = 100000 # total number of die throws
meanDieValues = getMeanDieValue(n=nTrial)

fig1 = plt.figure()
trial = np.linspace( 1 , nTrial+1 , nTrial )
lineTypes = ['r-','b-','g-','y-','b-','g-']
for i in range( nDieValues ) :
    plt.semilogx( trial[:] \
            , meanDieValues[:,i] \
            , lineTypes[i] \
            ) # plot with color red, as line
    plt.hold('on')
plt.xlabel('trial number')
plt.ylabel('fraction of occurrence for each die number')
plt.legend(['die value: '+str(i) for i in range(1,7) ])
plt.axis([1, nTrial , 0.0, 1.0]) # [xmin, xmax, ymin, ymax]
plt.title('N={} throws of a virtual die in Python'.format(nTrial))
plt.savefig('diceThrowsN{}.png'.format(nTrial))
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can see the output of the above code in the following figure,&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/10/diceThrowsN100000.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;python-wrappers-and-interfaces&quot;&gt;Python wrappers and interfaces&lt;/h2&gt;
&lt;p&gt;Python is a very convenient language for implementing scientific computations as the code can be made very close to the mathematical algorithms. However, the execution speed of the code is significantly lower than what can be obtained by
programming in languages such as Fortran, C, or C++. For example see the following performance comparisons and tests in &lt;a href=&quot;https://modelingguru.nasa.gov/docs/DOC-1762&quot; target=&quot;_blank&quot;&gt;NASA modeling guru webpage&lt;/a&gt;. As you can see there, the &lt;strong&gt;performance of Python code can be significantly lower, up to 500 times and more, compared to compiled languages such as Fortran and C&lt;/strong&gt;. These languages compile the program to machine language, which enables the computing resources to be utilized with very high efficiency. Knowing the performance hit in Python, the scientific programming paradigm in Python is to write compute-intensive parts of the code in lower level languages such as Fortran or C, and use Python as wrapper and glue between lower level codes and as a handy tool for high-level tasks.&lt;/p&gt;

&lt;p&gt;Python was initially designed for being integrated with C. This feature has spawned the development of several techniques and tools for calling compiled languages from Python, allowing us to relatively easily reuse fast and
well-tested scientific libraries in Fortran, C, or C++ from Python, or migrate slow Python code to compiled languages. It often turns out that only smaller parts of the code, usually for loops doing heavy numerical computations, suffer from low speed and can benefit from being implemented in Fortran, C, or C++.&lt;/p&gt;

&lt;p&gt;There are already several Python wrappers developed for integrating Python with other programming language codes. Most prominent examples include &lt;a href=&quot;https://docs.scipy.org/doc/numpy-dev/f2py/&quot; target=&quot;_blank&quot;&gt;F2PY&lt;/a&gt; for Fortran and C codes, &lt;a href=&quot;http://www.swig.org/&quot; target=&quot;_blank&quot;&gt;SWIG&lt;/a&gt; for C, C++, Perl, Java, and many others, &lt;a href=&quot;http://cython.org/&quot; target=&quot;_blank&quot;&gt;Cython&lt;/a&gt; for C, &lt;a href=&quot;http://www.jython.org/&quot; target=&quot;_blank&quot;&gt;Jython&lt;/a&gt; for Java, and several others.&lt;/p&gt;

&lt;p&gt;The usage of some of these wrappers can be tricky and requires some work and good familiarity with the wrapper. This is in particular true about SWIG, which involves a significant amount of manual modifications to the interfaces, compared to F2PY, for example. At the moment, F2PY only works with Python 2.x standard.&lt;/p&gt;

&lt;p&gt;There is also a Python module &lt;a href=&quot;http://pymat.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;pymat&lt;/a&gt; developed for direct interaction of Python code with MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/10-python-advanced-io-monte-carlo-interoperability&quot;&gt;Lecture 10: Python advanced topics - IO, Monte Carlo, wrappers and interoperability&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on April 19, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 9: Python - array computing and plotting]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/9-python-array-computing-plotting"/>
  <id>http:/ECL2017S/lecture/9-python-array-computing-plotting</id>
  <published>2017-04-12T00:00:00-05:00</published>
  <updated>2017-04-12T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture focuses on array computing and code vectorization, as well as methods of plotting data in Python.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;vectorization-and-array-computing&quot;&gt;Vectorization and array computing&lt;/h2&gt;

&lt;p&gt;With regards to capabilities of Python for scientific calculations, there are conflicting opinions. On the scientific side of the opinion spectrum, some people think that Python is not good enough for number crunching (as a result of which, new programming languages such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Julia_(programming_language)&quot; target=&quot;_blank&quot;&gt;Julia&lt;/a&gt; have been developed). However, there are people at the other extreme who believe that Python is too much oriented towards scientific computation (as a result of which, new programming languages have emerged, such as Google’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_(programming_language)&quot; target=&quot;_blank&quot;&gt;Go language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far in this course, you may have noticed that all numerical vector calculations were either performed with lists, tuples, or dictionaries. Sadly, Python standard does not have an intrinsic special way of defining and manipulating numerical vectors and arrays, unlike most High Performance Computing (HPC) languages for scientific computations (such as Fortran, Ada, or C). However, there are powerful Python modules that enable a Python programmer to use Python efficiently for numerical analysis as well.&lt;/p&gt;

&lt;blockquote&gt;
If you expect to use Python heavily and mostly for scientific computation in future, you should keep in mind that Python's builtin list, tuple and dictionary types can be very slow for number crunching. 
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vectors-arrays-and-the-numerical-python-numpy-package&quot;&gt;Vectors, arrays and the Numerical Python (numpy) package&lt;/h3&gt;

&lt;p&gt;In Python, a list can be &lt;strong&gt;heterogeneous&lt;/strong&gt; meaning that not all its elements are of the same type. An &lt;strong&gt;array object&lt;/strong&gt; in Python can be viewed as a variant of a list, but with the following assumptions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;All elements must be of the same type, preferably integer, real, or complex numbers, for efficient numerical computing and storage.&lt;/li&gt;
  &lt;li&gt;The number of elements must be known when the array is created.&lt;/li&gt;
  &lt;li&gt;Arrays are not part of standard Python – one needs an additional package called &lt;strong&gt;Numerical Python&lt;/strong&gt;, often abbreviated as &lt;strong&gt;NumPy&lt;/strong&gt;. The Python name of the package, to be used in import statements, is &lt;code&gt;numpy&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;With numpy, a wide range of mathematical operations can be done directly on complete arrays, thereby removing the need for loops over array elements. This is commonly called &lt;strong&gt;vectorization&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Arrays with one index are often called &lt;strong&gt;vectors&lt;/strong&gt;. Arrays with two indices are used as an efficient data structure for tables, instead of lists of lists. Arrays can also have three or more indices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The number of elements of an array can be changed, but keep in mind that this can cause significant computational cost. Creating an array of a given length is frequently referred to as &lt;strong&gt;allocating the
array&lt;/strong&gt;. It means that a part of the computer’s memory is marked for being occupied by this array.&lt;/p&gt;

&lt;p&gt;To create a numpy array, you will have to first import it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The tradition is to import &lt;code&gt;numpy&lt;/code&gt; as &lt;code&gt;np&lt;/code&gt;. To convert a list to a numpy array,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [3]: import numpy as np

In [4]: a = [1,2,3,4,5]

In [5]: a = np.array(a)

In [6]: type(a)
Out[6]: numpy.ndarray

In [7]: a
Out[7]: array([1, 2, 3, 4, 5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To create a new &lt;strong&gt;array of length n, filled with zeros&lt;/strong&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = np.zeros(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that numpy automatically identifies the appropriate type for all array elements, whether &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, or etc.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [10]: a[1]
Out[10]: 2

In [11]: type(a[1])
Out[11]: numpy.int32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Even if there is a single &lt;code&gt;float&lt;/code&gt; element in the list, then all elements in the list will be converted to float in the numpy array by default,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: type(a[1])
Out[11]: numpy.int32

In [12]: a = [1,2,3,4,5.0]

In [13]: a = np.array(a)

In [14]: type(a[1])
Out[14]: numpy.float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you want to get the desired element type, then you will have to ask numpy for it explicitly,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [17]: a = [1,2,3.5,4.9,5.0]

In [18]: a = np.array(a, int)   # convert all elements in the list to integer

In [19]: a
Out[19]: array([1, 2, 3, 4, 5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can see the full list of input arguments to np.array function &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A similar function &lt;code&gt;np.zeros_like(c)&lt;/code&gt; generates an array of zeros where the length of the generated array is that of the input array c and the element type is the same as those in c.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [33]: b = [1,2,3,4,5,6,7]

In [34]: a = np.zeros_like(b)

In [35]: a
Out[35]: array([0, 0, 0, 0, 0, 0, 0])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Often one wants an array to have $n$ elements with uniformly distributed values in an interval $[p,q]$. The numpy function &lt;code&gt;linspace&lt;/code&gt; creates such arrays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [36]: a = np.linspace(1, 100, 53)

In [37]: a
Out[37]:
array([   1.        ,    2.90384615,    4.80769231,    6.71153846,
          8.61538462,   10.51923077,   12.42307692,   14.32692308,
         16.23076923,   18.13461538,   20.03846154,   21.94230769,
         23.84615385,   25.75      ,   27.65384615,   29.55769231,
         31.46153846,   33.36538462,   35.26923077,   37.17307692,
         39.07692308,   40.98076923,   42.88461538,   44.78846154,
         46.69230769,   48.59615385,   50.5       ,   52.40384615,
         54.30769231,   56.21153846,   58.11538462,   60.01923077,
         61.92307692,   63.82692308,   65.73076923,   67.63461538,
         69.53846154,   71.44230769,   73.34615385,   75.25      ,
         77.15384615,   79.05769231,   80.96153846,   82.86538462,
         84.76923077,   86.67307692,   88.57692308,   90.48076923,
         92.38461538,   94.28846154,   96.19230769,   98.09615385,  100.        ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vectorization&quot;&gt;Vectorization&lt;/h3&gt;
&lt;p&gt;Loops over very long arrays may run slowly. An advantage of arrays is that, with arrays, loops can be avoided the whole array be manipulated directly and simultaneously. If you are a Fortran programmer, you are likely already quite familiar with the powerful idea of array computing and vectorization. If not, then consider the following example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;x = np.linspace(0, 2, 201)
In [39]: x
Out[39]:
array([ 0.  ,  0.02,  0.04,  0.06,  0.08,  0.1 ,  0.12,  0.14,  0.16,
        0.18,  0.2 ,  0.22,  0.24,  0.26,  0.28,  0.3 ,  0.32,  0.34,
        0.36,  0.38,  0.4 ,  0.42,  0.44,  0.46,  0.48,  0.5 ,  0.52,
        0.54,  0.56,  0.58,  0.6 ,  0.62,  0.64,  0.66,  0.68,  0.7 ,
        0.72,  0.74,  0.76,  0.78,  0.8 ,  0.82,  0.84,  0.86,  0.88,
        0.9 ,  0.92,  0.94,  0.96,  0.98,  1.  ,  1.02,  1.04,  1.06,
        1.08,  1.1 ,  1.12,  1.14,  1.16,  1.18,  1.2 ,  1.22,  1.24,
        1.26,  1.28,  1.3 ,  1.32,  1.34,  1.36,  1.38,  1.4 ,  1.42,
        1.44,  1.46,  1.48,  1.5 ,  1.52,  1.54,  1.56,  1.58,  1.6 ,
        1.62,  1.64,  1.66,  1.68,  1.7 ,  1.72,  1.74,  1.76,  1.78,
        1.8 ,  1.82,  1.84,  1.86,  1.88,  1.9 ,  1.92,  1.94,  1.96,
        1.98,  2.  ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, if you wanted to calculate the &lt;code&gt;sin&lt;/code&gt; of the elements of &lt;code&gt;x&lt;/code&gt; in the traditional way, you would do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [41]: from math import sin

In [42]: sinX = [sin(i) for i in x]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This approach however, can be quite time consuming and computationally costly, because &lt;strong&gt;for-loops are very slow in Python&lt;/strong&gt;, up to a few hundred times than what you get in Fortran or C.&lt;/p&gt;

&lt;p&gt;A more appropriate solution to the above problem is use the &lt;code&gt;sin&lt;/code&gt; function from numpy module, which enables vectorization,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;sinX = np.sin(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You see, with the above numpy call, there is no need for a for-loop. The above Python code is an example of a &lt;strong&gt;vectorized code&lt;/strong&gt; and the previous code which contained for-loop is an example &lt;strong&gt;scalar code&lt;/strong&gt;. The numpy functions are capable of handling arrays as input. Compare the performance of the two codes in the above example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [45]: %timeit np.sin(x)
The slowest run took 11.73 times longer than the fastest. This could mean that an intermediate result is being cached.
100000 loops, best of 3: 2.21 µs per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [46]: %timeit [sin(i) for i in x]
10000 loops, best of 3: 23.1 µs per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The vectorized code in this example appears to be more than one order of magnitude (more than 10 times) faster than faster than the scalar version of the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is the vectorized code faster in Python?&lt;/strong&gt;&lt;br /&gt;
The reason is that numpy uses precompiled Fortran and C loops to loop over the elements of the input array. loops in Fortran and C have far less overhead than loops in Python. Similar to the above example, you can define your own functions that are also vectorized, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def f(x):
    return x**2*np.exp(-x**2)
x = np.linspace(-3, 3, 101)
y = f(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The numpy package also has a method for &lt;strong&gt;Automatic vectorization&lt;/strong&gt; of scalar functions (function that only take scalar arguments), for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;func_vec = np.vectorize(func_scalar)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, for serious programming, I do not recommend you to use this numpy functionality as it can be slow and inefficient.&lt;/p&gt;

&lt;h4 id=&quot;vectorization-of-if-blocks&quot;&gt;vectorization of if-blocks&lt;/h4&gt;
&lt;p&gt;For vectorization of calculations involving booleans and if conditions, the solution can be problem dependent, but one common easy way of addressing simple boolean problems could be &lt;code&gt;where&lt;/code&gt; method in numpy package. For example, suppose you have an list of numbers and you would like to perform a task on all negative numbers in the array, say set them all to zero, and leave the positive numbers intact. One solution would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [57]: x = np.array([1,-1,3,-5,-6,8,7,4,10])

In [58]: np.where(x&amp;lt;0,0,x)
Out[58]: array([ 1,  0,  3,  0,  0,  8,  7,  4, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aliasing-vs-copying-arrays&quot;&gt;Aliasing vs. copying arrays&lt;/h4&gt;
&lt;p&gt;If you recall from &lt;a href=&quot;http:/ECL2017S/lecture/5-python-variables-assignments#aliasing-vs-copying&quot; target=&quot;_blank&quot;&gt;lecture &lt;/a&gt;, there is a difference between aliasing and copying sequence objects in Python. The same rules also hold for numpy arrays, meaning that if you need an independent copy of an existing array, then you have to use &lt;code&gt;copy&lt;/code&gt; method to generate it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [63]: a = np.array([1,2,3,4,5])

In [64]: b = a.copy()

In [65]: b[0] = -1

In [66]: a
Out[66]: array([1, 2, 3, 4, 5])

In [67]: b
Out[67]: array([-1,  2,  3,  4,  5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
otherwise a simple equality assignment like &lt;code&gt;b = a&lt;/code&gt; will only create an alias for numpy array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [68]: a = np.array([1,2,3,4,5])

In [69]: b = a

In [70]: b[0] = -1

In [71]: a
Out[71]: array([-1,  2,  3,  4,  5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;in-place-arithmetic-in-python&quot;&gt;In-place arithmetic in Python&lt;/h4&gt;
&lt;p&gt;Consider two arrays &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; of the same shape. The expression &lt;code&gt;a += b&lt;/code&gt; means &lt;code&gt;a = a + b&lt;/code&gt;. There are however hidden differences between the two. In the statement &lt;code&gt;a = a + b&lt;/code&gt;, the sum &lt;code&gt;a + b&lt;/code&gt; is first computed, yielding a new array, and then the name &lt;code&gt;a&lt;/code&gt; is bound to this new array. The old array a is lost unless there are other names assigned to this array. In the statement &lt;code&gt;a += b&lt;/code&gt;, elements of &lt;code&gt;b&lt;/code&gt; are added directly into the elements of &lt;code&gt;a&lt;/code&gt; (in memory). There is no hidden intermediate array as in &lt;code&gt;a = a + b&lt;/code&gt;. This implies that &lt;strong&gt;&lt;code&gt;a += b&lt;/code&gt; is more efficient than &lt;code&gt;a = a + b&lt;/code&gt; since Python avoids making an extra array&lt;/strong&gt;. In other words, the operators +=, *=, and similar operators, perform &lt;strong&gt;in-place arithmetic&lt;/strong&gt; in arrays.&lt;/p&gt;

&lt;h4 id=&quot;allocating-arrays-in-python&quot;&gt;Allocating arrays in Python&lt;/h4&gt;
&lt;p&gt;We have already seen in the above that the &lt;code&gt;np.zeros&lt;/code&gt; function is useful for making a new array of a given size. Very often the size and the type of array elements are known a priori or has to match another existing array’s shape and type &lt;code&gt;b&lt;/code&gt;. There are two ways of achieving this goal,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [66]: a
Out[66]: array([1, 2, 3, 4, 5])

In [67]: b
Out[67]: array([-1,  2,  3,  4,  5])

In [68]: a
Out[68]: array([1, 2, 3, 4, 5])

In [69]: b = a.copy()

In [70]: c = np.zeros(a.shape, a.dtype)

In [71]: a.shape
Out[71]: (5,)

In [72]: a.
a.T            a.argsort      a.compress     a.cumsum       a.dumps        a.imag         a.min          a.prod         a.reshape      a.shape        a.sum          a.tostring
a.all          a.astype       a.conj         a.data         a.fill         a.item         a.nbytes       a.ptp          a.resize       a.size         a.swapaxes     a.trace
a.any          a.base         a.conjugate    a.diagonal     a.flags        a.itemset      a.ndim         a.put          a.round        a.sort         a.take         a.transpose
a.argmax       a.byteswap     a.copy         a.dot          a.flat         a.itemsize     a.newbyteorder a.ravel        a.searchsorted a.squeeze      a.tobytes      a.var
a.argmin       a.choose       a.ctypes       a.dtype        a.flatten      a.max          a.nonzero      a.real         a.setfield     a.std          a.tofile       a.view
a.argpartition a.clip         a.cumprod      a.dump         a.getfield     a.mean         a.partition    a.repeat       a.setflags     a.strides      a.tolist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Notice how the attribute &lt;code&gt;a.dtype&lt;/code&gt; (dtype standing for data type), and &lt;code&gt;x.shape&lt;/code&gt; (a tuple) were used in the above example. The shape attribute in array objects holds the shape, i.e., the size of each dimension. The method &lt;code&gt;size&lt;/code&gt; returns the total number of elements in the array.&lt;/p&gt;

&lt;p&gt;Sometimes one may also want to ensure that an object is an array, and if not, turn it into an array. The &lt;code&gt;np.asarray&lt;/code&gt; function is useful in such cases,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = np.asarray(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that one could have also use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = np.array(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There is no difference in the output, but note that the second approach does one redundant step, because in the first approach, if the input object is already an array, then there is no need in converting it to an array.&lt;/p&gt;

&lt;h4 id=&quot;multidimensional-numpy-arrays&quot;&gt;Multidimensional NumPy arrays&lt;/h4&gt;
&lt;p&gt;Creating multidimensional arrays is very much the same as vectors in numpy. The only thing to keep in mind is that the shape of the array is given as a tuple to &lt;code&gt;np.array()&lt;/code&gt;. For example, to initialize a 3D array of size (0:3,0:5,0:2), you would do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [86]: a = np.zeros((3,5,2))

In [87]: a
Out[87]:
array([[[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]],

       [[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]],

       [[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The arrays created so far have been of type &lt;code&gt;ndarray&lt;/code&gt;. NumPy also has a matrix type called &lt;code&gt;matrix&lt;/code&gt; or &lt;code&gt;mat&lt;/code&gt; for one- and two-dimensional arrays. One-dimensional arrays are then extended with one extra dimension such that they become matrices, i.e., either a row vector or a column vector,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [99]: x1 = np.array([1, 2, 3], float)

In [100]: x2 = np.matrix(x1) # or np.mat(x1)

In [102]: x3 = np.mat(x1).T # transpose = column vector

In [103]: x3
Out[103]:
matrix([[ 1.],
        [ 2.],
        [ 3.]])

In [104]: type(x3)
Out[104]: numpy.matrixlib.defmatrix.matrix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A special feature of matrix objects in NumPy is that the multiplication operator represents the matrix-matrix, vector-matrix, or matrix-vector product as we know from linear algebra. However, keep in mind that &lt;strong&gt;the multiplication operator between standard ndarray objects is different from multiplication between numpy matrices&lt;/strong&gt;. The &lt;code&gt;ndarray&lt;/code&gt; multiplication is simply a vectorized version of scalar multiplication,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [105]: a = np.array([1,2,3])

In [106]: b = np.array([1,2,3])

In [107]: a*b
Out[107]: array([1, 4, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
whereas, the matrix multiplication would yield,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [108]: aMat = np.mat(a)

In [109]: bMat = np.mat(b)

In [110]: aMat*bMat.T
Out[110]: matrix([[14]])

In [111]: aMat.T*bMat
Out[111]:
matrix([[1, 2, 3],
        [2, 4, 6],
        [3, 6, 9]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you intend to use Python and MATLAB together for your projects, then I recommend you to consider programming with matrices in Python instead of &lt;code&gt;ndarray&lt;/code&gt; objects, because the matrix type in Python behaves quite similar to matrices in MATLAB.
Numpy has a lot more to offer for linear algebra operation, that far beyond the scope of this lecture. More information about algebraic operations in NumPy can be found &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/routines.linalg.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;symbolic-linear-algebra&quot;&gt;Symbolic linear algebra&lt;/h4&gt;
&lt;p&gt;There also a package &lt;a href=&quot;http://www.sympy.org/en/index.html&quot; target=&quot;_blank&quot;&gt;SymPy&lt;/a&gt; that supports symbolic computations for linear algebra operations as well,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [116]: import sympy as sym

In [117]: a = sym.Matrix([[2, 0], [0, 5]])

In [118]: a**-1     # inverse of matrix a
Out[118]:
Matrix([
[1/2,   0],
[  0, 1/5]])

In [119]: a.inv()   # same as above, inverse of a
Out[119]:
Matrix([
[1/2,   0],
[  0, 1/5]])

In [120]: a.det()   # determinant of a
Out[120]: 10

In [121]: a.eigenvals() # eigenvalues of a
Out[121]: {2: 1, 5: 1}

In [122]: a.eigenvects()    # eigenvectors of a
Out[122]:
[(2, 1, [Matrix([
   [1],
   [0]])]), (5, 1, [Matrix([
   [0],
   [1]])])]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A tutorial on &lt;code&gt;sympy&lt;/code&gt; can be found &lt;a href=&quot;http://docs.sympy.org/dev/tutorial/matrices.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;curve-plotting-in-python&quot;&gt;Curve plotting in Python&lt;/h2&gt;
&lt;p&gt;The workhorse of plotting in Python is &lt;a href=&quot;https://matplotlib.org/&quot; target=&quot;_blank&quot;&gt;Matplotlib&lt;/a&gt; which is a Python 2D plotting library capable of producing publication quality figures. The usage of matplotlib is very similar to MATLAB.&lt;/p&gt;

&lt;h3 id=&quot;matplotlib-the-workhorse-of-plotting-in-python&quot;&gt;Matplotlib, the workhorse of plotting in Python&lt;/h3&gt;
&lt;p&gt;To see how plotting with Matplotlib works, let’s start with a simple example of 2D curve plotting,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
import matplotlib.pyplot as plt
def f(x):
    return x**2*np.exp(-x**2)
x = np.linspace(0, 3, 51) # 51 points between 0 and 3
y = np.zeros(len(x)) # allocate y with float elements
for i in range(len(x)):
    y[i] = f(x[i])
plt.plot(x, y)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you try the above code in IPython, the out on screen would be something like the following,&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/simple_curve_screen.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;You can also save the figure output as a file by,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [8]: plt.plot(x, y)
Out[8]: [&amp;lt;matplotlib.lines.Line2D at 0x1bff2e479e8&amp;gt;]

In [9]: plt.savefig('simple_curve.pdf') # produces PDF file.

In [10]: plt.savefig('simple_curve.png') # produces PNG file.

In [11]: pwd
Out[11]: 'C:\\Users\\Amir'  # files are saved here
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Just like MATLAB, the figures could be also decorated with axis labels, plot title, legend and a lot more, in a syntax very much like MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['x^2*exp(-x^2)'])
plt.axis([0, 3, -0.05, 0.6]) # [xmin, xmax, ymin, ymax]
plt.title('A simple Matplotlib decorated plot')
plt.savefig('simple_curve_decorated.png')
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which outputs &lt;a href=&quot;http:/ECL2017S/lecture/9/simple_curve_decorated.png&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt; in your current directory,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/simple_curve_decorated.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;plotting-multiple-curves-in-one-figure&quot;&gt;Plotting multiple curves in one figure&lt;/h4&gt;
&lt;p&gt;Again, similar to MATLAB, this can be achieved by the statement &lt;code&gt;hold('on')&lt;/code&gt; like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def f(x):
    return x**2*np.exp(-x**2)
def g(x):
    return x*np.exp(-x)
x = np.linspace(0, 3, 51) # 51 points between 0 and 3
yf = np.zeros(len(x)) # allocate y with float elements
yg = np.zeros(len(x)) # allocate y with float elements
for i in range(len(x)):
    yf[i] = f(x[i])
    yg[i] = g(x[i])
plt.plot(x, yf, 'r-')   # plot with color red, as line
plt.hold('on')
plt.plot(x, yg, 'bo')   # # plot with color blue, as points
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['x^2*exp(-x^2)' , 'x*exp(-x)'])
plt.axis([0, 3, -0.05, 0.6]) # [xmin, xmax, ymin, ymax]
plt.title('multiple Matplotlib curves in a decorated plot')
plt.savefig('multiple_curves_decorated.png')
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of the code is a PNG figure &lt;a href=&quot;http:/ECL2017S/lecture/9/multiple_curves_decorated.png&quot; target=&quot;_blank&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/multiple_curves_decorated.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;If you need to discontinue multiple plots on the same figure, again, as in MATLAB, you use &lt;code&gt;hold('off')&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;subplots-in-matplotlib&quot;&gt;Subplots in Matplotlib&lt;/h4&gt;
&lt;p&gt;Suppose you wanted to generate the same curves as in the above example, but each in a different plot, but in the same figure. One way to do this would be like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.figure()            # generates a new figure as in MATLAB
plt.subplot(2,1,1)      # create a 2-row, 1-column subplot, and this is the 1st subplot.
plt.plot(x, yf, 'r-')   # plot with color red, as line
plt.subplot(2,1,2)      # this is the 2nd subplot.
plt.plot(x, yg, 'bo')   # plot with color blue, as points
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['x*exp(-x)'])
plt.axis([0, 3, -0.05, 0.6]) # [xmin, xmax, ymin, ymax]
plt.title('an example Matplotlib subplot')
plt.savefig('two_by_one_subplot.png')
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of the code is a PNG figure &lt;a href=&quot;http:/ECL2017S/lecture/9/two_by_one_subplot.png&quot; target=&quot;_blank&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/two_by_one_subplot.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Note that since the decorations appeared only for the second subplot, only the second one in the figure above is decorated with plot title, legend, etc. Also, note that the &lt;code&gt;figure()&lt;/code&gt; method creates a new plot window on the screen.&lt;/p&gt;

&lt;h3 id=&quot;other-plotting-packages&quot;&gt;Other plotting packages&lt;/h3&gt;
&lt;p&gt;For more complicated 2D/3D or vector field plotting, you may find Matplotlib inadequate. To address these inadequacies, other packages have been developed which provide interface to more advanced plotting software such as, MATLAB, Gnuplot, Grace, OpenDX, VTK, and others.&lt;/p&gt;

&lt;h4 id=&quot;easyviz-from-scitools&quot;&gt;Easyviz from SciTools&lt;/h4&gt;
&lt;p&gt;Because each of the above mentioned visualization software has its own plotting syntax, a Python module &lt;code&gt;easyviz&lt;/code&gt; has been developed which provides a universal interface for any of the above mentioned back-end plotting software. In other words, the user can request eazyvis to use one of the above-mentioned software as the plotting engine in Python, while the syntax of the Python code is universal and the same for all of them, and this is achieved by using &lt;code&gt;eazyvis&lt;/code&gt;. Just like Matplotlib, the syntax of &lt;code&gt;eazyvis&lt;/code&gt; has been also purposefully made very similar to MATLAB.&lt;/p&gt;

&lt;p&gt;The Easyviz module is part of the &lt;a href=&quot;https://github.com/hplgit/scitools&quot; target=&quot;_blank&quot;&gt;SciTools package&lt;/a&gt;, which consists of a set of Python tools building on Numerical Python, ScientificPython, the comprehensive SciPy environment, and other packages for scientific computing with Python. However, keep in mind that &lt;strong&gt;SciTools strictly requires &lt;a href=&quot;http://python.org&quot; target=&quot;_blank&quot;&gt;Python v2.7&lt;/a&gt; and &lt;a href=&quot;http://numpy.org&quot; target=&quot;_blank&quot;&gt;Numerical Python&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;mayavi-visualization-package&quot;&gt;Mayavi visualization package&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.enthought.com/mayavi/mayavi/&quot; target=&quot;_blank&quot;&gt;Mayavi&lt;/a&gt; is another advanced, free, scientific data visualizer for Python, with emphasis on &lt;strong&gt;three-dimensional visualization techniques&lt;/strong&gt;. The package is written in Python, and uses the &lt;a href=&quot;http://www.vtk.org/&quot; target=&quot;_blank&quot;&gt;Visualization Toolkit (VTK)&lt;/a&gt; in C++ for rendering graphics. Since VTK can be configured with different backends, so can Mayavi. Mayavi is cross
platform and runs on most platforms like Mac OS X, Windows, and Linux.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/9-python-array-computing-plotting&quot;&gt;Lecture 9: Python - array computing and plotting&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on April 12, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 8: Python - I/O, error handling, and testing frameworks]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing"/>
  <id>http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture further explains topics on Input/Output processes and error handling in Python, as well as methods of testing the accuracy and robustness of your code.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;io-continued&quot;&gt;I/o (continued)&lt;/h2&gt;
&lt;p&gt;So far in this course, we have indirectly discussed several methods of getting input information from the user, and several methods of outputting the result in a Python program. This lecture, attempts at formalizing all the previous discussions and introduce more general efficient methods of the code interaction with users.&lt;/p&gt;

&lt;h3 id=&quot;methods-of-inputting-data&quot;&gt;Methods of inputting data&lt;/h3&gt;
&lt;p&gt;Let’s begin with an example code, explaining the meaning of input/output (I/O) in Python,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import exp
a = 0.1
b = 1
x = 0.6
y = a*exp(b*x)
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.1822118800390509
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code, $a,b,x$ are examples of input data to a code, and $y$ is an example of code output. In such case as in the above, the input data is said to be &lt;strong&gt;hardcoded&lt;/strong&gt; in the program.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;In general, in any programming language, including Python you should always avoid hardcoding input information into your program.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    If data is hardcoded, then every time it has to change, the user has to change the content of the code, and this is not considered good programming style for software development.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
In general, input data can be fed to a program in four different ways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;let the user answer questions in a dialog in the &lt;strong&gt;terminal window&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user provide input on the &lt;strong&gt;command line&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user provide input data in a &lt;strong&gt;file&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user write input data in a &lt;strong&gt;graphical interface&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;input-data-from-terminal-window&quot;&gt;Input data from terminal window&lt;/h4&gt;
&lt;p&gt;We have already introduced and used this method frequently in previous lectures, via the Python’s builtin function &lt;code&gt;input()&lt;/code&gt;. If we were to get the input data for the above example code via the terminal window, an example would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import exp
a,b,x = input('input the values for a,b,x (comma separated): ').split(&quot;,&quot;)
y = float(a)*exp(float(b)*float(x))
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input the values for a,b,x (comma separated): 0.1,1,0.6
0.1822118800390509
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;input-data-from-command-line&quot;&gt;Input data from command line&lt;/h4&gt;

&lt;p&gt;This approach, which we discussed in previous lecture, is most popular in Unix-like environments, where most users are accustomed to using Bash command line. However, it can be readily used in Windows environment as well. For this approach, there is a Python module &lt;code&gt;sys&lt;/code&gt; that can accomplish what we desire,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import exp
import sys
a,b,x = sys.argv[1],sys.argv[2],sys.argv[3]
y = float(a)*exp(float(b)*float(x))
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now if you save this code in a &lt;a href=&quot;http:/ECL2017S/lecture/8/input_via_sys.py&quot; target=&quot;_blank&quot;&gt;file&lt;/a&gt;, and run it on the Bash command line, the program expects you the enter 3 float numbers following the name of the program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python input_via_sys.py 0.1 1 0.6
0.1822118800390509
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;ATTENTION: Notice the convention for command-line arguments&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    
    &lt;b&gt;1.&lt;/b&gt; As you see in the above example, the name of the program is considered as the first command line argument (&lt;code&gt;sys.argv[0]&lt;/code&gt;). Also the arguments must be separated by a white space, and should appear in the proper order.&lt;br /&gt;&lt;br /&gt;
    
    &lt;b&gt;2.&lt;/b&gt; If one value has a white space (e.g., a string value with white space character in it), then it has to be contained in quotation marks &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;&quot;&quot;&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;
    
    &lt;b&gt;3.&lt;/b&gt; Also note that all input command-line arguments are taken as string values. Therefore, you will have to convert them to the proper type (e.g., float, int, ...) once they are read from the command line.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;variable-number-of-command-line-arguments&quot;&gt;Variable number of command line arguments&lt;/h5&gt;
&lt;p&gt;If the number of input arguments on the command line is not known a priori, then you can get a list of all input arguments using &lt;code&gt;sys.argv[1:]&lt;/code&gt; and then use a for-loop to loop over individual elements of it, or use &lt;code&gt;len()&lt;/code&gt; function to find the total number of input arguments.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;option-value-pairs-as-command-line-input&quot;&gt;Option-value pairs as command-line input&lt;/h5&gt;
&lt;p&gt;Once the number of input arguments to your code increases, the process of inputting data as command line arguments can get complicated. Ideally, the user should be able to enter data in any arbitrary order. This can be done by indicating the meaning of each input by a flag before the input value. For example, suppose you were to find the location $y(t)$ of an object thrown up in the air vertically, given that the object started at $y=y_0$, at $t=0$ with an initial velocity $v_0$, and thereafter was subject to a constant acceleration $a$,
&lt;script type=&quot;math/tex&quot;&gt;y(t) = y_0 + v_0t + \frac{1}{2}at^2 ~.&lt;/script&gt;
Obviously, this formula requires four input variables: $y_0$, $v_0$, $a$, and $t$, and we don’t the program user to memorize their order of entry on the command line. The solution is to identify the type of each input using a flag preceding the input value. This can be done using &lt;code&gt;argparse&lt;/code&gt; Python module. Details of the usage of this module goes beyond the limited time of our class. However, I recommend you to have a look at the &lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot; target=&quot;_blank&quot;&gt;syntax and usage of &lt;em&gt;argparse&lt;/em&gt; module&lt;/a&gt;, as you will find it very handy in your Python codes, projects, and software development.&lt;/p&gt;

&lt;h4 id=&quot;input-data-from-file&quot;&gt;Input data from file&lt;/h4&gt;
&lt;p&gt;In cases where the input data is large, the command-line arguments and input from terminal window are not efficient anymore. In such cases, the most common approach is to let the code read input data from a file, the path to which is most often given to the code from the command line or the terminal window.&lt;/p&gt;

&lt;h5 id=&quot;reading-a-file-line-by-line&quot;&gt;Reading a file line by line&lt;/h5&gt;
&lt;p&gt;To read a file, say &lt;a href=&quot;http:/ECL2017S/lecture/8/data.in&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;, one first needs to open it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: myfile = open('data.in', 'r')

In [2]: type(myfile)
Out[2]: _io.TextIOWrapper

In [5]: myfile.
     myfile.buffer         myfile.detach         myfile.fileno         myfile.line_buffering myfile.newlines       myfile.readline       myfile.seekable       myfile.writable
     myfile.close          myfile.encoding       myfile.flush          myfile.mode           myfile.read           myfile.readlines      myfile.tell           myfile.write
     myfile.closed         myfile.errors         myfile.isatty         myfile.name           myfile.readable       myfile.seek           myfile.truncate       myfile.writelines

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The function &lt;code&gt;open&lt;/code&gt; creates a file object, stored in the variable &lt;code&gt;myfile&lt;/code&gt;. The second input argument to &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;'r'&lt;/code&gt; tells the function that the purpose of this file opening is to read data (as opposed to, for example, writing data, or both reading and writing).&lt;/p&gt;

&lt;p&gt;Now you can use a for loop to read the data in this file line by line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;for line in myfile:
    print(line)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is printed here, is actually the content of &lt;code&gt;data.in&lt;/code&gt; file, line by line.&lt;/p&gt;

&lt;h5 id=&quot;alternative-method-of-reading-file-data&quot;&gt;Alternative method of reading file data&lt;/h5&gt;
&lt;p&gt;Instead of reading one line at a time, as in the above, we can load all lines into a single list of strings,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [9]: myfile = open('data.in', 'r')
In [10]: lines = myfile.readlines()

In [11]: type(lines)
Out[11]: list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that each element of &lt;code&gt;line&lt;/code&gt; contains one line of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [15]: lines
Out[15]: ['1\n', '3\n', '4\n', '5\n', '6\n', '7\n', '88\n', '65\n']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The action of the method &lt;code&gt;readlines()&lt;/code&gt; is equivalent to a for-loop like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: myfile = open('data.in', 'r')
    ...: lines = []
    ...: for line in myfile:
    ...:     lines.append(line)
    ...: lines
    ...:
Out[16]: ['1\n', '3\n', '4\n', '5\n', '6\n', '7\n', '88\n', '65\n']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or this &lt;em&gt;list comprehension&lt;/em&gt; format,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [19]: myfile = open('data.in', 'r')
    ...: lines = [line for line in myfile]
    ...: lines
    ...:
Out[19]: ['1\n', '3\n', '4\n', '5\n', '6\n', '7\n', '88\n', '65\n']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose you were to calculate the mean of the numbers in &lt;a href=&quot;http:/ECL2017S/lecture/8/data.in&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;. You could simply use the following list comprehension code to do so,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [22]: mean = sum([float(line) for line in lines])/len(lines)
    ...: print(mean)
22.375
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that once you read the file, you can close it using,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;myfile.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-with-statement&quot;&gt;The &lt;em&gt;with&lt;/em&gt; statement&lt;/h5&gt;
&lt;p&gt;More often in modern Python code you may see the &lt;code&gt;with&lt;/code&gt; statement for reading a file, like the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [34]: with open('data.in', 'r') as myfile:
    ...:     for line in myfile:
    ...:         print(line)
    ...:
1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This is technically equivalent to,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [35]: myfile = open('data.in', 'r')
    ...: for line in myfile:
    ...:     print(line)
    ...: myfile.close()
    ...:
1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The difference here is that with the modern &lt;code&gt;with&lt;/code&gt; statement, there is no need to close the file in the end.&lt;/p&gt;

&lt;h5 id=&quot;the-old-while-true-construction&quot;&gt;The old &lt;em&gt;while True&lt;/em&gt; construction&lt;/h5&gt;
&lt;p&gt;The call &lt;code&gt;myfile.readline()&lt;/code&gt; returns a string containing the text at the current line. A new &lt;code&gt;myfile.readline()&lt;/code&gt; statement will read the next line. If the file reaches the end, then &lt;code&gt;myfile.readline()&lt;/code&gt; returns an empty string, the end of the file has
reached and the code must stop further reading of the file. The traditional way of telling the code to stop at the end of the file is a &lt;code&gt;while&lt;/code&gt; loop like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [36]: myfile = open('data.in', 'r')
    ...: while True:
    ...:     line = myfile.readline()
    ...:     if not line:
    ...:         break
    ...:     print(line)
1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;reading-an-entire-file-as-a-single-string&quot;&gt;Reading an entire file as a single string&lt;/h5&gt;
&lt;p&gt;While the &lt;code&gt;readlines()&lt;/code&gt; method returns a list of lines in the file, the &lt;code&gt;read()&lt;/code&gt; method returns a string containing the entire content of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
In [37]: myfile = open('data.in', 'r')
    ...: s = myfile.read()

In [38]: s
Out[38]: '1\n3\n4\n5\n6\n7\n88\n65\n'

In [39]: print(s)
1
3
4
5
6
7
88
65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The major advantage of this method of reading file content is that you can then immediately apply string methods directly on the file content.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [48]: myfile = open('data.in', 'r')
    ...: numbers = [float(x) for x in myfile.read().split()]
    ...: mean = sum(numbers)/len(numbers)
    ...:

In [49]: print(mean)
22.375
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;converting-user-input-to-live-python-objects&quot;&gt;Converting user input to live Python objects&lt;/h3&gt;
&lt;p&gt;One of the cool features in Python I/O is that you can provide text containing valid Python code as input to a program and then
turn that text into &lt;em&gt;live Python objects&lt;/em&gt; as if the text were lines of code written directly into the program beforehand. This is a very powerful tool for letting users specify function formulas, for instance, as input to a program. The program code itself has no knowledge about the kind of function the user wants to work with, yet at run time the user’s desired
formula enters the computations. To achieve the goal, one can use Python’s &lt;strong&gt;magic functions&lt;/strong&gt;, a.k.a. &lt;strong&gt;special methods&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-magic-eval-function&quot;&gt;The magic &lt;em&gt;eval&lt;/em&gt; function&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;eval&lt;/code&gt; function takes a &lt;strong&gt;string as argument&lt;/strong&gt; and &lt;strong&gt;evaluates&lt;/strong&gt; this string as a &lt;strong&gt;Python expression&lt;/strong&gt;. The result of an expression is an &lt;strong&gt;object&lt;/strong&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [10]: eval('1+2')
Out[10]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This is equivalent to typing,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: 1+2
Out[11]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or another example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [12]: a = 1

In [13]: b = 2

In [14]: c = eval('a+b')

In [15]: c
Out[15]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [19]: from math import sqrt

In [20]: eval('sqrt(4)')
Out[20]: 2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But, note that in all of the above examples, the &lt;code&gt;eval&lt;/code&gt; function &lt;strong&gt;evaluates&lt;/strong&gt; a Python expression, that is, this function &lt;strong&gt;cannot execute&lt;/strong&gt; a Python statement.&lt;/p&gt;

&lt;p&gt;Now the cool thing about this function is that, you can directly apply it to the user input. For example, suppose the user is asked to input a Python expression and then the code is supposed to evaluate the input just like a simple calculator,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;eval(input('Input an arithmetic expression to evaluate: '))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Input an arithmetic expression to evaluate: 2 + 3.0/5 + exp(7)
1099.2331584284584
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;the-magic-exec-function&quot;&gt;The magic &lt;em&gt;exec&lt;/em&gt; function&lt;/h4&gt;
&lt;p&gt;Similar to the &lt;code&gt;eval&lt;/code&gt; function, there is also an &lt;code&gt;exec&lt;/code&gt; magic function that executes a string containing an arbitrary
Python code, not just a Python expression. This is a powerful idea since it now enables the user to write a formula as input to the program, available to the program in the form of a string object. The program can then convert this formula to a callable Python code, or function, using the magic &lt;code&gt;exec&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [21]: exec('import math')

In [22]: exec('a=1; b=2; c=a+b')

In [23]: a,b,c
Out[23]: (1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One could even input a full function definition to the exec function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;myFuncString = input('Input a Python function definition of interest: ')
f = exec(myFuncString)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Input a Python function definition of interest, named func: def func(x): return 2*x + 1  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;func(x=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, since this is such a useful functionality in Python, there is already a package written &lt;code&gt;scitools&lt;/code&gt;, that converts an input expression to a Python function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from scitools.StringFunction import StringFunction
myfuncString = input('Input a Python expression to build your requested Python function: ')
myfunc = StringFunction(myfuncString)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The only major caveat with this module is that, at the moment, it only works with Python 2.x, and not Python 3. So, the above code will not work on your Python 3 platform.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;methods-of-outputting-data&quot;&gt;Methods of outputting data&lt;/h3&gt;
&lt;p&gt;Two major methods of data output are,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;writing to the terminal window, as previously done using &lt;code&gt;print()&lt;/code&gt; function, or,&lt;/li&gt;
  &lt;li&gt;writing to an output file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have already extensively discussed printing output to the terminal window. Writing data to file is also easy.&lt;/p&gt;

&lt;h4 id=&quot;writing-to-a-file&quot;&gt;Writing to a file&lt;/h4&gt;
&lt;p&gt;Similar to reading from a file, in order to write to a file, one has to first open the file, this time for the purpose of writing, which is indicated by &lt;code&gt;'w'&lt;/code&gt; or &lt;code&gt;'a'&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;outfile = open(filename, 'w') # write to a new file, or overwrite file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One could also &lt;strong&gt;append&lt;/strong&gt; some output to an &lt;strong&gt;existing file&lt;/strong&gt; using the &lt;code&gt;'a'&lt;/code&gt; indicator as input to &lt;code&gt;open()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;outfile = open(filename, 'a') # append to the end of an existing file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In both cases, the string valued variable &lt;code&gt;filename&lt;/code&gt; contains the path to the file that should be created or manipulated. Suppose we want to write the output of the above code in previous section to a new file. All you would need to do is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;myfile = open('data.in', 'r')
numbers = [float(x) for x in myfile.read().split()]
mean = sum(numbers)/len(numbers)
outfile = open('data.out','w')
outfile.write(str(mean) + '\n')
myfile.close()
outfile.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will result in the creation of &lt;a href=&quot;http:/ECL2017S/lecture/8/data.out&quot; target=&quot;_blank&quot;&gt;a new file&lt;/a&gt; named &lt;code&gt;data.out&lt;/code&gt; which contains the value of &lt;code&gt;mean&lt;/code&gt; variable. Note that the addition of the character &lt;code&gt;'\n'&lt;/code&gt; at the end of the &lt;code&gt;write&lt;/code&gt; statement is necessary, otherwise the next write to the file will not appear on a new line.&lt;/p&gt;

&lt;h5 id=&quot;writing-a-table-of-data-to-a-file&quot;&gt;Writing a table of data to a file&lt;/h5&gt;
&lt;p&gt;Now suppose you were to write the following list to an output file,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data = [[ 0.75, 0.29619813, -0.29619813, -0.75 ],
[ 0.29619813, 0.11697778, -0.11697778, -0.29619813],
[-0.29619813, -0.11697778, 0.11697778, 0.29619813],
[-0.75, -0.29619813, 0.29619813, 0.75 ]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One solution would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;outfile = open('table.out', 'w')
for row in data:
    for column in row:
        outfile.write( '{:14.8f}'.format(column) )
    outfile.write('\n')
outfile.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This code would result in the creation of an &lt;a href=&quot;http:/ECL2017S/lecture/8/table.out&quot; target=&quot;_blank&quot;&gt;output file&lt;/a&gt; named &lt;code&gt;table.out&lt;/code&gt; which contain the content of &lt;code&gt;data&lt;/code&gt; variable, in a nice formatted style as the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;    0.75000000    0.29619813   -0.29619813   -0.75000000
    0.29619813    0.11697778   -0.11697778   -0.29619813
   -0.29619813   -0.11697778    0.11697778    0.29619813
   -0.75000000   -0.29619813    0.29619813    0.75000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;error-handling-in-python&quot;&gt;Error handling in Python&lt;/h2&gt;
&lt;p&gt;A good code has to be able to handle exceptional situations that may occur during the code execution. These exceptions may occur during data input from either command line, terminal window, or an input file. They may also occur as a result of repeated operations on the input data, inside the code. For example, in &lt;a href=&quot;http:/ECL2017S/lecture/7-python-modules-loops-io#command-line-arguments&quot; target=&quot;_blank&quot;&gt;lecture 7&lt;/a&gt;, we explained a way of handling the wrong number of input command line arguments. This and similar measures to handle nicely the unexpected runtime errors is what’s called &lt;strong&gt;error and exception handling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A simple way of error handling is to write multiple if-blocks each of which handle a special exceptional situation. That is, to let the code execute some statements, and if something goes wrong, write the program in such a way that can detect this and jump to a set of statements that handle the erroneous situation as desired.&lt;/p&gt;

&lt;p&gt;A more modern and flexible way of handling such potential errors in Python is through the following Python construction,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;try:
    &amp;lt;Python statements&amp;gt;
except &amp;lt;error type&amp;gt;:
    &amp;lt;Python statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, if we were to rewrite the command line argument section in &lt;a href=&quot;http:/ECL2017S/lecture/7/cmd_find_primes.py&quot; target=&quot;_blank&quot;&gt;this code&lt;/a&gt; in &lt;a href=&quot;http:/ECL2017S/lecture/7-python-modules-loops-io#command-line-arguments&quot; target=&quot;_blank&quot;&gt;lecture 7&lt;/a&gt;, to handle exceptions that arise due to &lt;code&gt;ValueError&lt;/code&gt; (e.g., not an integer input), it would look something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        try:
            n = int(sys.argv[1])
            print('Here is a list of all prime numbers smaller than {}:'.format(n))
            get_primes(n)
        except ValueError:
            print('The input you entered is not an integer!\n Try again...')
            sys.exit(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The statement &lt;code&gt;sys.exit(1)&lt;/code&gt; aborts the program. The whole code can be found &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_modern.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Now if we run the &lt;a href=&quot;http:/ECL2017S/lecture/7/cmd_find_primes.py&quot; target=&quot;_blank&quot;&gt;original code&lt;/a&gt; with a non-integer input, we would get the following Python error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ../7/cmd_find_primes.py amir
Traceback (most recent call last):
  File &quot;../7/cmd_find_primes.py&quot;, line 34, in &amp;lt;module&amp;gt;
    n = int(sys.argv[1])
ValueError: invalid literal for int() with base 10: 'amir'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
whereas, if we run the &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_modern.py&quot; target=&quot;_blank&quot;&gt;newly written code&lt;/a&gt;, the non-integer error is noicely handled by outputting a gentle error message to the user and exiting the program gracefully.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cmd_find_primes_modern.py amir
The input you entered is not an integer!
 Try again...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The type of error occurring in the above example was &lt;code&gt;ValueError&lt;/code&gt;. There can be however, many other types of errors and exceptions. For this reason, Python has a &lt;a href=&quot;https://docs.python.org/2/library/exceptions.html&quot; target=&quot;_blank&quot;&gt;builtin list of exceptions&lt;/a&gt; that frequently occur in programming.&lt;/p&gt;

&lt;h3 id=&quot;the-raise-statement&quot;&gt;The &lt;em&gt;raise&lt;/em&gt; statement&lt;/h3&gt;
&lt;p&gt;Instead of the print statement in the above &lt;code&gt;except&lt;/code&gt; block, Python has a builtin function to handle the error together with an input message from the programmer. For example, the previous code, could be modified to the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        try:
            n = int(sys.argv[1])
            print('Here is a list of all prime numbers smaller than {}:'.format(n))
            get_primes(n)
        except ValueError:
            raise ValueError('The input you entered is not an integer!\n Try again...')
            sys.exit(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Executing the &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_raise.py&quot; target=&quot;_blank&quot;&gt;code&lt;/a&gt; with wrong input would give,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cmd_find_primes_raise.py amir
Traceback (most recent call last):
  File &quot;./cmd_find_primes_raise.py&quot;, line 35, in &amp;lt;module&amp;gt;
    n = int(sys.argv[1])
ValueError: invalid literal for int() with base 10: 'amir'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;./cmd_find_primes_raise.py&quot;, line 39, in &amp;lt;module&amp;gt;
    raise ValueError('The input you entered is not an integer!\n Try again...')
ValueError: The input you entered is not an integer!
 Try again...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A more elegant and cleaner way of handling and outputting the error would be use the following syntax, in &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_raise_as_err.py&quot; target=&quot;_blank&quot;&gt;this modified code&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        try:
            n = int(sys.argv[1])
            print('Here is a list of all prime numbers smaller than {}:'.format(n))
            get_primes(n)
        except ValueError as err:
            print(err)
            sys.exit(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
With the following output,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cmd_find_primes_raise_as_err.py amir
invalid literal for int() with base 10: 'amir'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In the statement &lt;code&gt;except ValueError as err:&lt;/code&gt; one could use &lt;code&gt;Exception&lt;/code&gt; for all types of errors instead of only &lt;code&gt;ValueError&lt;/code&gt; exceptions, or use a tuple syntax such as &lt;code&gt;except (ValueError, IndexError) as err:&lt;/code&gt; to cover these two exceptions.&lt;/p&gt;

&lt;h2 id=&quot;code-verification-and-unit-testing&quot;&gt;Code verification and unit testing&lt;/h2&gt;
&lt;p&gt;In the previous lecture we discussed the process of creating modules and collecting functions in one file as a personal module to be used later. As soon as the list of your codes and functions grow, you will need to have a unified way of ensuring all your functions work appropriately, regardless of the potential future internal changes that are made to the functions. This is what the &lt;strong&gt;unit testing&lt;/strong&gt; exists for. Unit testing is a software development process in which the smallest testable parts of an application, called &lt;strong&gt;units&lt;/strong&gt;, are individually and independently scrutinized for proper operation. Unit testing can be done manually, but if you have a long list of functions (which you most often have), you’d want to automate the testing process.&lt;/p&gt;

&lt;p&gt;The grand goal in unit testing is to reduce the risk of encountering potential problems when running the code in the smallest possible units of the code. This means,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ensuring the code has the &lt;strong&gt;correct behavior&lt;/strong&gt; when given the proper input data.&lt;/li&gt;
  &lt;li&gt;ensuring the &lt;strong&gt;code robustness&lt;/strong&gt; to exceptions and invalid input data, meaning that it does not crash when it reaches unexpected situations during the code execution and gracefully handles the error, without interruption.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because of the goals for which the unit tests are designed, they are mostly written and used by the developers of the code.&lt;/p&gt;

&lt;h3 id=&quot;unit-test-frameworks&quot;&gt;Unit test frameworks&lt;/h3&gt;
&lt;p&gt;There are many ways to write tests for codes. Now, if you asked each software developer to write a unit test for a specific software, each would likely come up with their own set of rules and tests of the software. You will end up with many tests, that will generally only be usable by the developer that wrote the tests. That is why you should select a unit test framework. A unit test framework provides consistency for how the unit tests for your project are written. There are many test frameworks to choose from for just about any language you want to program with, including Python. Just like programming language, almost every programmer has a strong opinion which test framework is the best. Research what’s out there and use the one that meets the needs of your organization (For example, there is one experienced Python programmer in our ECL class who does not like any of the existing unit tests for Python, and wants to write his own unit test as the project of this course!).&lt;/p&gt;

&lt;p&gt;The framework will provide a consistent testing structure to create maintainable tests with reproducible results. From a product quality and business point of view, those are the most valuable reasons to use a unit test framework. When you write a code, you should also think of a quick and simple way to develop and verify your logic in isolation. Once you make sure you have it working solidly by itself, then you can proceed to integrate it into the larger project solutions with great confidence.&lt;/p&gt;

&lt;p&gt;Python offers three unit testing frameworks,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;unittest&lt;/strong&gt;&lt;/a&gt; (Python’s standard unit testing framework)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nose.readthedocs.io/en/latest/index.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;nose&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.pytest.org/en/latest/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;pytest&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;which automate as much as possible the process of testing all of your codes, whenever required. The last, &lt;code&gt;pytest&lt;/code&gt; appears to be the most popular unit testing framework as of today.&lt;/p&gt;

&lt;h4 id=&quot;conventions-for-test-functions&quot;&gt;Conventions for test functions&lt;/h4&gt;
&lt;p&gt;The simplest way of using the testing frameworks (e.g., pytest or nose) is to write a set of test functions, scattered around in files, such that pytest or nose can automatically find and run all of these test functions. To achieve the goal, the test functions need to follow certain conventions:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The name of a test function starts with &lt;code&gt;test_&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A test function cannot take any arguments.&lt;/li&gt;
  &lt;li&gt;Any test must be formulated as a boolean condition.&lt;/li&gt;
  &lt;li&gt;An &lt;code&gt;AssertionError&lt;/code&gt; exception is raised if the boolean condition is &lt;code&gt;False&lt;/code&gt; (i.e., when the test fails).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;testing-function-accuracy&quot;&gt;Testing function accuracy&lt;/h4&gt;
&lt;p&gt;Suppose we have written the following function which runs the Newton’s method for solving an algebraic equation of the form $f(x)=0$, and we would like to write a test function that ensures its correct behavior.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def newton(f, dfdx, x, eps=1E-7):
    n = 0 # iteration counter
    while abs(f(x)) &amp;gt; eps:
        x = x - f(x)/dfdx(x)
        n += 1
    return x, f(x), n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Our goal is to write a function that tests the validity of the output of the function for a special case for which we know the results a priori. In the case of the above code, the function output is a not a fixed result, but an approximate float number $x_0$ which satisfies the condition $f(x_0)&amp;lt;\epsilon$ where $\epsilon$ is a prescribed number close to zero. Therefore, we have to first come up with a mathematical test input function to the function &lt;code&gt;newton&lt;/code&gt;, for which we have calculated the correct answer a priori, and we want to make sure if the above code gives the same answer. Since the output of the function &lt;code&gt;newton&lt;/code&gt; is a float that depends on the machine precision, we cannot expect the function to output the exact same result every time the code is run on any computer. Therefore, we have to define our test such that the function passes the test even if the result is not exactly what we expect, but still close enough to the correct answer. Here is an example test function for the above code using the &lt;code&gt;sin(x)&lt;/code&gt; function as the test input function to &lt;code&gt;newton()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def test_newton_sin():
    
    from math import sin, cos, pi

    def f(x):
        return sin(x)
    
    def dfdx(x):
        return cos(x)
    
    x_ref = 0.000769691024206
    f_x_ref = 0.000769690948209
    n_ref = 3
    x, f_x, n = newton(f, dfdx, x=-pi/3, eps=1E-2)
    tol = 1E-15 # tolerance for comparing real numbers
    assert abs(x_ref - x) &amp;lt; tol , &quot;The test for the value of x_0 failed&quot; # is x correct?
    assert abs(f_x_ref - f_x) &amp;lt; tol , &quot;The test for the function value failed&quot; # is f_x correct?
    assert n == 3 , &quot;The test for the number of iterations failed&quot; # is f_x correct? # is n correct?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that in the above test function, the function name begins with &lt;code&gt;test_&lt;/code&gt;, takes no arguments, and raises an &lt;code&gt;assertionError&lt;/code&gt; at the end. Now if you run the test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;test_newton_sin()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
you will notice that the function passed the test. However, if in the above test, we set &lt;code&gt;eps=1E-10&lt;/code&gt;, and run the test again, you will get an assertion error like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&amp;lt;ipython-input-20-8be9faac8d8e&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 test_newton_sin()

&amp;lt;ipython-input-18-263651ba410f&amp;gt; in test_newton_sin()
     14     x, f_x, n = newton(f, dfdx, x=-pi/3, eps=1E-10)
     15     tol = 1E-15 # tolerance for comparing real numbers
---&amp;gt; 16     assert abs(x_ref - x) &amp;lt; tol , &quot;The test for the value of x_0 failed&quot; # is x correct?
     17     assert abs(f_x_ref - f_x) &amp;lt; tol , &quot;The test for the function value failed&quot; # is f_x correct?
     18     assert n == 3 , &quot;The test for the number of iterations failed&quot; # is f_x correct? # is n correct?

AssertionError: The test for the value of x_0 failed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One could also write exact tests for the function &lt;code&gt;newton&lt;/code&gt; which test for an exact result which is known a priori, for example a mathematical linear input function to &lt;code&gt;newton&lt;/code&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;testing-function-robustness&quot;&gt;Testing function robustness&lt;/h4&gt;
&lt;p&gt;The above &lt;code&gt;newton&lt;/code&gt; function is very basic and suffers from several problems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;for divergent iterations it will iterate forever,&lt;/li&gt;
  &lt;li&gt;it can divide by zero in f(x)/dfdx(x),&lt;/li&gt;
  &lt;li&gt;it can perform integer division in f(x)/dfdx(x),&lt;/li&gt;
  &lt;li&gt;it does not test whether the arguments have acceptable types and values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A more robust implementation dealing with these potential problems would look like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def Newton(f, dfdx, x, eps=1E-7, maxit=100):
    if not callable(f): raise TypeError( 'f is %s, should be function or class with __call__' % type(f) )
    if not callable(dfdx): raise TypeError( 'dfdx is %s, should be function or class with __call__' % type(dfdx) )
    if not isinstance(maxit, int): raise TypeError( 'maxit is %s, must be int' % type(maxit) )
    if maxit &amp;lt;= 0: raise ValueError( 'maxit=%d &amp;lt;= 0, must be &amp;gt; 0' % maxit )
    n = 0 # iteration counter
    while abs(f(x)) &amp;gt; eps and n &amp;lt; maxit:
        try:
            x = x - f(x)/float(dfdx(x))
        except ZeroDivisionError:
            raise ZeroDivisionError( 'dfdx(%g)=%g - cannot divide by zero' % (x, dfdx(x)) )
        n += 1
    return x, f(x), n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, for this more robust code (than the earlier version: &lt;code&gt;newton&lt;/code&gt;), we have to also write a set of tests, examining the robustness of the code, subject to potential exceptions. For example, one can write a test function that examines the behavior of &lt;code&gt;Newton&lt;/code&gt; subject to an input mathematical function that is known to lead to divergent (infinite) iterations, if the initial starting point $x$ is not sufficiently close to the root of the function. One such example is $f(x)=tanh(x)$, for which a starting search value of $x=20$ would lead to infinite iterations in the Newton’s method. So we can set &lt;code&gt;maxit=12&lt;/code&gt; in our robust &lt;code&gt;Newton&lt;/code&gt; code, and test that the actual number of iterations reaches this limit. Given our prior knowledge for this function, that the value of $x$ will also diverge after 12 iterations, we could also add a test for the value of $x$, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def test_Newton_divergence():
    from math import tanh
    f = tanh
    dfdx = lambda x: 10./(1 + x**2)
    
    x, f_x, n = Newton(f, dfdx, 20, eps=1E-4, maxit=12)
    assert n == 12
    assert x &amp;gt; 1E+50
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;test_Newton_divergence()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The example given here, only tests for the robustness of &lt;code&gt;Newton()&lt;/code&gt; in handling divergent situations. For other potential problems, one has to write other test functions, some which will be given as exercise.&lt;/p&gt;

&lt;h3 id=&quot;summary-unit-testing&quot;&gt;Summary: unit testing&lt;/h3&gt;
&lt;p&gt;Unit testing is a component of &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot; target=&quot;_blank&quot;&gt;test-driven development (TDD)&lt;/a&gt;, a pragmatic methodology that takes a meticulous approach to building a product by means of &lt;em&gt;continual testing and revision&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Unit testing has a steep learning curve. The development team needs to learn what unit testing is, how to unit test, what to unit test and how to use automated software tools to facilitate the process on an on-going basis.  The great benefit to unit testing is that the earlier a problem is identified, the fewer compound errors occur. A compound error is one that doesn’t seem to break anything at first, but eventually conflicts with something down the line and results in a problem.&lt;/p&gt;

&lt;p&gt;There is a lot more to unit testing and the existing Python frameworks for it than we discussed here. However, covering all those topics would require a dedicated course for unit testing, which is certainly beyond the capacity of this course. But if you are interested to know more, I recommend you to refer to one of the three unit testing frameworks mentioned &lt;a href=&quot;#unit-test-frameworks&quot;&gt;above&lt;/a&gt;. There are also books already written on this topic an example of which is available &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000000754/pr01.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing&quot;&gt;Lecture 8: Python - I/O, error handling, and testing frameworks&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 7: Python - modules, loops, and I/O]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/7-python-modules-loops-io"/>
  <id>http:/ECL2017S/lecture/7-python-modules-loops-io</id>
  <published>2017-03-29T00:00:00-05:00</published>
  <updated>2017-03-29T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains modules, loops, with a brief introduction to Input/Output processes in Python. Ideally, modules should have been part of the previous lecture (with Python functions). The split was however necessary to reduce the size of lecture 6 to a managable size.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;python-modules&quot;&gt;Python modules&lt;/h2&gt;
&lt;p&gt;We have already used Python modules extensively in the past lectures, homework, and quizzes. although we never discussed them. To put it simply, Python modules are a collection of Python definitions, variables, functions, … that can be reused as a library in future.&lt;/p&gt;

&lt;p&gt;Sometimes you want to reuse a function from an old program in a new program. The simplest way to do this is to copy and paste the old source code into the new program. However, this is not good programming practice, because you then over
time end up with multiple identical versions of the same function. When you want to improve the function or correct a bug, you need to remember to do the same update in all files with a copy of the function, and in real life most programmers fail to do so. You easily end up with a mess of different versions with different quality of basically the same code. Therefore, a golden rule of programming is to have one and only one version of a piece of code. All programs that want to use this piece of code must access one and only one place where the source code is kept. This principle is easy to implement if we create a module containing the code we want to reuse later in different programs.&lt;/p&gt;

&lt;h3 id=&quot;the-import-statement&quot;&gt;The import statement&lt;/h3&gt;
&lt;p&gt;We have already used the &lt;code&gt;math&lt;/code&gt; module on multiple occasions, using the &lt;code&gt;import&lt;/code&gt; statement. Here is an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: import math

In [12]: value = math.factorial(5)

In [13]: print(value)
120

In [14]: math.pi
Out[14]: 3.141592653589793

In [15]: math.e
Out[15]: 2.718281828459045
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In its simplest form, the import has the following syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import module1[, module2[,... moduleN]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
like,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import math, cmath, numpy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The standard approach for calling the names and definitions (variables, functions, …) inside the module is using the module-name prefix, like the above examples. To call the module names without the prefix, use the following module import statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: from math import *

In [17]: factorial(5)
Out[17]: 120
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To import only specific names, use the format like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import pi,e,factorial,erf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This will import the four math modules names &lt;code&gt;pi,e,factorial,erf&lt;/code&gt;. You could also change the name of the input module, or specific names from it, upon importing the module into your code, using &lt;code&gt;import as&lt;/code&gt; statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: import numpy as np

In [17]: np.double(5)
Out[17]: 5.0

In [20]: from numpy import double as dble

In [21]: dble(13)
Out[21]: 13.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
    A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed &lt;b&gt;only the first time the module name is encountered in an import statement&lt;/b&gt;. &lt;br /&gt;&lt;br /&gt;
    Also, note that in general the practice of &lt;code&gt;from mod_name import *&lt;/code&gt; from a module is discouraged, since it often causes poorly readable code. It is however very useful for saving time and exra typing in interactive sessions like IPython, or Jupyter.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;listing-all-names-in-an-imported-module&quot;&gt;Listing all names in an imported module&lt;/h3&gt;
&lt;p&gt;To get a list of all available names in an imported module, use &lt;code&gt;dir()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: import math

In [13]: dir(math)
Out[13]:
['__doc__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'acos',
 'acosh',
 'asin',
 'asinh',
 'atan',
 'atan2',
 'atanh',
 'ceil',
 'copysign',
 'cos',
 'cosh',
 'degrees',
 'e',
 'erf',
 'erfc',
 'exp',
 'expm1',
 'fabs',
 'factorial',
 'floor',
 'fmod',
 'frexp',
 'fsum',
 'gamma',
 'gcd',
 'hypot',
 'inf',
 'isclose',
 'isfinite',
 'isinf',
 'isnan',
 'ldexp',
 'lgamma',
 'log',
 'log10',
 'log1p',
 'log2',
 'modf',
 'nan',
 'pi',
 'pow',
 'radians',
 'sin',
 'sinh',
 'sqrt',
 'tan',
 'tanh',
 'trunc']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;python-standard-modules&quot;&gt;Python standard Modules&lt;/h3&gt;
&lt;p&gt;Python comes with a set of standard modules as its library, the so-called &lt;a href=&quot;https://docs.python.org/3/library/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Python Standard Library&lt;/strong&gt;&lt;/a&gt;. Some of these modules are built into the Python interpreter; these provide access to operations that are not part of the core of the language but are nevertheless built in, for efficiency and other reasons.&lt;/p&gt;

&lt;h3 id=&quot;creating-modules&quot;&gt;Creating modules&lt;/h3&gt;

&lt;p&gt;To make a Python module, simply collect all the functions that constitute the module in one single file with a given filename, for example, &lt;code&gt;mymodule.py&lt;/code&gt;. This file will be automatically a module, with name &lt;code&gt;mymodule&lt;/code&gt;, from which you can import functions and definitions in the standard way described above.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Why and when do you need to create a module?&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Sometimes you want to reuse a function from an old program in a new program. The simplest way to do this is to copy and paste the old source code into the new program. However, this is not good programming practice, because you then over time end up with multiple identical versions of the same function. When you want to improve the function or correct a bug, you need to remember to do the same update in all files with a copy of the function, and in real life most programmers fail to do so. You easily end up with a mess of different versions with different quality of basically the same code. Therefore, a golden rule of programming is to have one and only one version of a piece of code. All programs that want to use this piece of code must access one and only one place where the source code is kept. This principle is easy to implement if we create a module containing the code we want to reuse later in different programs.
&lt;/blockquote&gt;

&lt;p&gt;Note that modules can import other modules. It is customary but not required to place all import statements at the beginning of a module (or script, for that matter). The imported module names are placed in the importing module’s global &lt;a href=&quot;https://en.wikipedia.org/wiki/Symbol_table&quot; target=&quot;_blank&quot;&gt;symbol table&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;executing-modules-as-scripts&quot;&gt;Executing modules as scripts&lt;/h4&gt;

&lt;p&gt;When a Python module is called from the Bash command prompt like,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python mycode.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the code in the module will be executed, just as if you imported it inside another code. This is good, but can sometimnes become problematic. Let’s explain this with an example from the midterm exam, a &lt;a href=&quot;http:/ECL2017S/lecture/7/find_primes.py&quot; target=&quot;_blank&quot;&gt;script&lt;/a&gt; that finds and reports all prime numbers smaller than a given input number $n$.&lt;/p&gt;

&lt;p&gt;When you execute this code as astandalone Python script, it will ask you for an integer, to give you all integers that are smaller than the input number. Now suppose you wanted to import this script as a Python module into your code. If you do so, the Python interpreter would run all statements in this script and asks you to input an integer, before importing the rest of the functions in this script.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [5]: import find_primes
Enter an integer number:
n = 13

 Here is a list of all prime numbers smaller than 13:
13
11
7
5
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This may not be necessarily what we want to do. For example, we may only want to use the functions &lt;code&gt;get_primes&lt;/code&gt; and &lt;code&gt;is_prime&lt;/code&gt; in this script, without asking the user to input an integer and finding all smaller primes. The solution is to put the part of the code in the script that we don’t want to be executed as module, that is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('Enter an integer number: ')
n = int(input('n = '))
print('\n Here is a list of all prime numbers smaller than {}:'.format(n))
get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
inside the following if-block,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    print('Enter an integer number: ')
    n = int(input('n = '))
    print('Here is a list of all prime numbers smaller than {}:'.format(n))
    get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
When the code is run as a standalone script, the &lt;code&gt;__name__&lt;/code&gt; property of the code is set to &lt;code&gt;__main__&lt;/code&gt;. However, when the script is imported as a module inside another code, the &lt;code&gt;__name__&lt;/code&gt; property is automatically set to the name of the module &lt;code&gt;find_primes&lt;/code&gt;. Thus as a module, the above if-block will not be executed, but the rest of the code (the two functions) will be properly imported. The corrected script is named &lt;code&gt;mod_find_primes.py&lt;/code&gt; and can be downloaded from &lt;a href=&quot;http:/ECL2017S/lecture/7/mod_find_primes.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;In [6]: import mod_find_primes
In [7]: mod_find_primes.__name__
Out[7]: 'mod_find_primes'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You could also import specific names or funcitons from your own module, for example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;In [11]: from mod_find_primes import is_prime
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In summary,&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Add test blocks in your modules&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    It is recommended to only have functions and not any statements outside functions in a module. The reason is that the module file is executed from top to bottom during the import. With function definitions only in the module file, and no main program, there will be no calculations or output from the import, just definitions of functions. But in case you need to write a module that can be run standalone, then put all script statements for the standalone part of the module inside a &lt;b&gt;test block&lt;/b&gt; (the if-block described above).
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;command-line-arguments&quot;&gt;Command line arguments&lt;/h4&gt;

&lt;p&gt;Test blocks are especially useful when your module can be also run as a standalone Python script that takes in &lt;strong&gt;command-line arguments&lt;/strong&gt;. &lt;a href=&quot;http:/ECL2017S/lecture/7/cmd_find_primes.py&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is a modified version of the &lt;code&gt;mod_find_primes&lt;/code&gt; module now named &lt;code&gt;cmd_find_primes&lt;/code&gt; that instead of using &lt;code&gt;input()&lt;/code&gt; function, reads the integer number from the Bash command line. To do so, you need to modify the last part of the original module to the following, using Python’s standard &lt;code&gt;sys&lt;/code&gt; module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        n = int(sys.argv[1])
        print('Here is a list of all prime numbers smaller than {}:'.format(n))
        get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now if you run this code, from the Bash command line, or inside IPython, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [14]: run cmd_find_primes.py

    Error: Exactly two arguments must be given on the command line.
    Usage:
      cmd_find_primes.py &amp;lt;a positive integer number&amp;gt;

An exception has occurred, use %tb to see the full traceback.

SystemExit:      Program stopped.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The code will expect you to enter an integer right after the nbame of the script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [15]: run cmd_find_primes.py 13
Here is a list of all prime numbers smaller than 13:
13
11
7
5
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In general, I recommend you to use the &lt;code&gt;sys&lt;/code&gt; module for input arguments instead of Python’s &lt;code&gt;input()&lt;/code&gt; function.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Modules and main functions&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    If you have some functions and a main program in some program file, just move the main program to the test block. Then the file can act as a module, giving access to all the functions in other files, or the file can be executed from the command line, in the same way as the original program.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;test-blocks-for-module-code-verification&quot;&gt;Test blocks for module code verification&lt;/h4&gt;

&lt;p&gt;It is a good programming habit to let the test block do one or more of three things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;provide information on how the module or program is used,&lt;/li&gt;
  &lt;li&gt;test if the module functions work properly,&lt;/li&gt;
  &lt;li&gt;offer interaction with users such that the module file can be applied as a useful program.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To achieve the second task, we have to write functions that verify the implementation in a module. The general advice is to write test functions that,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;have names starting with &lt;code&gt;test_&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;express the success or failure of a test through a boolean variable, say &lt;code&gt;success&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;run &lt;code&gt;assert success, msg&lt;/code&gt; to raise an &lt;code&gt;AssertionError&lt;/code&gt; with an optional message &lt;code&gt;msg&lt;/code&gt; in case the test fails.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We talk about this later on in this course.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Doc-strings in modules&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    It is a good habit to include a doc-string in the beginning of your module file. This doc string should explain the purpose and use of the module.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;scope-of-definitions-in-your-module&quot;&gt;Scope of definitions in your module&lt;/h4&gt;

&lt;p&gt;Once you have created your module, you can import it just like any other module into our program, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [22]: import cmd_find_primes

In [23]: dir(cmd_find_primes)
Out[23]:
['__builtins__',
 '__cached__',
 '__doc__',
 '__file__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'get_primes',
 'is_prime']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, more often than not, you may want to have variables in your module, that are only to be used inside the module and not be accessed by the user. The convention is to start the names of these variables by an underscore. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;_course = &quot;Python programming&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This however, does not prevent the import of the variable &lt;code&gt;_course&lt;/code&gt; into your code from your the &lt;a href=&quot;http:/ECL2017S/lecture/7/mod_cmd_find_primes_del.py&quot; target=&quot;_blank&quot;&gt;module&lt;/a&gt; containing it. One solution is to delete the variables that we are not interested the user to have access to, at the end of the module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;del _course
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
such that the &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;module&lt;/a&gt; containing the above statement will give,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [28]: import mod_cmd_find_primes_del

In [29]: dir( mod_cmd_find_primes_del )
Out[29]:
['__builtins__',
 '__cached__',
 '__doc__',
 '__file__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'get_primes',
 'is_prime']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;However, note that if you import all definitions in &lt;a href=&quot;http:/ECL2017S/lecture/7/mod_cmd_find_primes_all.py&quot; target=&quot;_blank&quot;&gt;your module&lt;/a&gt; as standalone definitions like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [4]: from mod_cmd_find_primes_all import *

In [5]: dir()
Out[5]:
['In',
 'Out',
 '_',
 '_3',
 '__',
 '___',
 '__builtin__',
 '__builtins__',
 '__doc__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 '_dh',
 '_i',
 '_i1',
 '_i2',
 '_i3',
 '_i4',
 '_i5',
 '_ih',
 '_ii',
 '_iii',
 '_oh',
 '_sh',
 'exit',
 'get_ipython',
 'get_primes',
 'is_prime',
 'quit']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
you see that the variable &lt;code&gt;_course&lt;/code&gt; is not imported. In general, to avoid confusion, it is best to define an &lt;code&gt;__all__&lt;/code&gt; variable in your module, which contains a list of all variable and function names that are to be imported as standalone definitions using &lt;code&gt;from mymodule import *&lt;/code&gt;. For example, add the following to the above module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;__all__ = ['get_primes']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Upong importing this module, now only the function &lt;code&gt;get_prime&lt;/code&gt; will be imported and not &lt;code&gt;_course&lt;/code&gt; or &lt;code&gt;is_prime&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-path-to-your-modules&quot;&gt;The path to your modules&lt;/h4&gt;
&lt;p&gt;When you create a module, if it is in the current directory of your code, then it will be automatcally found by the Python interpreter. This is however, not generally the case if your module lives in another directory than the current working directory of Python interpreter. To add the module’s directory to the path of your Python interpreter, use the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [5]: myModuleFolder = ’the path to your module’

In [6]: import sys

In [7]: sys.path
Out[7]:
['',
 'C:\\Program Files\\Anaconda3\\Scripts',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\lmfit-0.9.5_44_gb2041c3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\python35.zip',
 'C:\\Program Files\\Anaconda3\\DLLs',
 'C:\\Program Files\\Anaconda3\\lib',
 'C:\\Program Files\\Anaconda3',
 'c:\\program files\\anaconda3\\lib\\site-packages\\setuptools-20.3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Sphinx-1.3.5-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32\\lib',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Pythonwin',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\IPython\\extensions',
 'C:\\Users\\Amir\\.ipython']

In [8]: sys.path.insert(0,myModuleFolder)

In [9]: sys.path
Out[9]:
[’the path to your module’,
 '',
 'C:\\Program Files\\Anaconda3\\Scripts',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\lmfit-0.9.5_44_gb2041c3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\python35.zip',
 'C:\\Program Files\\Anaconda3\\DLLs',
 'C:\\Program Files\\Anaconda3\\lib',
 'C:\\Program Files\\Anaconda3',
 'c:\\program files\\anaconda3\\lib\\site-packages\\setuptools-20.3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Sphinx-1.3.5-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32\\lib',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Pythonwin',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\IPython\\extensions',
 'C:\\Users\\Amir\\.ipython']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In the above, we added the path to our module to the list of all paths the Python interpreter will search, in order to find the module requested to be imported (Note that &lt;code&gt;’the path to your module’&lt;/code&gt; is not a real system path, this was just an example).&lt;/p&gt;

&lt;h3 id=&quot;the-collections-module&quot;&gt;The &lt;strong&gt;collections&lt;/strong&gt; module&lt;/h3&gt;

&lt;p&gt;One of the greatest strengths of Python as a scientific programming language is that, for almost everything that you could imagine and want to write a code, someone has already written a code, and so there is &lt;em&gt;no reason to reinvent the wheel if someone has already done it for you&lt;/em&gt;. Throughout your career you will get to know many of the most important modules for your own domain of science. Here I will introduce only a general module, that has some interesting and rather useful functions in it. Specifically, this module contains some new non-standard Python data types that can be very handy at times.&lt;/p&gt;

&lt;h4 id=&quot;the-counter-data-type&quot;&gt;The &lt;strong&gt;Counter&lt;/strong&gt; data type&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Counter&lt;/code&gt; function from module &lt;code&gt;collections&lt;/code&gt; takes in a list and creates a dictionary, whose keys are unique elements in the input list and the values of the keys, are the number of times each key appears in the list. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from collections import Counter
mylist = [1,1,1,2,3,34,45,34,34,7,8,34,3,3,6,4,4,4,0,34,9,0]
c = Counter(mylist)
c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Counter({0: 2, 1: 3, 2: 1, 3: 3, 4: 3, 6: 1, 7: 1, 8: 1, 9: 1, 34: 5, 45: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are basically three methods for generating a Counter dictionary,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;c1 = Counter(['a', 'b', 'c', 'a', 'b', 'b']) # input a list directly into Counter
c2 = Counter({'a':2, 'b':3, 'c':1}) # Give it the Counter dictionary
c3 = Counter(a=2, b=3, c=1) # or simply give it the counts
c1 == c2 == c3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;what-is-counter-useful-for&quot;&gt;What is Counter useful for?&lt;/h5&gt;

&lt;p&gt;Suppose you have a long list of letters, and for some reason you need to count the number of times each letter appears in your string. You can achieve your goal as in the following example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;s = 'amirshahmoradijakelucerotravismike'
c = Counter(s)
for key in c.keys():
    print('The letter {} appears only {} times in the string'.format(key,c[key]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The letter v appears only 1 times in the string
The letter a appears only 5 times in the string
The letter u appears only 1 times in the string
The letter l appears only 1 times in the string
The letter j appears only 1 times in the string
The letter d appears only 1 times in the string
The letter h appears only 2 times in the string
The letter o appears only 2 times in the string
The letter i appears only 4 times in the string
The letter k appears only 2 times in the string
The letter c appears only 1 times in the string
The letter t appears only 1 times in the string
The letter s appears only 2 times in the string
The letter m appears only 3 times in the string
The letter r appears only 4 times in the string
The letter e appears only 3 times in the string   ​
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now suppose you wanted to cound the number of times different words appear in a given text,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;text = &quot;Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. &quot;
c = Counter(text.split())
for word in c.keys():
    print('The word &quot;{}&quot; appears only {} times in the text'.format(word,c[word]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The word &quot;Computation&quot; appears only 1 times in the text
The word &quot;a&quot; appears only 1 times in the text
The word &quot;Engineering&quot; appears only 3 times in the text
The word &quot;the&quot; appears only 2 times in the text
The word &quot;(COE111L)&quot; appears only 1 times in the text
The word &quot;offered&quot; appears only 1 times in the text
The word &quot;is&quot; appears only 2 times in the text
The word &quot;at&quot; appears only 2 times in the text
The word &quot;of&quot; appears only 2 times in the text
The word &quot;Lab&quot; appears only 1 times in the text
The word &quot;course&quot; appears only 1 times in the text
The word &quot;department&quot; appears only 1 times in the text
The word &quot;by&quot; appears only 1 times in the text
The word &quot;and&quot; appears only 1 times in the text
The word &quot;Texas&quot; appears only 1 times in the text
The word &quot;Mechanics&quot; appears only 1 times in the text
The word &quot;2017.&quot; appears only 1 times in the text
The word &quot;new&quot; appears only 1 times in the text
The word &quot;University&quot; appears only 1 times in the text
The word &quot;starting&quot; appears only 1 times in the text
The word &quot;Austin,&quot; appears only 1 times in the text
The word &quot;that&quot; appears only 1 times in the text
The word &quot;Spring&quot; appears only 1 times in the text
The word &quot;Aerospace&quot; appears only 1 times in the text  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you can also apply all different methods that exists for Counter data types on the variable &lt;code&gt;c&lt;/code&gt; in the above case. For example, you could ask for the 3 most common words in in the text,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;c.most_common(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[('Engineering', 3), ('the', 2), ('is', 2)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;the-ordereddict-data-type&quot;&gt;The &lt;strong&gt;OrderedDict&lt;/strong&gt; data type&lt;/h4&gt;
&lt;p&gt;This is also a subclass of dictionary data type, which provides all the methods provided by &lt;code&gt;dict&lt;/code&gt;, but which also retains the order by which elements are added to the dictionary,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, you can define a &lt;code&gt;defaultdict&lt;/code&gt; dictionary which will assign a default value to all keys that do not exist, and automatically adds them to the dictionary. A normal dictionary does not conserve the order by which elements were added to the dictionary,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;d = {5:5,3:3,6:6,1:1}
for i,j in d.items():
    print(i,j)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
    1 1
    3 3
    5 5
    6 6&lt;/p&gt;

&lt;p&gt;To get save order of the elements, you can use &lt;code&gt;OrderedDict&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from collections import OrderedDict as od
d = od([(5,5),(3,3),(6,6),(1,1)])
for i,j in d.items():
    print(i,j)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5 5
3 3
6 6
1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
Keep in mind that, two order dictionary with the same content may not be necessarily equal, since the order of their content also matters.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-timeit-module&quot;&gt;The timeit module&lt;/h3&gt;
&lt;p&gt;This is a module that provides some useful functions for timing the performance and speed of peices of your Python code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import timeit as tt
tt.timeit( &quot;-&quot;.join(str(n) for n in range(100)) , number=10000 )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.03779717059364884
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first input to &lt;code&gt;timeit&lt;/code&gt; function above is the operation which we would like to time, and the second input, tell the function, how many times repeat the task (If the operation takes a tiny amount, you would want to repeat it many many times, in order to get a sensible timing output). Here is the same operation as above, but now using the &lt;a href=&quot;http://book.pythontips.com/en/latest/map_filter.html#map&quot; target=&quot;_blank&quot;&gt;map&lt;/a&gt; function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;tt.timeit( &quot;-&quot;.join( map(str,range(1000))) , number=10000 )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.384857713242468  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In IPython or Jupyter, you can do the timing operation in a smarter way using IPython magic function &lt;a href=&quot;https://ipython.org/ipython-doc/dev/interactive/magics.html#magic-timeit&quot; target=&quot;_blank&quot;&gt;%timeit&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit &quot;-&quot;.join(str(n) for n in range(100))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10000 loops, best of 3: 36.6 µs per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The IPython’s magic function automatically figures how many times it should run the operation to get a sensible timing of the operation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit &quot;-&quot;.join( map(str,range(100)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10000 loops, best of 3: 21 µs per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, as you noticed in the above example, the function &lt;code&gt;map&lt;/code&gt; performs much better and faster than Python’s for-loop.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-time-module&quot;&gt;The time module&lt;/h3&gt;
&lt;p&gt;More generally, if you want to measure the CPU time spent on a specific part of your code, you can use the &lt;code&gt;clock()&lt;/code&gt; method from &lt;code&gt;time&lt;/code&gt; module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import time
# do some work
t0 = time.clock()   # get the initial CPU time
# do some further work wqhich you want to time
t1 = time.clock()   # get the final CPU time
cpu_time = t1 - t0  # This is the time spent on the task being timed.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;time.clock()&lt;/code&gt; function returns the CPU time spent in the program since its start. If the interest is in the total time, also including reading and writing files, &lt;code&gt;time.time()&lt;/code&gt; is the appropriate function to call. Now suppose you had a list of functions that performed the same task, but using different methods, and you wanted to time their performance. Since in Python, functions are ordinary objects, making a list of functions is no more special than making a list of strings or numbers. You can therefore, create a list of function names and call them one by one, inside a loop, and time each one repectively.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import time
functions = [func1, func2, func3, func4,func5, func6, func7, func8,func9, func10]
timings = [] # timings[i] holds CPU time for functions[i]
for function in functions:
    t0 = time.clock()
    function(&amp;lt;input variables&amp;gt;)
    t1 = time.clock()
    cpu_time = t1 - t0
    timings.append(cpu_time)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;loops-in-python&quot;&gt;Loops in Python&lt;/h2&gt;

&lt;p&gt;We have already seen, both in homework and midterm, what a pain it can be if you wanted to repeat a certain number of tasks using recursive functions and if-blocks. Fortunately, Python has loop statements that can highly simplify the task of repeating certain statements for a certain number of times.&lt;/p&gt;

&lt;h3 id=&quot;while-loop&quot;&gt;While loop&lt;/h3&gt;

&lt;p&gt;One such statement is the while-loop:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;while this_logical_statement_holds_true : 
    perform_statements
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, here is a code that prints all positive integers smaller than a given input integer,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
while n &amp;gt; 1:
    n -= 1
    print(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another useful way of writing while-loops is the following (using the example above),&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
while True:
    n -= 1
    print(n)
    if n == 1: break
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the loop will continue forever, unless the condition &lt;code&gt;n==1&lt;/code&gt; is met at some point during the iteration.&lt;/p&gt;

&lt;h3 id=&quot;for-loop&quot;&gt;For loop&lt;/h3&gt;

&lt;p&gt;If you are from a Fortran, C, C++ background you maybe already accustomed to counting loops than while loops. Pyhon does not have a direct method for counting loops, however, there is a for-loop syntax that loops over the elements of a list or tuple. For example, if we wanted to rewrite the above code using for-loop, one solution would be like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
my_range = range(n-1,0,-1)
for n in my_range:
    print(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the Python’s builtin function &lt;code&gt;range([start,] stop [, step])&lt;/code&gt; creates a list of integer that starts from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; &lt;em&gt;but not including &lt;code&gt;end&lt;/code&gt;&lt;/em&gt;, with a distance of size &lt;code&gt;step&lt;/code&gt; between the elements. Here is another way of doing the same thing as in the above example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
mylist = list(range(n-1,0,-1))
for n in mylist:
    print(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how I have used the &lt;code&gt;range&lt;/code&gt; function in order to get the same output as in the previous example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
mylist = list(range(n-1,0,-1))
print(mylist)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7  
[6, 5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;for-loop-with-list-indices&quot;&gt;​For-loop with list indices&lt;/h4&gt;

&lt;p&gt;Instead of iterating over over a list directly, as illustrated above, one could iterate over the indices of a list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = ['amir','jake','lecero','mike','travis']
for i in range(len(mylist)):
    print(mylist[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;amir
jake
lecero
mike
travis
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    Iterating over list indices, instead of list elements, is particularly udseful, when you have to work with multiple lists in a for-loop.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;manipulating-lists-using-for-loop&quot;&gt;Manipulating lists using for-loop&lt;/h4&gt;

&lt;p&gt;Note that when you want to change the elements of a list in a for-loop, you have to change the list itself, and not simply the for-loop variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mydigits = [1,3,5,7,9]
for i in mydigits:
    i -= 1
mydigits
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code won’t change the values in the list, instead only the for-loop variable. If you want to change the list itself, you have to operate on the list elements directly,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mydigits = [1,3,5,7,9]
for i in rnage(len(mydigits)):
    mydigits[i] -= 1
mydigits
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 2, 4, 6, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;list-comprehension&quot;&gt;List comprehension&lt;/h4&gt;

&lt;p&gt;Frequently in Python programming you may need to create long lists of regurlarly ordered item. As a result, Python has a special concise syntax for such tasks, called &lt;strong&gt;list comprehension&lt;/strong&gt; which uses for-loop. For example, supopse you have a list of odd digits as in the example above, and you want to create a list of even digits from it. You could achieve this using the following simple syntax,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;odd_digits = [1,3,5,7,9]
even_digits = [i-1 for i in odd_digits]
even_digits
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 2, 4, 6, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;simultaneous-looping-over-multiple-lists&quot;&gt;Simultaneous looping over multiple lists&lt;/h4&gt;

&lt;p&gt;Suppose you have two or more lists of the same length over the elements of which you want to perform a specific set of tasks simultaneously. To do so, it suffices to create a &lt;strong&gt;list of tuples&lt;/strong&gt; using Python’s builtin function &lt;code&gt;zip&lt;/code&gt; and loop over the tuple elements of this list. For example, let’s assume that you wanted to create a list of the addition of individual elements in the above two lists: &lt;code&gt;odd_digits&lt;/code&gt; and &lt;code&gt;even_digits&lt;/code&gt;. One way to do it would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;sum_even_odd = []
for i,j in zip(odd_digits,even_digits):
    sum_even_odd.append(i+j) 
sum_even_odd
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 5, 9, 13, 17]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/7-python-modules-loops-io&quot;&gt;Lecture 7: Python - modules, loops, and I/O&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on March 29, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 6: Python - branching and functions]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/6-python-branching-functions"/>
  <id>http:/ECL2017S/lecture/6-python-branching-functions</id>
  <published>2017-03-08T00:00:00-06:00</published>
  <updated>2017-03-08T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains branching statements, how to define functions in Python, and all other important details of functions in Python.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;branching-in-python&quot;&gt;Branching in Python&lt;/h2&gt;
&lt;p&gt;Consider the last problem in &lt;a href=&quot;http:/ECL2017S/homework/4-problems-python-variables-assignment-statements&quot; target=&quot;_blank&quot;&gt;homework 4&lt;/a&gt;, where we defined a dictionary of people names and their roles in our ECL class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;ecl_dict = { 'nicholas boeker'  : 'student'
           , 'bradley bridges'  : 'student'
           , 'sagar dhana'      : 'student' 
           , 'travis driver'    : 'student'
           , 'eric gagliano'    : 'student'
           , 'christian garcia' : 'student'
           , 'matthew goree'    : 'student'
           , 'lucero herrera'   : 'student'
           , 'jake janssen'     : 'student'
           , 'michael langford' : 'student'
           , 'colin lewis'      : 'student'
           , 'mark loveland'    : 'student'
           , 'emilio mendiola'  : 'student'
           , 'kreshel nguyen'   : 'student'
           , 'russell philley'  : 'student'
           , 'caleb phillips'   : 'student'
           , 'joseph robbins'   : 'student'
           , 'bradley smith'    : 'student'
           , 'vivek varier'     : 'assistant'
           , 'amir shahmoradi'  : 'instructor'
           }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose we would like to write a Python script that, when executed, asks the user to input the full name of a person in our class and then outputs on screen, the role of the person in class. To do this, first we should get familiar with Python’s built-in function &lt;code&gt;input()&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;ATTENTION: Python 2 Alert!&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
In Python 2, the corresponding function is &lt;code&gt;raw_input()&lt;/code&gt;. In Python 3, it is now renamed to &lt;code&gt;input()&lt;/code&gt;.
&lt;/blockquote&gt;
&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;ATTENTION: Python 2 Alert!&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        In Python 2, the corresponding function is &lt;code&gt;raw_input()&lt;/code&gt;. In Python 3, it is now renamed to &lt;code&gt;input()&lt;/code&gt;.
    &lt;/div&gt;
&lt;/div&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: input(&quot;\n Please enter the full name of the person: &quot;)

 Please enter the full name of the person: Amir Shahmoradi
Out[11]: 'Amir Shahmoradi'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The function &lt;code&gt;input()&lt;/code&gt; is a Python built-in function that outputs the input string inside parantheses to the output screen, and then waits for the user to enter an input. This function reads a line from input, and converts it to a &lt;strong&gt;string&lt;/strong&gt; (stripping a trailing newline), and returns that. One can also put the user’s input directly into a variable, which is the normal way of using this function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [13]: input_variable = input(&quot;\n Please enter the full name of the person: &quot;)

 Please enter the full name of the person: Amir Shahmoradi

In [14]: print(input
input          input_key      input_variable

In [14]: print(input_variable)
Amir Shahmoradi

In [15]: type(input_variable)
Out[15]: str

In [16]: input_variable = input(&quot;\n Please enter the full name of the person: &quot;)

 Please enter the full name of the person: 1234

In [17]: type(input_variable)   # whatever type the input is, it will be converted to string by Python interpreter
Out[17]: str
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, back to our originally stated problem in the above, we want to write a program that takes in the name of a person from the command line and then tells the user some information about them, depending on their name. To achive this, we need to become familiar with the concept of &lt;strong&gt;branching&lt;/strong&gt; in Python.  Specifically, we can achieve our goal by writing a &lt;code&gt;if-elif&lt;/code&gt; statement in Python as in the following python script.&lt;/p&gt;

&lt;p&gt;The general syntax for &lt;code&gt;if&lt;/code&gt; blocks in python is the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if expression1:     # if expression1 is True
   statement(s)         # execute the required Python statements
elif expression2:   # else if expression2 is True
   statement(s)         # execute the required Python statements
elif expression3:   # else if expression3 is True
   statement(s)         # execute the required Python statements
else:               # else if neither of the above were True
   statement(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the indentations at beginning of each of the statements is necessary, otherwise the Python interpreter will give you a syntax error. However, if it important to note also that the number of indentations is arbitrary.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;ATTENTION!&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    I highly recommend you to be consistent in indentations of your Python code. The whole point of Python is to write a highly-human-readable code. and this requires you to write your code in the most consistent way possible. For example, I recommend you to always use either 2,3, or 4 white-space characters for indentations in your code, and
    &lt;br /&gt;&lt;br /&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;AVOID USING &lt;code&gt;tab&lt;/code&gt; CHARACTER AS INDENTATION IN YOUR CODES&lt;/b&gt;
    &lt;/div&gt;
    &lt;br /&gt;
    unless your editor automatically converts it to a pre-specified number of white-space characters. The &lt;code&gt;tab&lt;/code&gt; character can create a huge mess in your Python codes, and some extra work to clean them up. &lt;a href=&quot;http://www.secnetix.de/olli/Python/block_indentation.hawk&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is a good resource to learn more about indentations in Python
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
ecl_dict = { 'nicholas boeker'  : 'student'
           , 'bradley bridges'  : 'student'
           , 'sagar dhana'      : 'student' 
           , 'travis driver'    : 'student'
           , 'eric gagliano'    : 'student'
           , 'christian garcia' : 'student'
           , 'matthew goree'    : 'student'
           , 'lucero herrera'   : 'student'
           , 'jake janssen'     : 'student'
           , 'michael langford' : 'student'
           , 'colin lewis'      : 'student'
           , 'mark loveland'    : 'student'
           , 'emilio mendiola'  : 'student'
           , 'kreshel nguyen'   : 'student'
           , 'russell philley'  : 'student'
           , 'caleb phillips'   : 'student'
           , 'joseph robbins'   : 'student'
           , 'bradley smith'    : 'student'
           , 'vivek varier'     : 'assistant'
           , 'amir shahmoradi'  : 'instructor'
           }
name = input(&quot;\n Please enter the full name of the person: &quot;)
if name in ecl_dict:    # First make sure the name is in our dictionary
    if ecl_dict[name] == 'instructor':
        print( '\nThe name you enetered: {} belongs to the instructor of the ECL course. His office hours are Mondays 5-6 p.m.\n'.format(name) )
    elif ecl_dict[name] == 'assistant':
        print( '\nThe name you enetered: {} belongs to the Teaching Assistant of the ECL course. His office hours are Tuesdays 9-11 a.m.\n'.format(name) )
    elif ecl_dict[name] == 'student':
        print( '\nThe name you enetered: {} belongs to one of the amazing students in our class. You can certainly reach him during the weekly ECL classes on Wednesdays 9-10 a.m.\n'.format(name) )
else:
    print('\nThe name you entered: {} does not correspond to any real person in ECL class. Make sure you are not looking for a ghost, as our class is ghost-free.\n'.format(name) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, if we run the &lt;a href=&quot;http:/ECL2017S/lecture/6/ecl_names.py&quot; target=&quot;_blank&quot;&gt;file&lt;/a&gt; containing this script, we will get something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./ecl_names.py

 Please enter the full name of the person: amir shahmoradi

The name you enetered: amir shahmoradi belongs to the instructor of the ECL course. His office hours are Mondays 5-6 p.m.

$ ./ecl_names.py

 Please enter the full name of the person: Harry Potter

The name you entered: Harry Potter does not correspond to any real person in ECL class. Make sure you are not looking for a ghost, as our class is ghost-free.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Conditional &lt;code&gt;if&lt;/code&gt; statement is the only built-in branching method in Python. However, it can be written in several different sytaxes, each of which can be useful in some circumstances:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; One-line conditional &lt;strong&gt;statement&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if condition: statement
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if sqrt(2) &amp;lt; 2: print('sqrt(2) &amp;lt; 2\nOf course that was obvious!')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sqrt(2) &amp;lt; 2
Of course that was obvious!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; multiple line (as stated above) conditional &lt;strong&gt;statement&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if condition:
    block statements
elif:
    block statements
else:
    block statements
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; Inline conditional &lt;strong&gt;expression&lt;/strong&gt;: This is a particularly useful syntax for conditional value assignments in Python.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;expression1 if condition_is_met else expression2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, instead of writing,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if condition:
    a = value1
else
    a = value2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
one can summarize it all in one line,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = (value1 if condition else value2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the paratheses are not necessary, however, they are recommended for clarity. Here is an example code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;name = input('Input the name: ')
print( 'This person is the ECL instructor' if name == 'amir' else 'This person is not the ECL instructor')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Input the name: amir
This person is the ECL instructor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;non-boolean-conditions-in-if-statements&quot;&gt;Non-boolean conditions in if-statements&lt;/h3&gt;
&lt;p&gt;There is a rather interesting feature of conditions in Python if-statements, that allows the programmer to use a non-boolean variable or value type directly in place of the condition in if-statement. What really happens here is that, Python interpreter converts the non-boolean type to a boolean value, when it occurs in place of an if-statement condition.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 5.6:
    print('The condition in this if statement is automatically converted from float to boolean')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The condition in this if statement is automatically converted from float to boolean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 0.0:
    print('A float value of zero is converted to False')
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not 0.0:
    print('A float value of zero is converted to False')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A float value of zero is converted to False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 0.000000000000000000000000000000000000000000000000000000000000000000001:
    print('Any non-zero float value of any precision is converted to True')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A float value of zero is converted to False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 1.e-323:
    print('Any non-zero float value of any precision is converted to True')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value of any precision is converted to True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 1.e-324: # make sure you don't go beyond computer precision
    print('Any non-zero float value smaller than the computer precision will be set to 0')
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not 1.e-324: # make sure you don't go beyond computer precision
    print('Any non-zero float value smaller than the computer precision will be set to 0')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value smaller than the computer precision will be set to 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 12:
    print('The same rules also hold for integers.')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The same rules also hold for integers.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if &quot;&quot;:
    print('An empty string is converted to boolean False')
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not &quot;&quot;:
    print('An empty string is converted to boolean False')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;An empty string is converted to boolean False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if &quot; &quot;:
    print('A non-empty string is converted to boolean True')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A non-empty string is converted to boolean True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if []:
    print('An empty list is converted to boolean False')
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not []:
    print('An empty list is converted to boolean False')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;An empty list is converted to boolean False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if [1]:
    print('A non-empty list is converted to boolean True')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A non-empty list is converted to boolean True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not {}:
    print('The same rules also hold for sets and dictionaries.')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The same rules also hold for sets and dictionaries.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if {1:2}:
    print('The same rules also hold for sets and dictionaries.')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The same rules also hold for sets and dictionaries.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not None:
    print('The keyword None is also equivalent to False.')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The keyword None is also equivalent to False.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;bool(&quot;amir&quot;) # You can always get the boolean-conversion of a value or type using Python's built-in function bool().
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;functions-in-python&quot;&gt;Functions in Python&lt;/h2&gt;

&lt;p&gt;In Python, like most other programming languages, &lt;strong&gt;function&lt;/strong&gt; is a collection of programming statements that can be executed whenever and wherever  requested. Therefore, the definition of function in programming goes far beyond the mathematical definition of function. For example, programming functions can have no input or output.&lt;/p&gt;

&lt;p&gt;In Python, the syntax of a function is like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def function_name(argument_1, argument_2, ..., argument_N)
    python_statment_1
    python_statment_2
    ...
    return output
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, the line beginning with &lt;code&gt;def&lt;/code&gt; is referred to as the &lt;strong&gt;function header&lt;/strong&gt;, and the statements inside the function are called the &lt;strong&gt;function body&lt;/strong&gt;. To use a function, it must be first defined like above, and then called where it is needed inside the code.&lt;br /&gt;
&lt;strong&gt;Example:&lt;/strong&gt;&lt;br /&gt;
Let’s write a Python function that takes in a temperature value in Centigrads and converts it to Fahrenheit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    return (9.0/5)*C + 32

c_temp = 70.7       # The hottest place on Earth, Lut Desert in Iran 
f_temp = c2f(c_temp)

print(&quot;&quot;&quot;
The hottest place on Earth as of 2005 is in the Lut Desert in Iran at {0} degrees Celsius.
This corresponds to a temerature of {1} degrees Farenheiht!
&quot;&quot;&quot;.format(c_temp,c2f(c_temp)) )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The hottest place on Earth as of 2005 is in the Lut Desert in Iran at 70.7 degrees Celsius.
This corresponds to a temerature of 159.26 degrees Farenheiht!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;functions-with-no-input-arguments&quot;&gt;Functions with no input arguments&lt;/h3&gt;

&lt;p&gt;We can define functions that take no input argument, yet do something predefined for us. Consider the following function which gives information about the ECL course, when called.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_ecl_info():
    return &quot;Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. The overarching goal of the course is to introduce Aerospace undergraduate students with the principles of scientific computing, as well as the applications of numerical methods that the students learn in Engineering Computation (ASE 211K), offered parallel to this course. Towards this goal, Python was chosen as default programming language for the first offering of this course, but it can be switched to other languages such as R, MATLAB, Fortran, C++, etc., depending on the future needs of the Aerospace undergraduate program at UT Austin.&quot;

get_ecl_info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. The overarching goal of the course is to introduce Aerospace undergraduate students with the principles of scientific computing, as well as the applications of numerical methods that the students learn in Engineering Computation (ASE 211K), offered parallel to this course. Towards this goal, Python was chosen as default programming language for the first offering of this course, but it can be switched to other languages such as R, MATLAB, Fortran, C++, etc., depending on the future needs of the Aerospace undergraduate program at UT Austin.'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;functions-with-no-output-return-value&quot;&gt;Functions with no output (return value)&lt;/h3&gt;

&lt;p&gt;We can also modify the above function such that it does not return anything specifically.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_ecl_info():
    print( &quot;Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. The overarching goal of the course is to introduce Aerospace undergraduate students with the principles of scientific computing, as well as the applications of numerical methods that the students learn in Engineering Computation (ASE 211K), offered parallel to this course. Towards this goal, Python was chosen as default programming language for the first offering of this course, but it can be switched to other languages such as R, MATLAB, Fortran, C++, etc., depending on the future needs of the Aerospace undergraduate program at UT Austin.&quot; )

get_ecl_info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. The overarching goal of the course is to introduce Aerospace undergraduate students with the principles of scientific computing, as well as the applications of numerical methods that the students learn in Engineering Computation (ASE 211K), offered parallel to this course. Towards this goal, Python was chosen as default programming language for the first offering of this course, but it can be switched to other languages such as R, MATLAB, Fortran, C++, etc., depending on the future needs of the Aerospace undergraduate program at UT Austin.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In such cases, you may have already noticed that we can readily skip the &lt;code&gt;return&lt;/code&gt; statement. In reality, in such cases, what happens is that Python interpereter adds an invisible &lt;code&gt;return None&lt;/code&gt; statement at the end of the function. &lt;code&gt;None&lt;/code&gt; is a special reserved keyword of Python that represents &lt;strong&gt;nothing&lt;/strong&gt; or &lt;strong&gt;empty data&lt;/strong&gt; in Python. It is almost equivalent to the word &lt;strong&gt;void&lt;/strong&gt; in languages like Java, C, and C++.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_ecl_info():
    print( &quot;Engineering Computation Lab (COE111L) is a new course that is offered at UT Austin.&quot; )
    return None
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_ecl_info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Engineering Computation Lab (COE111L) is a new course that is offered at UT Austin.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you set a variable equal to this function, the value of the variable will be &lt;code&gt;None&lt;/code&gt;, because the function returns nothing on the output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;variable = get_ecl_info()
type(variable)
print(variable)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;NoneType
None
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;functions-with-multiple-input-arguments&quot;&gt;Functions with multiple input arguments&lt;/h3&gt;

&lt;p&gt;Functions can take almost as many input arguments as we wish. Consider the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def power(base,exponent):
    return base**exponent
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;power(2,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;32
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;the-order-of-input-arguments-both-does-and-does-not-matter&quot;&gt;The order of input arguments both does and does not matter!&lt;/h4&gt;

&lt;p&gt;Note that in the previous code, calling the function with the wrong order of input parameters, can lead to a catastrophe and wrng output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;power(5,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, a really cool feature for function input arguments is that, when calling the function, you can also name the argument variable, and if you name them all, then the order by which the arguments appera becomes irrelevant.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;power(exponent=5,base=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;32
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;functions-with-multiple-output-return-values&quot;&gt;Functions with multiple output (return values)&lt;/h3&gt;

&lt;p&gt;Python funcitons can return more than one value. For this purpose, tuple variable types become a handy tool. Recall that making a tuple is as simple as writing a sequence of comma separated values/variable, like the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mytuple = 1, 2
mytuple
type(mytuple)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(1, 2)
tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if you need to write a function that has multiple return value, you can simply return them all in one sequence of comma separated values/variables. For example, suppose a function takes in two numbers, and then outputs the quotient (the result of integer division) and the remainder of the integer division. An example such function would be like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_quotient_remainder(dividend,divisor):
    return divmod(dividend,divisor)

get_quotient_remainder(11,3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(get_quotient_remainder(11,3))  # By default, the output is a tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, the output of this function is a tuple, since we are returning a tuple in the function. But we could also return the output as a list, or any other appropriate format we wish.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_quotient_remainder(dividend,divisor):
    return list(divmod(dividend,divisor))   # convert the output to list before passing it to main program

type(get_quotient_remainder(11,3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also save the output in a variable as well,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_quotient_remainder(dividend,divisor):
    return divmod(dividend,divisor)

result = get_quotient_remainder(dividend=11,divisor=3) # You can also name the input variables to make sure you assign them in the correct order.
print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or save the individual results in separate variables, like,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;quotient, remainder = get_quotient_remainder(dividend=11,divisor=3)
print(quotient, remainder)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or save it in the form of a tuple or list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;[quotient, remainder] = get_quotient_remainder(dividend=11,divisor=3)
print(quotient, remainder)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;functions-with-optional-input-arguments&quot;&gt;Functions with optional input arguments&lt;/h3&gt;

&lt;p&gt;Like many other high-level programming languages, Python allows you to have optional arguments in your input, which you can drop when calling the function. However, an optional argument must have a preassigned value in the function, otherwise dropping the variable at the time of function call will lead to a runtime error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_quotient_remainder(dividend,divisor=10,message=&quot;This is the default message.&quot;):
    print( &quot;divmod({},{}) = &quot;.format(divmod(dividend,divisor)) )
    print( message )
    return divmod(dividend,divisor)

result = get_quotient_remainder(dividend=11,divisor=3) # the optional input argument 'message' is set to its default value.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;divmod(11,3) = (3, 2)
This is the default message.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above function, default the value of optional message argument to &lt;code&gt;&quot;This is the default message.&quot;&lt;/code&gt; since it is not given at the time of calling the function. The function’s &lt;strong&gt;optional input arguments&lt;/strong&gt; whose values are initialized to a default value are more famously known in Python as &lt;strong&gt;keyword arguments&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;ATTENTION:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Note that when the optional arguments are named and assigned a value at the time of function call, then their order of appearance in the function call does not matter. However, keep in mind that the **ordinary** or **positional** arguments should all appear in order and first, before the keyword arguments appear. However, the keyword arguments can appear in any order one may wish.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For the above example function, the following function calls would be valid,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_quotient_remainder(dividend=11)
get_quotient_remainder(11,divisor=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
and the following would be invalid,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_quotient_remainder(divisor=3,11,message=&quot;A new message.&quot;)   # This is invalid
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-36-27658299aa76&amp;gt;&quot;, line 1
    get_quotient_remainder(divisor=3,11,message=&quot;A new message.&quot;)   # This is invalid, the order is incorrect.
                                    ^
SyntaxError: positional argument follows keyword argument
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_quotient_remainder(11,divisor=3,&quot;A new message.&quot;)   # Also invalid, all arguments after the first named argument must appear with name as well.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-37-1643cc8d6910&amp;gt;&quot;, line 1
    get_quotient_remainder(11,divisor=3,&quot;A new message.&quot;)
                                       ^
SyntaxError: positional argument follows keyword argument
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;ATTENTION:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Note that the keyword arguments must be always listed after the positional arguments in the function definition. Note also, as in the above examples, that the sequence of input arguments **at the time of function call** does not matter, so long as the names of all positional and keyword arguments are provided in the function call.
&lt;/blockquote&gt;

&lt;p&gt;Note also, that the number input arguments at the time of call must be exactly the same as the number of arguments in the function definition.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_quotient_remainder(11,3,&quot;A new message.&quot;,)  # THis works even though, there is an extra comma at the end of the arguments of the function call.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;divmod(11,3) = (3, 2)
A new message.

(3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;local-and-global-variables-in-functions&quot;&gt;Local and global variables in functions&lt;/h3&gt;
&lt;p&gt;Variables that are defined insde of a function, are by default invisible outside the function scope. For example, let’s consider  Let us reconsider the original function defined at the beginning of the lecture, which takes in a temperature value in Centigrads and converts it to Fahrenheit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    converted_value = (9.0/5)*C + 32
    return converted_value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, if the variable &lt;code&gt;converted_value&lt;/code&gt; is called outside the function, it will result in a syntax error since it is undefined outside the function scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;c2f(70)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;158.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;converted_value
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;NameError                                 Traceback (most recent call last)
&amp;lt;ipython-input-42-1aa75d9b79c4&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 converted_value

NameError: name 'converted_value' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    Local variables are created inside a function and destroyed when the program control goes back to the main code, outside the function.
&lt;/blockquote&gt;

&lt;p&gt;Now suppose we had the following script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    converted_value = (9.0/5)*C + 32
    print('Value of C inside function: {}'.format(C))
    return converted_value

C = 70
c2f(50)
print('Value of C outside function: {}'.format(C))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Value of C inside function: 50
Value of C outside function: 70
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clearly, the two values are not the same, even though the variable names are the same. But, if you really want to access the global variable &lt;code&gt;C&lt;/code&gt; inside of the function, then you can use Python’s built-in function &lt;code&gt;globals()&lt;/code&gt; which returns a &lt;strong&gt;dictionary&lt;/strong&gt; of all global variables in the main program, and then use the keyword &lt;code&gt;'C'&lt;/code&gt; to get its value inside the function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(globals())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;globals()['C']
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;70
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the same function as above, but with the global variable value would give you,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    converted_value = (9.0/5)*globals()['C'] + 32
    print('Value of C inside function: {}'.format(globals()['C']))
    return converted_value

C = 70
c2f(50)
print('Value of C outside function: {}'.format(C))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Value of C inside function: 70
Value of C outside function: 70
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    As a general rule, when there are &lt;b&gt;several variables with the same name&lt;/b&gt;, Python interpreter &lt;b&gt;first&lt;/b&gt; tries to look up the variable name among the &lt;b&gt;local variables&lt;/b&gt;, &lt;b&gt;then&lt;/b&gt; there is a search among &lt;b&gt;global variables&lt;/b&gt;, and &lt;b&gt;finally&lt;/b&gt; among built-in &lt;b&gt;Python functions&lt;/b&gt;.  
&lt;/blockquote&gt;

&lt;p&gt;In order to declare a variable inside the function global, use the keyword &lt;code&gt;global&lt;/code&gt; as in the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = 20; b = -2.5 # global variables
def f1(x):
    a = 21 # this is a new local variable
    return a*x + b

print (a) # yields 20

def f2(x):
    global a
    a = 21 # the global a is changed
    return a*x + b

f1(3); print (a) # 20 is printed
f2(3); print (a) # 21 is printed
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;20
20
21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in function &lt;code&gt;f1&lt;/code&gt;, $a = 21$ creates a local variable a. One may think the global &lt;code&gt;a&lt;/code&gt; has changed, but it does not happen. However, in the second function &lt;code&gt;f2&lt;/code&gt;, the globally declared variable is assigned a new value and therefore, the global value of &lt;code&gt;a&lt;/code&gt; outside the function also changes. Test this script yourself and see what you get.&lt;/p&gt;

&lt;blockquote&gt;
    Be careful with using global variables inside your functions, because if you do not define them prior to using the function, then you get a runtime error.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
Here is an example of the error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def f2(x):
    global a    # a must be defined outside the function prior to function call
    return a*x + b

f2(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;NameError                                 Traceback (most recent call last)
&amp;lt;ipython-input-55-ea6f63a0f6d6&amp;gt; in &amp;lt;module&amp;gt;()
    3     return a*x + b
    4 
----&amp;gt; 5 f2(3)

&amp;lt;ipython-input-55-ea6f63a0f6d6&amp;gt; in f2(x)
    1 def f2(x):
    2     global a    # a must be defined outside the function prior to function call
----&amp;gt; 3     return a*x + b
    4 
    5 f2(3)

NameError: name 'a' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;avoid-function-side-effects&quot;&gt;Avoid function side-effects&lt;/h4&gt;

&lt;p&gt;A function in which the value of a global variable is changed while the global variable is not the intended output of the function, is called a &lt;strong&gt;function with side-effects&lt;/strong&gt;. Here is an example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def f2(x):
    global a
    a = 21 # the global a is changed
    return a*x + b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In general, any &lt;em&gt;lasting effect&lt;/em&gt; that occurs in a function, but not through its &lt;code&gt;return&lt;/code&gt; value, is called a &lt;strong&gt;side effect&lt;/strong&gt;. There are three ways to have side effects:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Changing the value of a mutable object.&lt;/li&gt;
  &lt;li&gt;Changing the binding (the storage space) of a global variable.&lt;/li&gt;
  &lt;li&gt;Printing out a value. This doesn’t change any objects or variable bindings, but it does have a potential lasting effect outside the function execution, because a person might see the output and be influenced by it.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
    In general, avoid defining functions that have side-effects. In large codes and projects, side-effects can create complex semantic errors and become a hurdle for optimization and code debugging. 
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pythons-built-in-functions&quot;&gt;Python’s built-in functions&lt;/h3&gt;

&lt;p&gt;Python has a number of built-in functions, which can be handy. &lt;a href=&quot;https://docs.python.org/3/library/functions.html&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is a list of Python’s built-in functions along with a description of what they do.&lt;/p&gt;

&lt;h3 id=&quot;function-docstring&quot;&gt;function docstring&lt;/h3&gt;

&lt;p&gt;There is a convention in Python to insert a documentation string right after the &lt;code&gt;def&lt;/code&gt; line of the function definition (the function header). The documentation string, known as a &lt;strong&gt;doc string&lt;/strong&gt; or &lt;strong&gt;docstring&lt;/strong&gt;, should contain a short description of the purpose of the function and explain what the different arguments and return values are. Doc strings are usually enclosed in triple double quotes &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt;, which allow the string to span several lines.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    &quot;&quot;&quot;
    This function converts Celsius degrees (C) to Fahrenheit.
    Uses global variable C.
    &quot;&quot;&quot;
    converted_value = (9.0/5)*globals()['C'] + 32
    print('Value of C inside function: {}'.format(globals()['C']))
    return converted_value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The docstring is then stored in &lt;code&gt;__doc__&lt;/code&gt; attribute of the function, and can be called like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;c2f.__doc__
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'\n    This function converts Celsius degrees (C) to Fahrenheit.\n    Uses global variable C.\n    '
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’d like to get the formatted docstring, use Python’s &lt;code&gt;help()&lt;/code&gt; function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;help(c2f)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on function c2f in module __main__:

c2f(C)
    This function converts Celsius degrees (C) to Fahrenheit.
    Uses global variable C.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One can also use &lt;code&gt;&quot;&lt;/code&gt; in place of &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt;, although less conventional. But then for multiple lines of docstring, one has to use line continuation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    &quot;\
    This function converts Celsius degrees (C) to Fahrenheit.\
    Uses global variable C.\
    &quot;
    converted_value = (9.0/5)*globals()['C'] + 32
    print('Value of C inside function: {}'.format(globals()['C']))
    return converted_value
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
    Note that the docstring must appear before any statement in the function body.
&lt;/blockquote&gt;

&lt;h3 id=&quot;functions-as-input-arguments-to-functions&quot;&gt;Functions as input arguments to functions&lt;/h3&gt;

&lt;p&gt;In happens frequently in scientific programming, that a function needs to use another arbitrary function provided by the user to perform some specific tasks with it inside the function. For example, programs doing calculus frequently need to have functions as arguments in functions. For example,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a Python function that finds the root of a mathematical function, given as input argument.&lt;/li&gt;
  &lt;li&gt;a Python function that differentiates of a mathematical function, given as input argument.&lt;/li&gt;
  &lt;li&gt;a Python function that integrates a mathematical function, given as input argument.&lt;/li&gt;
  &lt;li&gt;a Python function that solves a mathematical differential equation, given as input argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In such cases, Python functions need to have the mathematical function as an input argument with some name(e.g., &lt;code&gt;func&lt;/code&gt;). Like Fortran, this is straightforward in Python and hardly needs any explanation, but in most other languages special constructions must be used for transferring a function to another function as argument. For example, suppose we want to compute numerically the second-derivative of a user given mathematical function,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;func&lt;/code&gt; input argument is like any other argument, i.e., a name for an object, here a function
object that we can call as we normally call functions. An an application, suppose we want to calculate the second derivative of a quadratic function $g(x)$ of the following form at $x=2$,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r

def g(x):
    return x**2 + 4.0*x + 1.0

x = 2
diff2nd_g = diff2nd(g, x)
print ( &quot;g’’(x=%f)=%f&quot; % (x, diff2nd_g) )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;g’’(x=2.000000)=2.001954
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;function-composition&quot;&gt;Function composition&lt;/h3&gt;

&lt;p&gt;The ability to call one function from within another function is called &lt;strong&gt;composition&lt;/strong&gt;. Suppose we have a function &lt;code&gt;distance&lt;/code&gt; that calculates the distance between two points on a 2D plane. and another function that takes in a value for radius, and then calculates the corresponding area for that radius.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def distance(x1, y1, x2, y2):
    from math import sqrt
    return sqrt( (x2-x1)**2 + (y2-y1)**2 )

def area(x1, y1, x2, y2):
    from math import pi
    return pi*distance(x1, y1, x2, y2)**2

area(0.0,0.0,0.0,1.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3.141592653589793
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;recursive-functions&quot;&gt;Recursive functions&lt;/h4&gt;

&lt;p&gt;Now, note that the function being called inside the other, does not necessarily have to be a different function. It could be the same function calling itself repeatedly, &lt;strong&gt;until a condition is met&lt;/strong&gt; (otherwise this would be an endless function call to itself for eternity). For example, a function that would calculate the factorial of an input integer would be like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def factorial(n):
    if isinstance(n,float):
        print('The input number {} is not an integer!'.format(n))
        return None
    if n==0:
        return 1
    elif n==1:
        return n
    else:
        return n*factorial(n-1)

factorial(4)
factorial(4.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;24
The input number 4.5 is not an integer!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;lambda-functions&quot;&gt;Lambda functions&lt;/h3&gt;

&lt;p&gt;There is a quick one-line construction of functions that is often convenient to make Python code compact. For example, recall how we defined &lt;code&gt;g(x)&lt;/code&gt; in the &lt;a href=&quot;#functions-as-input-arguments-to-functions&quot;&gt;example above&lt;/a&gt;. Here is a compact version of it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;g = lambda x: x**2 + 4.0*x + 1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This code is equivalent to the original code that wrote before,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def g(x):
    return x**2 + 4.0*x + 1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In general, a function of the form,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def g(arg1, arg2, arg3, ...):
    return expression
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
can be converted to the compact form,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;g = lambda arg1, arg2, arg3, ...: expression
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Lambda functions are very useful for defining simple functions in the argument list that is passed to another function. For example, recall our &lt;code&gt;diff2nd&lt;/code&gt; function that we defined in the above,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r

def g(x):
    return x**2 + 4.0*x + 1.0

x = 2
diff2nd_g = diff2nd(g, x)
print ( &quot;g’’(x=%f)=%f&quot; % (x, diff2nd_g) )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;g’’(x=2.000000)=2.001954
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now instead of defining &lt;code&gt;g(x)&lt;/code&gt; separately when calling &lt;code&gt;diff2nd&lt;/code&gt; function, we can use the following compact form,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r

x = 2
print ( &quot;g’’(x=%f)=%f&quot; % (x, diff2nd(lambda x: x**2 + 4.0*x + 1.0, x) ) )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;g’’(x=2.000000)=2.001954
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lambda functions may also take &lt;strong&gt;keyword arguments&lt;/strong&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;d2 = diff2nd(lambda t, A=1, a=0.5: -a*2*t*A*exp(-a*t**2), 1.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This format is particularly useful, if the lambda function contains a constant that is repeatedly used in the expression of the function, the value of which may need to be updated in future runs of the code, or later on in the same code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/6-python-branching-functions&quot;&gt;Lecture 6: Python - branching and functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on March 08, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 5: Python - variables and assignment statements]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/5-python-variables-assignments"/>
  <id>http:/ECL2017S/lecture/5-python-variables-assignments</id>
  <published>2017-03-01T00:00:00-06:00</published>
  <updated>2017-03-01T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture further explains different types of variables in Python, branching statements, how to define functions, and what Python modules are.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;programming-glossary&quot;&gt;Programming glossary&lt;/h2&gt;
&lt;p&gt;The following table summarizes some of the important keywords in this lecture for you.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. Some programming phrases that are discussed in this lecture.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
    &lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
    &lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;dictionary&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A collection of `key:value` mapping pairs, in which the values can be obtained by calling the value's key.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;hashable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A Python object (e.g., variable) that has a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_function&quot; target=&quot;_blank&quot;&gt;hash value&lt;/a&gt; which never changes during its lifetime.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;immutable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A variable or value that cannot be modified. Assignments to elements of immutable values cause a runtime error. Example immutable Python entities are tuples and strings.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;invocation&lt;/b&gt;&lt;/td&gt;&lt;td&gt;The process of calling an object's method, usually done through &lt;code&gt;&amp;#60;object name&amp;#62;.&amp;#60;method name&amp;#62;&lt;/code&gt; notation.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;list&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A sequence of comma-separated heterogenous values next to each other.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;method&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Similar to a function, a method is a predefined built-in Python script that performs a specific task on the data object to which the method belongs.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;mutable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A variable or value that can be modified. Examples of mutables in Python are lists, and dictionaries.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;set&lt;/b&gt;&lt;/td&gt;&lt;td&gt;An unordered collection of unique elements, just like the mathemtical sets.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;string&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A sequence of characters next to each other.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;tuple&lt;/b&gt;&lt;/td&gt;&lt;td&gt;An immutable data value that contains related elements. Tuples are used to group together related data, such as a person’s name, their age, and their gender.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;variables-in-python-continued&quot;&gt;Variables in Python (continued)&lt;/h2&gt;
&lt;p&gt;A variable is simply a name that we assign to a specific value, in order to avoid repeating the same value frequently in the code, thus writing a cleaner, less error-prone script/code. As we discussed before, Python has 6 main variable types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Number&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;List&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tuple&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dictionary&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set and Frozenset&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will get to each of these below. But before that, here are some official and unofficial tips on the variable naming conventions in Python.&lt;/p&gt;

&lt;h3 id=&quot;variable-naming-convention-in-python&quot;&gt;Variable naming convention in Python&lt;/h3&gt;

&lt;p&gt;A Python variable can only begin with letter or underscore _. Numbers are only valid if they appear inside or at the end of the variable name. Other symbols are syntactically invalid anywhere in a variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;123new_var = 2.5 # This is an invalid name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-10-0e3e63931842&amp;gt;&quot;, line 1
    123new_var = 2.5 # This is an invalid name
             ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;new_var$ = 2.5 # symbols are not valid in Python variable names
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-12-71f3fbc68938&amp;gt;&quot;, line 1
    new_var$ = 2.5 # symbols are not valid in Python variable names
           ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;amir = &quot;teacher&quot;
print('Amir is a', amir)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Amir is a teacher
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;123amir = &quot;teacher&quot; # Wrong name for variable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-38-85ed673cd303&amp;gt;&quot;, line 1
    123amir = &quot;teacher&quot;
          ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;life_expectancy = 120; print( &quot;The life expectancy for the millennials is projected to be %d years! (But don't believe it...)&quot; % (life_expectancy) );
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The life expectancy for the millennials is projected to be 120 years! (But don't believe it...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;python-reserved-names-keywords&quot;&gt;Python reserved names (keywords)&lt;/h3&gt;
&lt;p&gt;There are some limitation as what names you can choose for your variables, even if they completely obey the Python syntax standard. Variable names in Python cannot be the same as &lt;strong&gt;Python keywords&lt;/strong&gt;, which are simply names that reserved for a specific purpose in Python programming.  A keyword as variable name, function name or any other identifier. They are used to define the syntax and structure of the Python language. Note that &lt;strong&gt;Python keywords are case-sensitive&lt;/strong&gt;.  There are already more than 30 keywords in Python 3. In order to see a complete list of all keywords use the following python codes,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [38]: import keyword

In [39]: print(keyword.
keyword.iskeyword keyword.kwlist    keyword.main

In [39]: print(keyword.kwlist)
['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

In [40]: keyword.kwlist # same thing as above, but each keyword printed on a new line.
Out[40]:
['False',
 'None',
 'True',
 'and',
 'as',
 'assert',
 'break',
 'class',
 'continue',
 'def',
 'del',
 'elif',
 'else',
 'except',
 'finally',
 'for',
 'from',
 'global',
 'if',
 'import',
 'in',
 'is',
 'lambda',
 'nonlocal',
 'not',
 'or',
 'pass',
 'raise',
 'return',
 'try',
 'while',
 'with',
 'yield']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that all keywords except &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; are in lowercase and they must be written as lowercase. To understand the meaning and function of each of these keywords, see &lt;a href=&quot;https://www.programiz.com/python-programming/keyword-list&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;meaning-of-underscore-_-in-python&quot;&gt;Meaning of underscore _ in Python&lt;/h3&gt;

&lt;p&gt;Frequently, as you learn more about Python, you will notice the presence of underscores in Python variables, function and method names. Depending on where and how underscore appears in a Python name, it can have a different meaning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Underscore as word separator in variable/function naming&lt;/strong&gt;&lt;br /&gt;
The convention in Python programming is to separate multiple words in Python variable names by underscore. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;an_example_long_variable_name = 123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Of course, this is totally a convension. But I highly recommend you to follow the conventions that everyone else follows, so that you can understand other people’s codes and others can understand your code easily. 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Underscore meaning in Python interpreter&lt;/strong&gt;&lt;br /&gt;
A variable named solely by underscore &lt;strong&gt;_&lt;/strong&gt; in Python interpreter points to the result of the &lt;strong&gt;last executed statement&lt;/strong&gt; in the interactive interpreter session. This convention was first implemented by the standard CPython interpreter, but now other implementations are also following the convention.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: _
Out[1]: ''

In [2]: a = 120

In [3]: _
Out[3]: ''

In [4]: a + a
Out[4]: 240

In [5]: _
Out[5]: 240
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;3. _ as a dummy name in Python scripts&lt;/strong&gt;&lt;br /&gt;
The underscore _ can be used as a dummy name in Python scripts, a name for an entity that does play an important role in the code, for example, the index of a loop. This allows the next person who reads the code to know which entites (variables, …) are dummy and not intended to be used.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = 1
b = 2
print(&quot;a =&quot;,a,&quot;b =&quot;,b)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a = 1 b = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;_ = a
a = b
b = _
print(&quot;a =&quot;,a,&quot;b =&quot;,b) # the values are swapped. _ is just a dummy indtermediate variable.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a = 2 b = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4. Underscore as an indicator of the local-scope of a variable/function&lt;/strong&gt;&lt;br /&gt;
A single underscore that appears at the beginning of a name in Python code indicates that the name has to be treated as &lt;em&gt;private&lt;/em&gt; by the programmer. In other words, a name starting with _ is for internal use. In Python documentation the following note exist about such names:&lt;/p&gt;

&lt;blockquote&gt;
    A name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.  
&lt;/blockquote&gt;

&lt;p&gt;For Python module functions, if you use &lt;code&gt;from module_name import __all__&lt;/code&gt; instead of &lt;code&gt;from module_name import *&lt;/code&gt;, then all internal names in the module (that begin with _) will be imported to your environment as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Double Underscore Before and After a Name (e.g., &lt;code&gt;__init__&lt;/code&gt;)&lt;/strong&gt;&lt;br /&gt;
Such names are special method names used by Python. This is just a convention, that is, a way for the Python system to use names that won’t conflict with user-defined names. These names can be typically overridden to define the desired behaviour for when Python calls them. For example, the &lt;code&gt;__init__&lt;/code&gt; method is often overridden when writing a Python class. We will get to these topics later on in this course.&lt;/p&gt;

&lt;p&gt;A good review of underscore in Python can be found &lt;a href=&quot;https://shahriar.svbtle.com/underscores-in-python&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;number-variables&quot;&gt;Number variables&lt;/h3&gt;

&lt;p&gt;We have already extensively discussed number values in the previous lecture. Basically, everything that we have said about number values, holds also for variables of type number. But here is a very cool fear of number values and variables, that we skipped over in our previous lecture. When you define a Python number variable (or value), then python interpreter automatically allows you to perform some pre-defined operations on the variable/value by default. To access these operations, the dot &lt;code&gt;.&lt;/code&gt; syntax has to be used. Type the variable name, followed by &lt;code&gt;.&lt;/code&gt;, and then press &lt;code&gt;tab&lt;/code&gt; in your IPython/Jupyter editor.  Depending on the type of number (integer/float/complex) you will get a different set of operations that are allowed on the variable. The following shows some examples in IPython environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [18]: a = 120 # This is an integer variable

In [19]: a.
a.bit_length  a.conjugate   a.denominator a.from_bytes  a.imag        a.numerator   a.real        a.to_bytes

In [19]: a.conjugate
Out[19]: &amp;lt;function int.conjugate&amp;gt;

In [20]: a.conjugate()
Out[20]: 120

In [21]: a.imag
Out[21]: 0

In [22]: a.real
Out[22]: 120
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [23]: a = 120.5  # Now 'a' is a float variable

In [24]: a.
a.as_integer_ratio a.conjugate        a.fromhex          a.hex              a.imag             a.is_integer       a.real

In [25]: a.as_integer_ratio()  # Gives out the two numbers whose division is the value of the variable 'a'.
Out[25]: (241, 2)

In [28]: a.is_integer()   # 120.5 is not a whole number! (it would be True if a = 120.0)
Out[28]: False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can repeat the above for a complex number and see what you get.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [33]: a = 1+1j

In [34]: a.
a.conjugate a.imag      a.real

In [34]: a.conjugate()
Out[34]: (1-1j)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;string-variables&quot;&gt;String variables&lt;/h3&gt;
&lt;p&gt;Just as with numbers, string is another variable/value type in Python with many handy features that come withit. For example, if you create a string variable or value, fllowed by &lt;code&gt;.&lt;/code&gt; and then press &lt;code&gt;tab&lt;/code&gt; you will see a long list of methods that can be applied on the string,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [8]: my_string = 'this is a String'

In [9]: my_string.
my_string.capitalize   my_string.find         my_string.isdigit      my_string.isupper      my_string.replace      my_string.split        my_string.upper
my_string.casefold     my_string.format       my_string.isidentifier my_string.join         my_string.rfind        my_string.splitlines   my_string.zfill
my_string.center       my_string.format_map   my_string.islower      my_string.ljust        my_string.rindex       my_string.startswith
my_string.count        my_string.index        my_string.isnumeric    my_string.lower        my_string.rjust        my_string.strip
my_string.encode       my_string.isalnum      my_string.isprintable  my_string.lstrip       my_string.rpartition   my_string.swapcase
my_string.endswith     my_string.isalpha      my_string.isspace      my_string.maketrans    my_string.rsplit       my_string.title
my_string.expandtabs   my_string.isdecimal    my_string.istitle      my_string.partition    my_string.rstrip       my_string.translate

In [9]: my_string.upper()
Out[9]: 'THIS IS A STRING'

In [10]: my_string.swapcase()
Out[10]: 'THIS IS A sTRING'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;strings-are-immutable&quot;&gt;Strings are immutable&lt;/h4&gt;
&lt;p&gt;Although strings (both values and variables) can be indexed letter by letter, keep in mind that they cannot be changed (mutated) to something new. In other words, string are immutable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: my_string = 'Amir Shahmoradi'

In [13]: my_string[0] = 'a'
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-13-27fc86283e06&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 my_string[0] = 'a'

TypeError: 'str' object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The correct way of doing this would be through the indirect use of string methods or string slicing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [18]: my_string = my_string[:4] + ' ' + my_string[4:] # mutating my_string: add a space between first and last names.

In [19]: my_string
Out[19]: 'Amir  Shahmoradi'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
It is often very useful to know the length of a string. This can be done using &lt;code&gt;len()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [32]: len(my_string)
Out[32]: 16

In [33]: len(my_string[0:5])
Out[33]: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;testing-if-a-string-is-part-of-another-string&quot;&gt;Testing if a string is part of another string&lt;/h4&gt;

&lt;p&gt;We have already discussed some boolean string operations in Lecture 4. There are howver two more boolean operations that deserve to be mentioned here.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [48]: text = &quot;Engineering Computation program at UT Austin, is the first of its kind in the nation&quot;

In [49]: &quot;comp&quot; in text     # test if &quot;comp&quot; is part of the &quot;text&quot; string variable.
Out[49]: False

In [50]: &quot;Comp&quot; in text
Out[50]: True

In [51]: &quot;comp&quot; not in text     # test if &quot;comp&quot; is NOT part of the &quot;text&quot; string variable.
Out[51]: True

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To know more about string values and variables in general, visit &lt;a href=&quot;https://docs.python.org/2/tutorial/introduction.html#strings&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;list-variables&quot;&gt;List variables&lt;/h3&gt;
&lt;p&gt;List is another standard variable in type in Python and is composed of an ordered set of values (elements), each of which is identified by an index. Lists are defined by brackets &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [47]: emptyList = [] # initiate an empty list

In [48]: emptyList
Out[48]: []

In [40]: myList = [ 0,1,2,'Amir',complex(1,2j) ]

In [41]: myList
Out[41]: [0, 1, 2, 'Amir', (-1+0j)]

In [42]: myList[0] # note that list index always begins with 0
Out[42]: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;list-slices&quot;&gt;List slices&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [43]: myList[:-1] # all list elements from beginning to end, similar to myList, or myList[:]
Out[43]: [0, 1, 2, 'Amir']

In [44]: myList[:]
Out[44]: [0, 1, 2, 'Amir', (-1+0j)]

In [45]: myList[-1:] # select only the last element in list
Out[45]: [(-1+0j)]

In [46]: myList[::-1] # Creat list in reverse order.
Out[46]: [(-1+0j), 'Amir', 2, 1, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;Lists vs. Strings&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    You may have already noticed that lists behave very similar to strings in Python. In fact, both List and String are examples of ordered sets in Python known as &lt;b&gt;sequence&lt;/b&gt;. The only difference between list and python is that the elements of strings have to be all of type character, whereas lists do not have such restriction, as seen in the example above.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;br&gt;
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:justify;&quot;&gt;
        &lt;b&gt;Lists vs. Strings&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        You may have already noticed that lists behave very similar to strings in Python. In fact, both List and String are examples of ordered sets in Python known as &lt;b&gt;sequence&lt;/b&gt;. The only difference between list and python is that the elements of strings have to be all of type character, whereas lists do not have such restriction, as seen in the example above.
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;h4 id=&quot;nested-lists&quot;&gt;Nested lists&lt;/h4&gt;
&lt;p&gt;Lists can also contain other lists as elements. This way you can create matrices of numbers as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [53]: smallList = [1,2,3]

In [54]: list_of_lists = [ 10 , 100.0 , ['amir','shahmoradi'] , smallList ]

In [55]: list_of_lists
Out[55]: [10, 100.0, ['amir', 'shahmoradi'], [1, 2, 3]]

In [56]: my_matrix = [ [1,2,3] , [4,5,6] , [7,8,9] ]

In [57]: my_matrix[0][2] # the first index points to the 0th element in the list of lists, and the second index calls the list that is the first element of the big list. 
Out[57]: 3

In [68]: my_matrix[5-5][(2+2)//2]  # note that list indices can be the result of arithmetic operations too.
Out[68]: 3

In [61]: len(my_matrix) # This function gives the length of the list of lists.
Out[61]: 3

In [62]: list_of_lists
Out[62]: [10, 100.0, ['amir', 'shahmoradi'], [1, 2, 3]]

In [63]: len(list_of_lists[0]) # The first element, being an integer, does not have a length
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-63-11f2bd3dda3d&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 len(list_of_lists[0])

TypeError: object of type 'int' has no len()

In [64]: len(list_of_lists[2]) # but the third element in the list, is itself a list, so it does have a length
Out[64]: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;operations-on-lists&quot;&gt;Operations on lists&lt;/h4&gt;
&lt;p&gt;Two mathematics operations &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; are also meaningful for lists, just as it is for string sequences.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [8]: list1 = [1,2,3]

In [9]: list2 = [4,5,6]

In [10]: list1 + list2
Out[10]: [1, 2, 3, 4, 5, 6]

In [11]: list1 * 3
Out[11]: [1, 2, 3, 1, 2, 3, 1, 2, 3]

In [12]: (list1 + list2) * 3
Out[12]: [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In addition, once a list is created, by default, a list of pre-defined operations (methods) are available to act on the list content. To access these methods, again use &lt;code&gt;.&lt;/code&gt; notation, just as you did for strings before.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [13]: list1.
list1.append  list1.clear   list1.copy    list1.count   list1.extend  list1.index   list1.insert  list1.pop     list1.remove  list1.reverse list1.sort

In [13]: list1
Out[13]: [1, 2, 3]

In [14]: list1.append(4) # append number 4 to the end of list1

In [15]: list1
Out[15]: [1, 2, 3, 4]

In [16]: list1.append([1,1,1]) # append the given list to the end of list1

In [17]: list1
Out[17]: [1, 2, 3, 4, [1, 1, 1]]

In [18]: list1.count(1) # count the number of times 1 appears as element of list1
Out[18]: 1

In [19]: list1[-1].count(1) # count the number of times 1 appears as element in the list appearing as the element in list1.
Out[19]: 3

In [20]: list1[-2].count(4)  # Note that count is a method only for lists, and therefore cannot be applied to numbers.
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&amp;lt;ipython-input-21-2add981bfc56&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 list1[-2].count(4)

AttributeError: 'int' object has no attribute 'count'

In [23]: list1.extend([1,1,1])  # extend list1 by 3 more members

In [24]: list1
Out[24]: [1, 2, 3, 4, [1, 1, 1], 1, 1, 1]

In [25]: list1.count(1) # This time counting 1, gives 4, since the list was extended by 3 more '1'.
Out[25]: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://linuxconfig.org/python-list-methods&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is a useful reference for available list methods in Python.&lt;/p&gt;

&lt;h4 id=&quot;lists-are-mutable-unlike-strings&quot;&gt;Lists are mutable (unlike Strings)&lt;/h4&gt;
&lt;p&gt;Another major difference between list sequences and string sequences in Python is that the elements of lists can be changed (mutated) to something new.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [26]: people = [ 'Amir' , 'Jake' , 'Travis' ]

In [27]: people
Out[27]: ['Amir', 'Jake', 'Travis']

In [28]: people[0] = 'Brandon'

In [29]: people
Out[29]: ['Brandon', 'Jake', 'Travis']

In [30]: people.remove('Brandon')

In [31]: people
Out[31]: ['Jake', 'Travis']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;deleting-list-elements&quot;&gt;Deleting list elements&lt;/h4&gt;
&lt;p&gt;Deleting list elements can be done by either value of the element, or using its index, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [138]: a = [1,2,3,1,2,3]

In [139]: a.remove(1)   # remove the first element correponding to value of 1.

In [140]: a
Out[140]: [2, 3, 1, 2, 3]

In [141]: a.remove(1)   # remove the first element correponding to value of 1.

In [142]: a
Out[142]: [2, 3, 2, 3]

In [143]: del a[0:3:2]      # delete element indices 0, 2

In [144]: a
Out[144]: [3, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;concatenating-a-list-of-strings&quot;&gt;Concatenating a list of strings&lt;/h4&gt;
&lt;p&gt;If a list is all string values, you can use the following string method &lt;code&gt;.join()&lt;/code&gt; to concatenate the content og the list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [155]: mylist = ['The' , 'weather' , 'is' , 'rainy' , 'today' , 'and' , 'cold' , 'only' , '22' , 'F.']

In [156]: &quot; &quot;.join(mylist)
Out[156]: 'The weather is rainy today and cold only 22 F.'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tuple-variables&quot;&gt;Tuple variables&lt;/h3&gt;
&lt;p&gt;Tuples are a type of Python variables very similar to list sequences, except that they are &lt;strong&gt;immutable&lt;/strong&gt;, meaning that, once generated, they cannot be changed. Another difference is that, tuples use parentheses for definition, whereas lists use square brackets.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [33]: emptyTuple = ()

In [34]: single_element_tuple = (1,)  # ATTN: note the comma after the element

In [35]: tuple1 = (1, 2, 3, 'amir', 'Jake')

In [36]: single_element_tuple
Out[36]: (1,)

In [37]: type(single_element_tuple)
Out[37]: tuple

In [38]: single_element_tuple = (1)

In [39]: single_element_tuple
Out[39]: 1

In [40]: type(single_element_tuple)
Out[40]: int
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Creating a tuple is as simple as putting different comma-separated values. Optionally you can put these comma-separated values between parentheses also.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [46]: tuple2 = 1,2,3,4   # another way of creating a tuple

In [47]: type(tuple2)
Out[47]: tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;modifying-the-content-of-tuples&quot;&gt;Modifying the content of Tuples&lt;/h4&gt;
&lt;p&gt;Tuples are an example of data structure in Python, used for organizing and grouping data. Once a tuple is created, its content cannot be changed or manipulated anymore. However, its elements can be called just like lists.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [48]: tuple2[0]
Out[48]: 1

In [49]: tuple2[1:3]
Out[49]: (2, 3)

In [50]: tuple2.    # press tab key to get the list methods
tuple2.count tuple2.index

In [51]: tuple2.count(2) # count the number of members that are 2
Out[51]: 1

In [52]: tuple2.count(5) # count the number of members that are 5
Out[52]: 0

In [53]: tuple2.index(2) # get the index of the first member in tuple that is 2
Out[53]: 1

In [54]: tuple2.index(5) # get the index of the first member in tuple that is 5. (error! 5 is not a member)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&amp;lt;ipython-input-54-f0077f9af98b&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 tuple2.index(5)

ValueError: tuple.index(x): x not in tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Moreover, although the content of tuple cannot be changed, there is nothing to prevent the programmer from redefining the tuple with new content,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [106]: tuple1 = (1, 2, 3, 'amir', 'Jake')

In [107]: tuple1
Out[107]: (1, 2, 3, 'amir', 'Jake')

In [108]: tuple1 = ('Travis','Caleb','Lucero') + tuple1[-1:]    # redefining tuple1

In [109]: tuple1
Out[109]: ('Travis', 'Caleb', 'Lucero', 'Jake')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But pay attention that the above, all the terms in the assigment must be a tuple, otherwise you will get an error like the following (e.g., a single member of a tuple, is not a tuple by itself),&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [110]: tuple1 = (1, 2, 3, 'amir', 'Jake')

In [111]: tuple1 = ('Travis','Caleb','Lucero') + tuple1[-1] # Note that tuple1[-1] is a string, and not a tuple!
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-111-4c6018fb7529&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 tuple1 = ('Travis','Caleb','Lucero') + tuple1[-1]

TypeError: can only concatenate tuple (not &quot;str&quot;) to tuple

In [112]: type(tuple1[-1])
Out[112]: str

In [113]: type(tuple1[-1:])
Out[113]: tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note also the difference between &lt;code&gt;+&lt;/code&gt; operations in the above tuple redefinition, and &lt;code&gt;,&lt;/code&gt; operations below,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [126]: tuple1 = (1, 2, 3, 'amir', 'Jake')

In [127]: tuple1 = ('Travis','Caleb','Lucero') + tuple1[-1:]

In [128]: tuple1
Out[128]: ('Travis', 'Caleb', 'Lucero', 'Jake')

In [129]: tuple1 = (1, 2, 3, 'amir', 'Jake')

In [130]: tuple1 = ('Travis','Caleb','Lucero') , tuple1[-1:]

In [131]: tuple1
Out[131]: (('Travis', 'Caleb', 'Lucero'), ('Jake',))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Tuples can be &lt;strong&gt;heterogeneous&lt;/strong&gt;, as in the above example, meaning that each member of tuple can be a tuple itself, a list, or any other variable type.&lt;/p&gt;

&lt;h3 id=&quot;dictionary-variables&quot;&gt;Dictionary variables&lt;/h3&gt;
&lt;p&gt;The past three data types discussed in the previous secitons — strings, lists, and tuples — are of type &lt;strong&gt;sequence&lt;/strong&gt;. For sequences, we have seen above that we use integers as indices to access the values these variables contain. Dictionaries are yet another built-in variable type in Python. A dictionary variable is a sequence of pairs of {key: value}. Instead of using numbers to index elements (as in list, string, tuple), dictionaries use keys in order to retrieve the key’s value.  The keys can be any immutable type (string, number and tuple). Values can be any type (heterogeneous, mutable), just like the elements of a list or tuple. Dictionaries are also called &lt;strong&gt;associative arrays&lt;/strong&gt; since they associate a key with a value. One way to create a dictionary is to start with the empty dictionary and add &lt;code&gt;key:value&lt;/code&gt; pairs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [161]: age = {}   # empty dictionary

In [162]: age
Out[162]: {}

In [163]: type(age)
Out[163]: dict

In [164]: age = { 'amir':120 , 'jake':22 , 'Lucero':19 , 'Travis':20 }

In [165]: age
Out[165]: {'Lucero': 19, 'Travis': 20, 'amir': 120, 'jake': 22}

In [166]: age['Lucero']
Out[166]: 19
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Some important features of dictionaries are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A dictionary is a collection of key-value pairs.&lt;/li&gt;
  &lt;li&gt;A dictionary is a set of key:value pairs.&lt;/li&gt;
  &lt;li&gt;All keys in a dictionary must be unique.&lt;/li&gt;
  &lt;li&gt;In a dictionary, a key and its value are separated by a colon (:).&lt;/li&gt;
  &lt;li&gt;Each key-value pair is separated by a comma from another pair in dictionary.&lt;/li&gt;
  &lt;li&gt;All the key-value pairs together are listed between curly brackets &lt;code&gt;{ }&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Query the dictionary using square brackets &lt;code&gt;[ ]&lt;/code&gt;, inside of which you type the key, and the output will be the value correponding to the key.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;three-ways-of-constructing-distionaries&quot;&gt;Three ways of constructing distionaries&lt;/h4&gt;
&lt;p&gt;The are three basic ways for creating dictionaries in Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Create empty dictionary and then add key-value pairs to it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: dic = {}

In [2]: dic['amir'] = 'teacher'

In [3]: dic
Out[3]: {'amir': 'teacher'}

In [4]: dic['Jake'] = 'student'

In [5]: dic['Travis'] = 'student'

In [6]: dic
Out[6]: {'Jake': 'student', 'Travis': 'student', 'amir': 'teacher'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; Create a dictionary from a list if tuples, using Python’s built-in function &lt;code&gt;dict()&lt;/code&gt;. The input argument of &lt;code&gt;dict()&lt;/code&gt; is &lt;strong&gt;a list of tuples&lt;/strong&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [7]: month = dict( [ ( 1 , 'Jan') \
   ...:               , ( 2 , 'Feb') \
   ...:               , ( 3 , 'Mar') \
   ...:               , ( 4 , 'Apr') \
   ...:               , ( 5 , 'May') \
   ...:               , ( 6 , 'Jun') \
   ...:               , ( 7 , 'Jul') \
   ...:               , ( 8 , 'Aug') \
   ...:               , ( 9 , 'Sep') \
   ...:               , (10 , 'Oct') \
   ...:               , (11 , 'Nov') \
   ...:               , (12 , 'Dec') ] )

In [8]: month
Out[8]:
{1: 'Jan',
 2: 'Feb',
 3: 'Mar',
 4: 'Apr',
 5: 'May',
 6: 'Jun',
 7: 'Jul',
 8: 'Aug',
 9: 'Sep',
 10: 'Oct',
 11: 'Nov',
 12: 'Dec'}

In [9]: month[5]
Out[9]: 'May'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But, be careful to not override the Python’s function &lt;code&gt;dict()&lt;/code&gt; by your user-defined variable or function of the same name, otherwise you will get an error like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [10]: dict = 5

In [11]: new_dic = dict([('amir','teacher')])   # This will give error because dict is not pointing to the built-in function dict() anymore! It was overridden by the above assignment.
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-10-271a21fe772b&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 new_dic = dict([('amir','teacher')])

TypeError: 'int' object is not callable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; Create a dictionary from two lists in parallel. Let’s say the keys and values of our desired dictionary, each are in the form of a list. The question is now, if there is an easy Pythonic way to combine these two lists of keys and values to get a dictionary? The answer is yes, and it is achieved by a Python function named &lt;a href=&quot;https://docs.python.org/2/library/functions.html#zip&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;zip()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: person = ['amir','jake','travis']

In [2]: role = ['teacher','student','student']

In [3]: person_role_dict = dict( zip( person , role ) )

In [4]: type(person_role_dict)
Out[4]: dict

In [5]: person_role_dict
Out[5]: {'amir': 'teacher', 'jake': 'student', 'travis': 'student'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;manipulating-dictionary-variables&quot;&gt;Manipulating dictionary variables&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. Removing a dictionary key-value pair&lt;/strong&gt;&lt;br /&gt;
This can be done using Python’s &lt;code&gt;del&lt;/code&gt; command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [10]: person_role_dict
Out[10]: {'amir': 'teacher', 'jake': 'student', 'travis': 'student'}

In [11]: del person_role_dict['amir']

In [12]: person_role_dict
Out[12]: {'jake': 'student', 'travis': 'student'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;2. Adding a dictionary key&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [14]: person_role_dict
Out[14]: {'jake': 'student', 'travis': 'student'}

In [15]: person_role_dict['amir'] = 'teacher'  # adding a new key-value pair ('amir' : 'teacher')

In [16]: person_role_dict
Out[16]: {'amir': 'teacher', 'jake': 'student', 'travis': 'student'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;2. Changing the value of a key&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [17]: person_role_dict['amir'] = 'instructor' # changing the value of the key 'amir'

In [18]: person_role_dict
Out[18]: {'amir': 'instructor', 'jake': 'student', 'travis': 'student'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;3. Getting the length of dictionary (number of key-value pairs)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [19]: len(person_role_dict)
Out[19]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;4. Using dictionary methods&lt;/strong&gt;&lt;br /&gt;
Just as with other Python variable types, typing the name of a dictionary that is already defined, followed by &lt;code&gt;.&lt;/code&gt; followed by pressing the &lt;code&gt;tab&lt;/code&gt; key (in a good Python editor) will show you the list of methods that can act on the dictionary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [20]: person_role_dict.
                           person_role_dict.clear      person_role_dict.get        person_role_dict.pop        person_role_dict.update
                           person_role_dict.copy       person_role_dict.items      person_role_dict.popitem    person_role_dict.values
                           person_role_dict.fromkeys   person_role_dict.keys       person_role_dict.setdefault

In [20]: person_role_dict.keys()
Out[20]: dict_keys(['amir', 'jake', 'travis'])

In [21]: list ( person_role_dict.keys() )
Out[21]: ['amir', 'jake', 'travis']

In [22]: type ( person_role_dict.keys() )
Out[22]: dict_keys

In [23]: type ( list ( person_role_dict.keys() ) )
Out[23]: list

In [24]: person_role_dict.values()
Out[24]: dict_values(['instructor', 'student', 'student'])

In [10]: person_role_dict
Out[10]: {'amir': 'teacher', 'jake': 'student', 'travis': 'student'}

In [27]: person_role_dict.pop('amir')  # remove the key-value pair ('amir':'teacher') and return the corresponding value of the key as output.
Out[27]: 'instructor'

In [28]: person_role_dict
Out[28]: {'jake': 'student', 'travis': 'student'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dictionary-representation-of-sparse-matrices&quot;&gt;Dictionary representation of sparse matrices&lt;/h4&gt;
&lt;p&gt;We already discussed in the above, the usefulness of nested lists in creating matrices. Now suppose we have a sparse matrix, whose most elements are zero, except a few non-zero elements. An alternative to using nested lists, which can also take less memory of the device, is to use a dictionary representation of the sparse matrix.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: sparseMatrixList = [ [ 0 , 0 , 0 , 1 ]
   ....:                    , [ 2 , 0 , 0 , 0 ]
   ....:                    , [ 0 , 5 , 0 , 0 ]
   ....:                    , [ 0 , 0 , 0 , 3 ]
   ....:                    , [ 0 , 0 , 8 , 0 ]
   ....:                    ]

In [17]: sparseMatrixList
Out[17]: [[0, 0, 0, 1], [2, 0, 0, 0], [0, 5, 0, 0], [0, 0, 0, 3], [0, 0, 8, 0]]

In [18]: sparseMatrixDict = { (0,3): 1 , (1,0): 2 , (2,1): 5 , (3,3): 3 , (4,2): 8 }

In [19]: sparseMatrixDict
Out[19]: {(0, 3): 1, (1, 0): 2, (2, 1): 5, (3, 3): 3, (4, 2): 8}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;set-variables&quot;&gt;Set variables&lt;/h3&gt;
&lt;p&gt;Besides all the aforementioned variable types in Python, there is another Python variable type that is useful for constructing and manipulating &lt;strong&gt;unordered collection of unique elements&lt;/strong&gt;. Common uses of sets include &lt;strong&gt;membership testing&lt;/strong&gt;, &lt;strong&gt;removing duplicates from a sequence&lt;/strong&gt;, and &lt;strong&gt;computing standard math operations on sets&lt;/strong&gt; such as intersection, union, difference, and symmetric difference.&lt;/p&gt;

&lt;p&gt;Like other collections, sets support &lt;code&gt;x in set&lt;/code&gt; and &lt;code&gt;len(set)&lt;/code&gt; operations. Being an unordered collection, &lt;strong&gt;sets do not record element position or order of insertion&lt;/strong&gt;. Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.&lt;/p&gt;

&lt;p&gt;There are currently &lt;strong&gt;two built-in set types&lt;/strong&gt;, &lt;strong&gt;set&lt;/strong&gt; and &lt;strong&gt;frozenset&lt;/strong&gt;. The set type is mutable — the contents can be changed using methods like add() and remove().&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [61]: a = set( [ 1,2,3,(1,2),'amir' ] )

In [62]: a.
a.add                         a.difference                  a.intersection                a.issubset                    a.remove                      a.union
a.clear                       a.difference_update           a.intersection_update         a.issuperset                  a.symmetric_difference        a.update
a.copy                        a.discard                     a.isdisjoint                  a.pop                         a.symmetric_difference_update

In [62]: a.add('jake')

In [63]: a
Out[63]: {(1, 2), 1, 2, 3, 'jake', 'amir'}

In [64]: a.add([1,3])   # Note that mutable types cannot appear in a set!
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-64-2a5b54498213&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 a.add([1,3])

TypeError: unhashable type: 'list'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Sets can be also simply created by &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [71]: a = {1,2,3}

In [72]: type(a)
Out[72]: set
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;strong&gt;frozenset type&lt;/strong&gt; is &lt;strong&gt;immutable&lt;/strong&gt; and &lt;strong&gt;hashable&lt;/strong&gt; (i.e., its contents cannot be altered after it is created). It can therefore be used as a dictionary key or as an element of another set.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [69]: a = frozenset( [ 1,2,3,(1,2),'amir' ] )

In [70]: a.
a.copy                 a.intersection         a.issubset             a.symmetric_difference
a.difference           a.isdisjoint           a.issuperset           a.union

In [70]: type(a)
Out[70]: frozenset
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Note&lt;/strong&gt; that mutable types can neither appear in a set nor a frozenset. You can obtain more information about sets and frozensets and the methods that can act on them in the &lt;a href=&quot;https://docs.python.org/2.4/lib/types-set.html&quot; target=&quot;_blank&quot;&gt;Python library reference&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;assignment-statements-in-python&quot;&gt;Assignment statements in Python&lt;/h2&gt;

&lt;p&gt;In Python, an assignment statement is one line of Python code that contains &lt;strong&gt;at least&lt;/strong&gt; one equal sign &lt;code&gt;=&lt;/code&gt; and the purpose of it is to associate name(s) with a certain value in the program. &lt;strong&gt;Assignment statements are the only Python statements that do not start with a keyword&lt;/strong&gt;. In most cases, the assignment statement will only contain one target name, one equal sign, and one expression (reduced to one single value that is assigned to the name).&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;binding&lt;/strong&gt; is an association between a name and a value. Note that in Python, unlike many other languages, &lt;strong&gt;names themselves are not associated with a specific variable types&lt;/strong&gt;. A name is just a label, and therefore it can be bound to any value of any type at any time. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [50]: a = 'some text'

In [51]: a
Out[51]: 'some text'

In [52]: a = 2

In [53]: a
Out[53]: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;aliasing-vs-copying&quot;&gt;Aliasing vs. copying&lt;/h3&gt;
&lt;p&gt;It is very important to understand the difference between &lt;strong&gt;alias&lt;/strong&gt; assignment statements and &lt;strong&gt;copy&lt;/strong&gt; assignment statements. As far as assignments are concerned, all data types in Python can be divided into two categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;simple data types (e.g., int, float, string, tuple)&lt;/li&gt;
  &lt;li&gt;container data types (e.g., list, dict, set, …)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For &lt;strong&gt;simple data types&lt;/strong&gt;, an assignment means that their value is &lt;strong&gt;copied&lt;/strong&gt; to the assigned variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [80]: x = 1

In [81]: y = x   # An assignment statement that copies the value of x into y.

In [82]: x = 2   # Now changing the value of x, won't change the value of y.

In [83]: x
Out[83]: 2

In [84]: y
Out[84]: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;container data types&lt;/strong&gt;, an assignment in the form of copy can be computationally and memory-wise very expensive, and so it makes sense, when an assignment involves container types as values, then the new name would only &lt;strong&gt;point&lt;/strong&gt; to the original container. In other words, the new assignment provides an &lt;strong&gt;alias&lt;/strong&gt; for the container value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [85]: a = [1,2,3]

In [86]: b = a      # In this assignment, b is simply an alias for a. The value of a is NOT copied into b

In [87]: a
Out[87]: [1, 2, 3]

In [88]: b
Out[88]: [1, 2, 3]

In [89]: a is b     # a and b have the same identity
Out[89]: True

In [90]: a == b     # a and b have the same value
Out[90]: True

In [91]: a = [1,2,3]

In [92]: b = [1,2,3]

In [93]: a is b     # a and b don't have the same identity anymore, since they are not pointing to the same value anymore.
Out[93]: False

In [94]: a == b     # Despite not being identical, a and b still have the same value.
Out[94]: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you want to get a copy of a container object, instead of an alias for it, you should use the &lt;code&gt;copy&lt;/code&gt; method of the container object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [97]: a = [1,2,3]

In [98]: b = a.copy()   # Copy the content of a into b

In [99]: a is b
Out[99]: False

In [100]: a == b
Out[100]: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;b&gt;Conclusion:&lt;/b&gt;&lt;br /&gt;
So, keep in mind that, assignments in which the value to be assigned is a container type (e.g., list, dict, set) will result in an alias, and not a fresh copy of the original value.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;multiple-simultaneous-assignments-in-one-line&quot;&gt;Multiple simultaneous assignments in one line&lt;/h3&gt;
&lt;p&gt;A shortcut way of aliasing multiple variables with one single value is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [101]: a = b = c = 3

In [102]: a is b
Out[102]: True

In [103]: a is b is c
Out[103]: True

In [104]: a == b == c
Out[104]: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. This is also true for container variable types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [105]: a = b = c = [1,2,3]

In [106]: a is b is c
Out[106]: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also assign multiple objects to multiple variables all in the same asignment statement. But keep in mind that the number of assignments on both sides of equal sign must be equal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: a, b, c = 1, 2, &quot;amir&quot;

In [2]: a
Out[2]: 1

In [3]: b
Out[3]: 2

In [4]: c
Out[4]: 'amir'
&amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, two integer objects with values 1 and 2 are assigned to variables a and b respectively, and one string object with the value “amir” is assigned to the variable c. This form of assignment in the above is basically like setting the tuple &lt;code&gt;(a,b,c) = (1,2,&quot;amir&quot;)&lt;/code&gt;. This is why it is important that both sides of the equal sign have the same number of elements. Here are some other examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [5]: a, b, c = 3, 3, 3

In [6]: a is b
Out[6]: True

In [7]: a == b
Out[7]: True

In [57]: [ a , b ] = [ 5 , 4 ]

In [58]: a
Out[58]: 5

In [59]: [ a , b ] = ( 5 , 4 )

In [60]: a
Out[60]: 5

In [61]: [a,b] = [c,d] = [4,5]

In [62]: a is b
Out[62]: False

In [63]: a is c
Out[63]: True

In [64]: [a,b] is [c,d]
Out[64]: False

In [65]: [a,b] is [4,5]
Out[65]: False

In [66]: [a,b] == [c,d]
Out[66]: True

In [67]: [a,b] == [4,5]
Out[67]: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;value-swapping&quot;&gt;Value swapping&lt;/h3&gt;
&lt;p&gt;The traditional way of swapping values of two variables in mostprogramming languages is like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [68]: a = 5

In [69]: b = 7

In [70]: _ = a

In [71]: a = b

In [72]: b = _

In [73]: a
Out[73]: 7

In [74]: b
Out[74]: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
With either Python lists or tuples, this swapping can be achived neatly in just one line of code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [75]: (a,b) = (b,a)

In [76]: a
Out[76]: 5

In [77]: b
Out[77]: 7

In [78]: [a,b] = [b,a]

In [79]: a
Out[79]: 7

In [80]: b
Out[80]: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/5-python-variables-assignments&quot;&gt;Lecture 5: Python - variables and assignment statements&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on March 01, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 4: Python - values, variables, and types]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/4-python-values-variables-types"/>
  <id>http:/ECL2017S/lecture/4-python-values-variables-types</id>
  <published>2017-02-22T00:00:00-06:00</published>
  <updated>2017-02-22T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at guiding you to understand the how to of programming, difference between programming languages and the natural languages, the type of programming errors and the meaning code debugging how to perform simple arithmetic operations on the Python command line. Throughout this course, I recommend you to use Jupyter for Python programming.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;glossary&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;programming-glossary&quot;&gt;Programming glossary&lt;/h2&gt;
&lt;p&gt;The following table contains some technical programming phrases that are often used and heard in the field of computer science and programming, that you need to be familiar as well.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. Some programming phrases that are discussed in this lecture. The boldface words in the description column indicate items that are expressions with their own description in this table.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;algorithm&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A general method for solving a class of problems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;bug&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error in &lt;b&gt;program&lt;/b&gt; that has to be resolved for successful execution of the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiled language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose programs need to be compiled by a &lt;b&gt;compiler&lt;/b&gt; in order to run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiler&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A software that translates an entire high-level program into a lower-level language to make it &lt;b&gt;executable&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;debugging&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of finding and removing any type of error in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;exception&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An alternative name for &lt;b&gt;runtime error&lt;/b&gt; in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;executable&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An &lt;b&gt;object code&lt;/b&gt;, ready to be executed. Generally has the file extension &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.out&lt;/code&gt; or no extension at all.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;formal language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that is intentionally designed for specific purposes, which, unlike &lt;b&gt;natural languages&lt;/b&gt;, follows a strict standard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;high-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language (e.g., Python, Fortran, Java, etc) that has high level of abstraction from the underlying hardware.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;interpreted language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose statements are interpreted line-by-line by an &lt;b&gt;interpreter&lt;/b&gt; and immediately executed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;low-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language that has a low-level of abstraction from computer hardware and architecture, such as Assembly. Very close to machine code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;natural language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that evolves naturally, and has looser &lt;b&gt;syntax&lt;/b&gt; rules and standard compared to &lt;b&gt;formal languages&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;object code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The output of a compiler after translating a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;parsing&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;Reading and examining a file/program and analyzing the syntactic structure of the file/program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;portability&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program's ability to be exucatable on more than one kind of computer architecture, without changing the code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;problem solving&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of formulating a problem and finding and expressing a solution to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;program&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A set of instructions in a that together specify an algorithm a computation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;runtime error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error that does not arise and cause the program to stop, until the program has started to execute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;script&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in an &lt;b&gt;interpreted language&lt;/b&gt; stored in a file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantic error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in a program that makes the program do something other than what was intended. Catching these errors can be very tricky.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantics&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The meaning of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;source code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in a high-level compiled language, before being compiled by the &lt;b&gt;compiler&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in program that violates the standard &lt;b&gt;syntax&lt;/b&gt; of the programming language, and hence, the program cannot be interpreted or compiled until the syntax error is resolved.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The structure of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;token&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;One of the basic elements of the syntactic structure of a program, in analogy with &lt;i&gt;word&lt;/i&gt; in a &lt;b&gt;natural language&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;program-content&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-content-of-a-computer-program&quot;&gt;The content of a computer program&lt;/h2&gt;
&lt;p&gt;Although different programming languages look different in their syntax standards, virtually all programming languages are comprised of the following major compnents (instructions):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;input&lt;/strong&gt;&lt;br /&gt;
  Virtually every program starts with some input data by the user, or the input data that is &lt;a href=&quot;https://en.wikipedia.org/wiki/Hard_coding&quot; target=&quot;_blank&quot;&gt;hard-coded&lt;/a&gt; in the program.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mathematical/logical operations&lt;/strong&gt;&lt;br /&gt;
  Virtually all programs involve some sort of mathemtical or logical operations on the input data to the program.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;conditional execution&lt;/strong&gt;&lt;br /&gt;
  In order to perform the above operations on data, most often (but not always) there is a need to chack if some conditions are met in the program, and then perform specific programming instructions corresponding to each of the conditions.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;repetition / looping&lt;/strong&gt;&lt;br /&gt;
  Frequently it is needed to perform a specific set of operations repeatedly in the program to achive the program’s goal.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;br /&gt;
  At the end of the program, it is always needed to output the program result, either to computer screen, or to a file.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;program-debugging&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;debugging-a-program&quot;&gt;Debugging a program&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
As it is obvious from its name, a &lt;strong&gt;bug&lt;/strong&gt; in a computer program is annoying programming error that needs fixing in order for the program to become executable &lt;strong&gt;or&lt;/strong&gt; to give out the correct answer. The process of removing program bugs is called debugging. There are basically three types of programming bugs (errors):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;syntax error&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
A program, wether interpreted or compiled, can be succesfully run only if it is &lt;em&gt;syntactically correct&lt;/em&gt;. Syntax errors are related to the structure and standard of the language, and the order by which the language &lt;strong&gt;tokens&lt;/strong&gt; are allowed to appear in the code. For example, the following Python &lt;code&gt;print&lt;/code&gt; statement is a syntax error in Python 3 standard, whereas it was considered to be the correct syntax for &lt;code&gt;print&lt;/code&gt; in Python 2 standard.&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [21]: print 'Hello World!'
  File &quot;&amp;lt;ipython-input-21-10fdc521e430&amp;gt;&quot;, line 1
 print 'Hello World!'
                    ^
SyntaxError: Missing parentheses in call to 'print'
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
The syntactically correct usage of &lt;code&gt;print&lt;/code&gt; in Python 3 would be,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [22]: print ('Hello World!')  
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;runtime error&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
Runtime errors or sometimes also named &lt;strong&gt;exceptions&lt;/strong&gt; are a class of programming errors that can be detected only at the time of running the code, that is, they are not syntax errors. Examples include:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;memory leaks (very common error in beginner C and C++ codes)&lt;/li&gt;
      &lt;li&gt;uninitialized memory&lt;/li&gt;
      &lt;li&gt;access request to illigal memory address of the computer&lt;/li&gt;
      &lt;li&gt;security attack vulnerabilities&lt;/li&gt;
      &lt;li&gt;buffer overflow
&lt;br /&gt;
These errors can be sometimes tricky to identify.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;semantic error&lt;/strong&gt;
&lt;br /&gt;
Unlike syntax errors that comprise of something the compiler/interpreter does not understand, semantic errors do not cause any compiler/interpreter error messages. However, the resulting compiled/interpreted code will NOT do what it is intended to do. Semantic errors are the most dangerous types of programming errors, as they do not raise any error flag by the compiler/interpreter, yet the program will not do what it is intended to do, although the code may look perfectly fine on its face. Semantic error is almost synonymous with &lt;strong&gt;logical error&lt;/strong&gt;. Dividing two integers using the regular division operator &lt;code&gt;/&lt;/code&gt; in Python 2 and expecting the result to be real, would result in a semantic error. This is because in Python 2 standard, the regular division operator is equivalent to &lt;strong&gt;integer division&lt;/strong&gt; for integer operands:&lt;br /&gt;
&lt;br /&gt;
In Python 2,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [23]: 2/7
Out[23]: 0
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
Whereas, you might have really meant a &lt;strong&gt;float division&lt;/strong&gt; by using &lt;code&gt;/&lt;/code&gt;, as in Python 3,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [24]: 2/7
Out[24]: 0.2857142857142857
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;first-python-program&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-first-python-program&quot;&gt;The first Python program&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
The traditional first program in Python language has the following form.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [25]: print ('Hello World!')  
Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;ways-to-run-python-program&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;methods-of-running-a-python-program&quot;&gt;Methods of running a Python program&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Running Python code on the Python interpreter’s command prompt:&lt;/strong&gt;&lt;br /&gt;
Now, as you may have noticed, in the above example, I used IPython command line to code my first simple Python program. This is one of the simplest and quickest method of Python coding and is actually very useful for testing small simple Python ideas and code snippets on-the-fly.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running Python code inside a Python file Python from the Bash command line:&lt;/strong&gt;&lt;br /&gt;
As the program size grows, it wiser to put all of your Python script into a single file, and then let the Python interpreter run (i.e., interpret) your entire file all at once. To save the above simple “Hello World” Python code in a file and run it, open a Bash command prompt, then use the Bash &lt;code&gt;cat&lt;/code&gt; command to create and add the Python command to your Python file as in the following (On Windows devices, you can use the Git command prompt).&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Amir@CCBB-Amir MINGW64 ~
$ cat &amp;gt;&amp;gt; firstPythonCode.py &amp;lt;&amp;lt; EOF
print ('Hello World!')
EOF
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
Then you can use call python interpreter from the Bash command line to execute your Python code.&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python firstPythonCode.py
python firstPythonCode.py
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running Python code inside a Python file from the Bash command line as an standalone executable:&lt;/strong&gt;&lt;br /&gt;
You can also avoid typing the name of the interpreter (&lt;code&gt;python&lt;/code&gt;) in order to run your code by adding the following &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot; target=&quot;_blank&quot;&gt;shebang&lt;/a&gt; at the top of your Python script, like the following.&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat &amp;gt;&amp;gt; firstPythonCodeWithShebang.py &amp;lt;&amp;lt; EOF
#!/usr/bin/env python
print ('Hello World!')
print ('This is a Python script with Shebang!')
EOF
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
The result is that now you can run your Python script without the interpreter’s name, as an executable file:&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./firstPythonCodeWithShebang.py
Hello World!
This is a Python script with Shebang!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
Note that &lt;em&gt;shebang&lt;/em&gt; directive only works under Unix/Linux operating systems and command prompts (not windows). When a Python script with a shebang is run as a program, the program loader parses the rest of the script’s initial line as an interpreter directive. The specified interpreter program is run instead, passing to it as an argument the path that was initially used when attempting to run the script.&lt;br /&gt;
&lt;br /&gt;
On the other hand, if you try to run your original code (without Shebang) as an executable without Python interpreter name, you will get an error message like the following,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Amir@CCBB-Amir MINGW64 ~
$ ./firstPythonCode.py
./firstPythonCode.py: line 1: syntax error near unexpected token `'Hello World!''
./firstPythonCode.py: line 1: `print ('Hello World!')'
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running Python code inside a Python file by first compiling it to bytecode from the command line:&lt;/strong&gt;&lt;br /&gt;
You can also compile your Python script into a bytecode. This is however, a topic of a future lecture.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;python-as-simple-calculator&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;python-interpreter-as-a-simple-calculator&quot;&gt;Python interpreter as a simple calculator&lt;/h2&gt;
&lt;p&gt;One of the greatest advantages of Python is that it can be used as a simple calculator and program interpreter on-the-fly, just like MATLAB, Mathematica, R, and other scripting languages. In the following, you will see why and how.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;python-values-types&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;values-and-their-types-in-python&quot;&gt;Values and their types in Python&lt;/h3&gt;
&lt;p&gt;Values are one of the most fundamental entities in programming. Like any other language, a value in Python can be of  different types, most importantly &lt;strong&gt;Numeric&lt;/strong&gt; (plain integer, long integer, float (real number), complex), &lt;strong&gt;Boolean&lt;/strong&gt; (logical) which is a subtype of Numeric, or &lt;strong&gt;String&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The following are a few example arithmetic operations with values in Python. You can perform very simple arithmetic on the Python command line, and the result immediately by pressing &lt;code&gt;enter&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2 + 5 # Just typing some comment on the Python command line. Anything after # is a comment and will be ignored.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2 - 7 # difference
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;-5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2 * 7 # product
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-values-types-function&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;obtaining-the-type-of-a-value&quot;&gt;Obtaining the type of a value&lt;/h4&gt;

&lt;p&gt;You can use the Python’s built-in function &lt;code&gt;type&lt;/code&gt; to get the type of a value in Python (Of course, this is somewhat obvious and redundant for a value as we already readily know the type of a value).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(2*7) # type function gives you the type of the input object to function &quot;type&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;int ```python type('This is a Python string') # a string value in Python ```
str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(&quot;This is a Python string&quot;) # you can also use quotation marks for representing string values, but keep in mind to be consistent!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(True) # type of a boolean True value
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;bool
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(True) # type of a boolean False value
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-values-types-coercion&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;value-coercion-in-python&quot;&gt;Value coercion in Python&lt;/h4&gt;
&lt;p&gt;Value coercion is the &lt;strong&gt;implicit&lt;/strong&gt; process by which a the Python interpreter/compiler automatically converts a value of one type into a value of another type when that second type is required by the surrounding context. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2.0 * 7 # Note that the product of float and integer, is coerced into a float.
type(2.*7)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;14.0
float
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2 / 7 # floating point division (in Python 3!).
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.2857142857142857
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;ATTENTION: Python 2 Alert!&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    In Python 2, the above division would give you 0, that is, in Python 2, the division operator performs an &lt;i&gt;integer division&lt;/i&gt;  for two input integer operands. I recommend you to always coerce the result into float (if float is what you demand) by adding a decimal point to one of the operands in your operation.
&lt;/blockquote&gt;

&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;ATTENTION: Python 2 Alert!&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        In Python 2, the above division would give you 0, that is, in Python 2, the division operator performs an &lt;i&gt;integer division&lt;/i&gt; for two input integer operands.
        &lt;br&gt;&lt;br&gt;
        &lt;b&gt;
        I recommend you to always coerce the result into float (if float is what you demand) by adding a decimal point to one of the operands in your operation.
        &lt;/b&gt;
    &lt;/div&gt;
&lt;/div&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2.0 / 7 # Also floating point division
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.2857142857142857
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2 // 7 #  integer division, or floor division
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2.0 // 7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;12 // 7 #  another integer division, or floor division
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;12.0 // 7 #  Also a integer division, or floor division, BUT NOTE THAT the output is now a real number 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;&lt;strong&gt;Summary of difference in division between Python 2 and Python 3:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
Note that there is a difference between Python 2 and 3 for &lt;strong&gt;integer division&lt;/strong&gt;.&lt;/p&gt;

&lt;h5 id=&quot;python-2&quot;&gt;Python 2&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;input:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print 'Python', python_version()
print '3 / 2 =', 3 / 2
print '3 // 2 =', 3 // 2
print '3 / 2.0 =', 3 / 2.0
print '3 // 2.0 =', 3 // 2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;output:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Python 2.7.6
3 / 2 = 1
3 // 2 = 1
3 / 2.0 = 1.5
3 // 2.0 = 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;python-3&quot;&gt;Python 3&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;input:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('Python', python_version())
print('3 / 2 =', 3 / 2)
print('3 // 2 =', 3 // 2)
print('3 / 2.0 =', 3 / 2.0)
print('3 // 2.0 =', 3 // 2.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;output:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Python 3.5.2
3 / 2 = 1.5
3 // 2 = 1
3 / 2.0 = 1.5
3 // 2.0 = 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words, in &lt;strong&gt;Python 3&lt;/strong&gt;, 3 / 2  performs a &lt;strong&gt;floating point division&lt;/strong&gt;, whereas in &lt;strong&gt;Python 2&lt;/strong&gt;, 3 / 2  performs a &lt;strong&gt;floor division&lt;/strong&gt;, also called &lt;strong&gt;integer division&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    If you want to get the Python version you are using, use the following commands. The first command imports from the Python &lt;b&gt;platform&lt;/b&gt; module, the command &lt;b&gt;python_version&lt;/b&gt;. Later on, we will discuss what Python modules are and how and why you should use them.
&lt;/blockquote&gt;

&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;NOTE&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        If you want to get the Python version you are using, use the following commands. The first command imports from the Python &lt;b&gt;platform&lt;/b&gt; module, the command &lt;b&gt;python_version&lt;/b&gt;. Later on, we will discuss what Python modules are and how and why you should use them.
    &lt;/div&gt;
&lt;/div&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from platform import python_version
python_version()

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'3.5.2'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2**7 # This is an exponentiation operation. The notation is taken from Fortran exponentiation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;128
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2.0**7 # This is a float exponentiation.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;128.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2**7.0 # ATTN: Avoid this format, if not necessary.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;128.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;12 % 7  # This is a remainder operation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;12.0 % 7 # Another remainder operation, with its result coerced into float
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-values-types-builtin&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;some-useful-built-in-operationsfunctions-in-python&quot;&gt;Some useful built-in operations/functions in Python&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pow(2,7) # same operation as 2**7. This is the same exponentiation function as in C language.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;128
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pow(2.0,7) # same thing but now the result is coerced into float
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;128.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;abs(-999) # absolute value
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;999
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;int(-999.9) # removes the decmial points and keeps the integer part
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;-999
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;int(999.9) # removes the decmial points and keeps the integer part
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;999
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;complex(-999.9) # complex number with real part -999.9 and no (zero) imaginary part
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(-999.9+0j)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;complex(-999.9, 2) # complex number with real part -999.9 and imaginary part value of 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(-999.9+2j)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;complex(-999.9, 2).conjugate() # the conjugate of the complex number
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(-999.9-2j)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(complex(-999.9, 2).conjugate()) # type function can take complex arguments as input!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;complex
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;divmod(5, 2.0) # gives out the pair (x // y, x % y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(2.0, 1.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(divmod(5, 2.0)) # the type of output from divmod
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-order-of-operation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;order-of-operation-in-python&quot;&gt;Order of operation in Python&lt;/h3&gt;
&lt;p&gt;The order of operation in Python is pretty much the same as in any other sane language: &lt;strong&gt;anything inside Paratheses&lt;/strong&gt; has precendence over &lt;strong&gt;Exponentiation (**)&lt;/strong&gt; has precedence over &lt;strong&gt;Multiplication &amp;amp; Division (/ &amp;amp; *)&lt;/strong&gt; has precedence over &lt;strong&gt;Addition &amp;amp; Subtraction (+ &amp;amp; -)&lt;/strong&gt;. In abbreviation, the rule of operation precendence is &lt;strong&gt;PEMDAS&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print(&quot;3 + 2.0 - 3 * 2 / 3 =&quot;,3 + 2.0 - 3 * 2 / 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3 + 2.0 - 3 * 2 / 3 = 3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-string-operation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;operations-on-string-values-in-python&quot;&gt;Operations on string values in Python&lt;/h4&gt;
&lt;p&gt;You can concatenate strings in Python just like &lt;strong&gt;adding&lt;/strong&gt; numbers together. Also, you can &lt;strong&gt;multiply&lt;/strong&gt; string values by a number, to get mutiple copies of the string value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'Amir ' + 'Shahmoradl ' + 'is my full name!' # You can add strings together just like numbers. This is called string concatenation.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'Amir Shahmoradl is my full name!'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' - 'shahmoradi' # This is meaningless and syntactically invalid in Python
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-6-41f5035ed36a&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 'amir' - 'shahmoradi' # This is meaningless and syntactically invalid in Python


TypeError: unsupported operand type(s) for -: 'str' and 'str'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir ' * 5 + 'is 5 amirs concatenated!' # multiplying string values by some number
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'amir amir amir amir amir is 5 amirs concatenated!'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir ' * 's' # meaningless
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-11-ddce79744de9&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 'amir ' * 'r' # meaningless


TypeError: can't multiply sequence by non-int of type 'str'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' / 's' # also meaningless
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-12-b6e45f1a8ab1&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 'amir' / 's' # also meaningless


TypeError: unsupported operand type(s) for /: 'str' and 'str'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;COOL FEATURE FOR STRING MANIPULATION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Note that string values are like vectors of characters in Python! you can call a specific element of it!  
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;br&gt;
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;COOL FEATURE FOR STRING MANIPULATION&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        Note that string values are like vectors of characters in Python! you can call a specific element of it!  
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[0] # first letter in the string
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'a'
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    In order to count elements from the end of the string, use negative in the index.
&lt;/blockquote&gt;

&lt;!--
&lt;br&gt;
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;NOTE&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        In order to count elements from the end of the string, use negative in the index.
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[-2] # the second letter from the end of the string
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'i'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[-2:-3] # you get nothing because of incorrect indices
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;''
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[-3:-2] # you get something because of correct indices!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'m'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[-3] # this is the same as 'amir'[-3:-2] 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'m'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[-3:] # This outputs the three last letters of the string
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'mir'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amirShahmoradi'[:-3] # This outputs the letters of the string from the beginning up to the fourth letter from the end.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'amirShahmor'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amirShahmoradi'[::-1] # This outputs ALL the letters in the string in reverse, from the end to the beginning.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'idaromhahSrima'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amirShahmoradi'[::-2] # This outputs every other letter in the string in reverse, from the end to the beginning.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'iaohhrm'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amirShahmoradi'[-3:].upper() # This outputs the third last letters of the string
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'ADI'
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;NOTE: List of string manipulation methods&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    To see the full list of powerfull string methods that can manipulate strings, like the above example, see &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#string-methods&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.
&lt;/blockquote&gt;

&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;NOTE: List of string manipulation methods&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        To see the full list of powerfull string methods that can manipulate strings, like the above example, see &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#string-methods&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;p&gt;&lt;a name=&quot;python-boolean-operations&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;boolean-operations-in-python&quot;&gt;Boolean operations in Python&lt;/h4&gt;
&lt;p&gt;As we mentioned before, Boolean types are a subclass of Integers. Boolean operations are essential in branching statements.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;True or False # This is OR logical operation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;True and False # This is AND logical operation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;not True # This is not logical operation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' is 'amir' # object identity comarison
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' is not 'Jake!' # negated object identity
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, to the above operations, there also other more complex Boolean operations in Python, some of which you can study further &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#bitwise-operations-on-integer-types&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;NOTE: Object's identity in Python&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    To get the  identity of an object, use Python's &lt;code&gt;id()&lt;/code&gt; command. &lt;code&gt;id()&lt;/code&gt; is a built-in function in Python 3, which returns the identity of an object. This identity is a unique integer for that object during its lifetime. This unique id is also the address of the object in the device memory. Keep in mind that the object's id might change from one computer to another, from one run to another run.  
&lt;/blockquote&gt;

&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;NOTE: Object's identity in Python&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        To get the  identity of an object, use Python's &lt;code&gt;id()&lt;/code&gt; command. &lt;code&gt;id()&lt;/code&gt; is a built-in function in Python 3, which returns the identity of an object. This identity is a unique integer for that object during its lifetime. This unique id is also the address of the object in the device memory. Keep in mind that the object's id might change from one computer to another, from one run to another run.  
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;id('amir')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;81758280
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;id(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;501744144
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;id(2) == id(3) # equality operation: tests for the same value
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;id(2) != id(3) # inequality operation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;ATTENTION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Be very careful with operations &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;equality&lt;/code&gt; ! These two are not the same! See the examples below.
&lt;/blockquote&gt;

&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;ATTENTION&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        Be very careful with operations `is` and `equality` ! These two are not the same! See the examples below.
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1,1) is (1,1) # Two similar tuples have not the same identifiers in Python! Will soon see what tuples are.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1,1) == (1,1) # Two similar tuples have the same value in Python!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-boolean-operations-string-comparison&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;string-comparison&quot;&gt;String comparison&lt;/h5&gt;
&lt;p&gt;Strings are compared lexicographically using the numeric equivalents in ASCII codes (the result of the built-in Python function &lt;code&gt;ord()&lt;/code&gt; of their characters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' &amp;gt; 'jake' # String comparison. Basically the character ASCII codes are compared here.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' &amp;gt; 'Jake' # 'J' is ahead of 'a' in ASCII characters.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' &amp;gt; 'Amir' # 'A' is ahead of (smaller than) 'a' in ASCII characters.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' &amp;gt; 'amis' # Comaprison is performed is equality for each character holds, until the end is reached.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-values-types-print&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;pythons-print-function&quot;&gt;Python’s print function&lt;/h3&gt;
&lt;p&gt;We have already used print function to create the first Python program. But note also the difference in &lt;code&gt;print&lt;/code&gt; between the two Python versions. In &lt;strong&gt;Python 3&lt;/strong&gt;, &lt;code&gt;print&lt;/code&gt; is a &lt;strong&gt;Python function&lt;/strong&gt;, whereas in &lt;strong&gt;Python 2&lt;/strong&gt;, it is a &lt;strong&gt;Python statement&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('My name is Amir')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;My name is Amir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can use wildcards in Python strings. You can also use double quotes for strings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print(&quot;My name is Amir&quot;,'\n') # You can use wildcards in Python strings. You can also use double quotes for strings.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;My name is Amir 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('My name is Amir','\n'*2,&quot;I do work at \&quot;UT Austin\&quot;.&quot;) 
print('''
You can multiply strings by integer! \n
Note how I used wildcards for quotation marks around &quot;UT Austin&quot; in my previous print function, in order to be consistent with Python syntax.

Did you also notice how I am creating a multi-line Python string right now?!
''')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;My name is Amir 

 I do work at &quot;UT Austin&quot;.

You can multiply strings by integer! 

Note how I used wildcards for quotation marks around &quot;UT Austin&quot; in my previous print function, in order to be consistent with Python syntax.

Did you also notice how I am creating a multi-line Python string right now?!
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
This is also a multi-line
comment in
Python
&quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'\nThis is also a multi-line\ncomment in\nPython\n'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'''
You can use single quotes
for multi-line commenting as well.
Always be as expressive as possible with your comments in you code.
It does not harm!
'''
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'\nYou can use single quotes\nfor multi-line commenting as well.\nAlways be as expressive as possible with your comments in you code.\nIt does not harm!\n'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the following section, you will learn much more about the &lt;code&gt;print&lt;/code&gt; function, especiallu when dealing with variables.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;python-variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;variables-in-python&quot;&gt;Variables in Python&lt;/h3&gt;
&lt;p&gt;Python has 6 main variable types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Number&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;List&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tuple&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dictionary&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will get to each of these soon. The variable naming convention in Python is that each variable starts with a letter and can contain only letters, numbers or underscore “_”.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;var1 = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('value of var1 is ',var1,'.')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;value of var1 is  1 .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a_long_variable_name = 2.5 # The variable name can be almost as long as you wish
print(a_long_variable_name)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-variables-naming-convention&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;variable-naming-convention-in-python&quot;&gt;Variable naming convention in Python&lt;/h4&gt;
&lt;p&gt;A Python variable can only begin with letter or underscore _. Numbers are only valid if they appear inside or at the end of the variable name. Other symbols are syntactically invalid anywhere in a variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;123new_var = 2.5 # This is an invalid name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-10-0e3e63931842&amp;gt;&quot;, line 1
    123new_var = 2.5 # This is an invalid name
             ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;new_var$ = 2.5 # symbols are not valid in Python variable names
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-12-71f3fbc68938&amp;gt;&quot;, line 1
    new_var$ = 2.5 # symbols are not valid in Python variable names
           ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;amir = &quot;teacher&quot;
print('Amir is a', amir)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Amir is a teacher
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;123amir = &quot;teacher&quot; # Wrong name for variable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-38-85ed673cd303&amp;gt;&quot;, line 1
    123amir = &quot;teacher&quot;
          ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;life_expectancy = 120; print( &quot;The life expectancy for the millennials is projected to be %d years! (But don't believe it...)&quot; % (life_expectancy) );
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The life expectancy for the millennials is projected to be 120 years! (But don't believe it...)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Now lets do a Physics calculation.
v0 = 5; # initial velocity for a projectile motion.
g = 9.81 # Earth gravity acceleration.
t = 0.6
y = v0*t - 0.5*g*t**2
print('''
At t = %f seconds, a ball with initial velocity v0 = %.3E m/s is located at the height %.2f m.
''' % (t,v0,y) )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;At t = 0.600000 seconds, a ball with initial velocity v0 = 5.000E+00 m/s is located at the height 1.23 m.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# or on multi-line:
print('''
At t = %f seconds,
a ball with initial velocity v0 = %.3E m/s
is located at the height %.2f m.
100%% accurate!
''' % (t,v0,y) )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;At t = 0.600000 seconds,
a ball with initial velocity v0 = 5.000E+00 m/s
is located at the height 1.23 m.
100% accurate!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are some &lt;code&gt;printf&lt;/code&gt; format specifications, that can be used with &lt;code&gt;print&lt;/code&gt; function:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;%s   for string&lt;/li&gt;
  &lt;li&gt;%d   for integer&lt;/li&gt;
  &lt;li&gt;%0xd for integer padded with x zeros&lt;/li&gt;
  &lt;li&gt;%f   for decimal notation with 6 decimals&lt;/li&gt;
  &lt;li&gt;%e   for scientific notation&lt;/li&gt;
  &lt;li&gt;%E   for scientific notation&lt;/li&gt;
  &lt;li&gt;%%   percentage sign itself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also a a more recent, recommended way of determining the string format in Python, using &lt;code&gt;.format()&lt;/code&gt; method, about which you find some more useful information &lt;a href=&quot;https://pyformat.info/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/4-python-values-variables-types&quot;&gt;Lecture 4: Python - values, variables, and types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on February 22, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 3: Python for beginners]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/3-python-for-beginners"/>
  <id>http:/ECL2017S/lecture/3-python-for-beginners</id>
  <published>2017-02-15T00:00:00-06:00</published>
  <updated>2017-02-15T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing an introduction to Python programming for beginners, how to install it, different Python distributoins available, how to write Jupyter notebooks, and how to perform simple arithmetic operations with Python.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;history&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;python-a-brief-history&quot;&gt;Python: a brief history&lt;/h2&gt;

&lt;p&gt;Python was developed close to the beginning of the 1990’, by &lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot; target=&quot;_blank&quot;&gt;Guido van Rossum&lt;/a&gt;, a former employee of &lt;a href=&quot;https://en.wikipedia.org/wiki/Google&quot; target=&quot;_blank&quot;&gt;Google&lt;/a&gt;, who is now an employee of &lt;a href=&quot;https://en.wikipedia.org/wiki/Dropbox_(service)&quot; target=&quot;_blank&quot;&gt;Dropbox&lt;/a&gt;. The name of the language is attribution to the British sketch comedy &lt;a href=&quot;https://en.wikipedia.org/wiki/Monty_Python%27s_Flying_Circus&quot; target=&quot;_blank&quot;&gt;Monty Python’s Flying Circus&lt;/a&gt;. As of 2016 Python seems to be the fastest growing language for data science. Python has the following features and attributes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Python is a fourth-generation, high-level programming language.&lt;/strong&gt; Remember from our &lt;a href=&quot;http:/ECL2017S/lecture/0-programming-history&quot; target=&quot;_blank&quot;&gt;zeroth lecture&lt;/a&gt;, that a high-level programming language provides a high level of programming abstraction from details of computer and machine code. For comparison, Fortran, C++, and C are considered high, medium, and low -level programming languages respectively.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Python is general-purpose programming language&lt;/strong&gt;, meaning that it is designed to be used for writing software in a wide variety of application domains, such as &lt;em&gt;scientific computation&lt;/em&gt;, &lt;em&gt;web and internet development&lt;/em&gt;, &lt;em&gt;education&lt;/em&gt;, &lt;em&gt;Software Development&lt;/em&gt;. For more information, visit &lt;a href=&quot;https://www.python.org/about/apps/&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Python is a multi-paradigm programming language&lt;/strong&gt;. A &lt;a href=&quot;https://en.wikipedia.org/wiki/Programming_paradigm&quot; target=&quot;_blank&quot;&gt;programming paradigm&lt;/a&gt; is the style of writing and development of a computer programming language. Python allows the programmer to use the following major programming paradigms.&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot;&gt;functional programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Structured_programming&quot; target=&quot;_blank&quot;&gt;structured programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot; target=&quot;_blank&quot;&gt;imperative programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Procedural_programming&quot; target=&quot;_blank&quot;&gt;procedural programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot;&gt;object-oriented programming (OOP)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;   Later on, we will get to each of these programming paradigms in Python.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The core philosophy of Python programming&lt;/strong&gt;: Simplicity, Readability, and complexity instead of complication.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Python is an interpreted language&lt;/strong&gt;. A programming language implementation is a system for executing computer programs. There are two general approaches to programming language implementation:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Interpretation&lt;/strong&gt;: An interpreter takes as input a program in some language, and performs the actions written in that language on some machine.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compilation&lt;/strong&gt;: A compiler takes as input a program in some language, and translates that program into some other language, which may serve as input to another interpreter or another compiler.&lt;br /&gt;
&lt;br /&gt;Python is an interpreted language, meaning that, as soon as you type a Python statement on the Python command line and press enter, the Python interpreter, executes the statement. Python programs can also be compiled, to be executed later when desired. This is a topic that will be covered later on in this course.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The most popular major implementation of Python is &lt;a href=&quot;https://en.wikipedia.org/wiki/CPython&quot; target=&quot;_blank&quot;&gt;CPython&lt;/a&gt;&lt;/strong&gt;. Other major implementations include &lt;em&gt;IronPython&lt;/em&gt;, &lt;em&gt;Jython&lt;/em&gt;, &lt;em&gt;MicroPython&lt;/em&gt;, &lt;em&gt;PyPy&lt;/em&gt;, each of which is designed for a specific purpose. Throughout this course we will be using &lt;em&gt;CPython&lt;/em&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The extension for human-readable Python source code file is “&lt;em&gt;.py&lt;/em&gt;“&lt;/strong&gt;. There are other extensions for Python program files as well, each of which represents a specific type of Python file. For example, “&lt;em&gt;.pyc&lt;/em&gt;” represents compiled (binary) Python source code, and “&lt;em&gt;.pyo&lt;/em&gt;” is used for optimized Python files.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;installation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;python-installation&quot;&gt;Python installation&lt;/h2&gt;
&lt;p&gt;Depending on your operating system, you can download and install a specific version of Python for your personal computer from one of the major Python vendors, for example, CPython. For this course, we will rely on CPython implentation.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;installation-basic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;basic-python-installation&quot;&gt;Basic Python installation&lt;/h3&gt;
&lt;p&gt;The official CPython implementation of Python can be found at &lt;a href=&quot;https://www.python.org/downloads/&quot; target=&quot;_blank&quot;&gt;python.org&lt;/a&gt;. Once you go to this webpage, you will see that two versions of Python are available for download (for Windows systems):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/ftp/python/3.6.0/python-3.6.0.exe&quot; target=&quot;_blank&quot;&gt;Python 3.6.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/ftp/python/2.7.13/python-2.7.13.msi&quot; target=&quot;_blank&quot;&gt;Python 2.7.13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For operating systems other than Windows, the installation files can be found &lt;a href=&quot;https://www.python.org/downloads/source/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for Linux, and &lt;a href=&quot;https://www.python.org/downloads/mac-osx/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for Mac.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;installation-recommended&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;recommended-python-installation&quot;&gt;Recommended Python installation&lt;/h3&gt;
&lt;p&gt;In addition to the basic Python distribution that you can obtain from CPython organization, there are also other popular Python &lt;em&gt;distributions&lt;/em&gt; that, by default, contain some highly useful Python libraries, advanced Python editors and &lt;a href=&quot;https://en.wikipedia.org/wiki/Integrated_development_environment&quot; target=&quot;_blank&quot;&gt;integrated development environments (IDEs)&lt;/a&gt;. A &lt;strong&gt;Python distributions&lt;/strong&gt; is basically the Basic Python core bundled together with many useful Python libraries and IDEs. For example, the basic Python distribution from CPython organization, is bundled along with a simple premitive integrated development environment for Python coding, called &lt;a href=&quot;https://en.wikipedia.org/wiki/IDLE&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;IDLE&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aside from the official basic CPython distribution of Python available from python.org, there are other Python distributions that based on CPython. A comprehensive list can be found &lt;a href=&quot;https://wiki.python.org/moin/PythonDistributions&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Some, among many, of the most popular and useful Python distributions for scientific computing purposes are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.continuum.io/downloads&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Anaconda&lt;/strong&gt;&lt;/a&gt; from &lt;a href=&quot;https://www.continuum.io/&quot; target=&quot;_blank&quot;&gt;Continuum Analytics&lt;/a&gt;. According to the company, Anaconda is the leading open data science platform powered by Python. The open source version of Anaconda is a high performance distribution of Python and R and includes over 100 of the most popular Python, R and Scala packages for data science. Additionally, the Anaconda user has access to over 720 packages that can be easily installed with &lt;a href=&quot;https://en.wikipedia.org/wiki/Conda_(package_manager)&quot; target=&quot;_blank&quot;&gt;conda&lt;/a&gt;. Conda is a language-agnostic package manager and environment management system that is developed and maintained by Continuum Analytics. The package Conda is itself written in Python.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;The Anaconda distribution of Python is the one that we will use throughout this course.&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
The latest version of Anaconda includes an easy installation of Python (2.7.13, 3.4.5, 3.5.2, and/or 3.6.0) and updates of over 100 pre-built and tested scientific and analytic Python packages. These packages include &lt;strong&gt;NumPy&lt;/strong&gt;, &lt;strong&gt;Pandas&lt;/strong&gt;, &lt;strong&gt;SciPy&lt;/strong&gt;, &lt;strong&gt;Matplotlib&lt;/strong&gt;, and &lt;strong&gt;Jupyter&lt;/strong&gt;. Over 620 more packages are available. You can install any of them with just one command,
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;conda install package-name
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;em&gt;(NOTE: Replace “package-name” with the name of the package you want to install.)&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.enthought.com/products/canopy/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Canopy Python&lt;/strong&gt;&lt;/a&gt; from &lt;a href=&quot;https://www.enthought.com/&quot; target=&quot;_blank&quot;&gt;Enthought Canopy&lt;/a&gt;. According to the company, Canopy Python is a comprehensive Python analysis environment that provides easy installation of over 450 core scientific analytic and Python packages, creating a robust platform you can explore, develop, and visualize on. In addition to its pre-built, tested Python distribution. Enthought Canopy has tools for iterative data analysis, visualization and application development. Like Anaconda, Canopy has free and licensed versions available for purchase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;package-installation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;installing-external-python-packages&quot;&gt;Installing external Python packages&lt;/h3&gt;
&lt;p&gt;One of the greatest advantages and reasons for the popularity of Python over other languages is the extensive set of libraries that have been written for Python over the past two decades. As a professional Python programmer, you will virtually always need some of these packages. In any event you need a Python library that is not already installed on your device, you can get the instructions for Linux installation from &lt;a href=&quot;https://packaging.python.org/installing/&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;. For Windows devices, you can get precompiled version of Python external libraries, ready for installation, from &lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/&quot; target=&quot;_blank&quot;&gt;Christoph Gohlke’s personal website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;IDE&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;python-editors-and-ides&quot;&gt;Python editors and IDEs&lt;/h3&gt;
&lt;p&gt;The simple Python code editor, IDLE, that comes with the basic CPython distribution of Python is most not enough helpful for educational and professional programming. As a result, a myriad of Python code editors and IDEs have been also developed over the past decade. A rather complete list of most popular Python IDEs can be found &lt;a href=&quot;https://wiki.python.org/moin/PythonEditors&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Python&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Some of the most useful for our class and your future professional use are likely the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Spyder_(software)&quot; target=&quot;_blank&quot;&gt;Spyder&lt;/a&gt;&lt;br /&gt;
Spyder (formerly Pydee) is an open source cross-platform IDE for scientific Python programming. It probably has the highest design similarity to MATLAB environment. Therefore, it likely a good start as IDE for those who are already familiar and confortable with MATLAB environment design. Spyder integrates NumPy, SciPy, Matplotlib and IPython, as well as other open source software.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/pycharm/&quot; target=&quot;_blank&quot;&gt;PyCharm&lt;/a&gt;&lt;br /&gt;
PyCharm is full-featured IDE for Python. It is available in Free and Open Source edition, fully supporting Python as well as proprietary Professional Edition with Django, Flask, Pyramid and Google App Engine support.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ipython.org/&quot; target=&quot;_blank&quot;&gt;IPython&lt;/a&gt;&lt;br /&gt;
IPython is an enhanced interactive Python shell. It offers a significantly enhanced interactive shell for Python programming, such tab completion (autocompletion), inline Python syntax highlighting, command history, etc. It is highly useful for testing small snippets of your big code immediately on the IPython shell. IPython is installed on your computer as part of Anaconda package installation.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jupyter.org/about.html&quot; target=&quot;_blank&quot;&gt;Jupyter&lt;/a&gt;&lt;br /&gt;
Project Jupyter was born out of the IPython Project in 2014 as it evolved to support interactive data science and scientific computing across all programming languages. Jupyter is an abbreviation for Julia, Python, and R programming languages. The Jupyter Notebook is a web application that allows you to create and share documents that contain live code, equations, visualizations and explanatory text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, machine learning and much more.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://notepad-plus-plus.org/&quot; target=&quot;_blank&quot;&gt;Notepad++&lt;/a&gt;  (available only on Windows)&lt;br /&gt;
The last, but in-my-opinion not least, important Python editor is Notepad++. It is a highly versatile text and source code editor for use with Microsoft Windows. It is likely – and in my opinion, arguably – the most powerful general-purpose text editor that is currently available on the web. Notepad++ automatically identifies the type of code the file contains based on the file extension and highlights the code sytax accordingly. However, you should keep in mind that it is not specifrically designed for Python. If you are professional multi-language programmer, you will soon find the hidden gems in Notepad++ that are not available in any other editor (including Python-specific editors) as of today, at least as far as I am aware.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;version&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;which-python-standard-version-should-you-use&quot;&gt;Which Python standard version should you use?&lt;/h3&gt;

&lt;p&gt;Like any other programming language, Python has also evolved significantly since its inception in 1991. Normally, a good prgramming language should be backward-compatible, meaning that the newer programming standard should not violate the previous standards. For example, an old Python code should be executable on the most recent Python standard implementation. Sometimes however, with some programming language evolutions, this is not the case. It probably happens to all languages that some time, the new standard violates the older standard syntax of the language, causing runtime and compile-time error for an old-standard code.&lt;/p&gt;

&lt;p&gt;For Python standards, this backward-incompatibility occurred between Python versions 2.x and 3.x. A list of the key differences between the two standards can be found &lt;a href=&quot;http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. If you would like to know which Python version is likely most useful for your future professional project, consult &lt;a href=&quot;https://wiki.python.org/moin/Python2orPython3&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;. However, it is important to keep in mind that &lt;strong&gt;Python 2.x standard is legacy, and Python 3.x is the present and future of the Python language&lt;/strong&gt;. By year 2020, the offical plan is to cut the security updates and support for Python 2.x and most of the major Python packages have already started migrating to Python 3. Therefore, for the rest of this course we will be using Python 3 syntax.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;jupyter-setup&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up-jupyter&quot;&gt;Setting up Jupyter&lt;/h2&gt;
&lt;p&gt;There are two ways to setup and run a Jpuyter notebook:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;on your personal device&lt;/li&gt;
  &lt;li&gt;online on Jupyter website&lt;br /&gt;
&lt;br /&gt;
In the following, both methods will be explained.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;jupyter-setup-device&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;running-jupyter-on-personal-device&quot;&gt;Running Jupyter on Personal Device&lt;/h3&gt;

&lt;p&gt;Now, if you have already installed Anaconda on you device, you should also have Jupyter and IPython installed automatically. To open a new Jupyter notebook, follow the instructions below (for Windows OS). For other OS, it would also be similar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Open Windows’ start menu and search for jupyter.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/3/jupyter1.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; By clicking on &lt;code&gt;Jupyter Notebook&lt;/code&gt;, a Windows Command Prompt for Jupyter will open up, initializing the Jupyter server. Then a web browser window will open up on your default web browser. The content of this web page is a list of the content of your home directory on your personal device, as in the following figure.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/3/jupyter2.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Now click on the &lt;code&gt;new&lt;/code&gt; tab on the top-right part of the page, and choose &lt;code&gt;python 3&lt;/code&gt;. If you have installed Python 2 as well, you will also see an option for &lt;code&gt;Python 2&lt;/code&gt;. But, for this course proceed with &lt;code&gt;Python 3&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/3/jupyter3.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Once you choose and click on your Python version, a new browser tab will open, which contains your &lt;strong&gt;Jupyter notebook&lt;/strong&gt;, as illustrated in the following figure.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/3/jupyter4.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Your Jupyter notebook file is stored in the home direcotry of your device, likely with the name &lt;code&gt;Untitled.ipynb&lt;/code&gt;. The very cool feature of Jupyter notebooks is that you can also export your notebook as a Markdown, PDF, HTML, or a single Python file (with &lt;code&gt;.py&lt;/code&gt; extension), as illustrated in the figure below.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/3/jupyter5.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a name=&quot;jupyter-setup-online&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;running-jupyter-online&quot;&gt;Running Jupyter online&lt;/h3&gt;
&lt;p&gt;The instructions for setting up your online Jupyter notebooks are very similar to the above for your local device, except the very first step, for which, instead of searching in Windows for Jupyter, you have to visit Jupyter’s website at &lt;a href=&quot;https://try.jupyter.org/&quot; target=&quot;_blank&quot;&gt;https://try.jupyter.org/&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;jupyter-helpful-commands&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;ipython--jupyter-helpful-commands&quot;&gt;IPython / Jupyter helpful commands&lt;/h3&gt;

&lt;p&gt;Everytime you start IPython on your local device, the following list of IPython commands are shown on the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Amir@CCBB-Amir MINGW64 ~
$ ipython
Python 3.5.2 |Anaconda 4.2.0 (64-bit)| (default, Jul  5 2016, 11:41:13) [MSC v.1900 64 bit (AMD64)]
Type &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -&amp;gt; Introduction and overview of IPython's features.
%quickref -&amp;gt; Quick reference.
help      -&amp;gt; Python's own help system.
object?   -&amp;gt; Details about 'object', use 'object??' for extra details.
In [1]:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Since Jupyter is an extension of IPython, these commands are also executable in Jupyter notebooks. Here is an example for the last command &lt;code&gt;&amp;lt;object&amp;gt;?&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;In [14]: test = 'test'

In [15]: test?
Type:        str
String form: test
Length:      4
Docstring:
str(object='') -&amp;gt; str
str(bytes_or_buffer[, encoding[, errors]]) -&amp;gt; str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;rcbox&quot;&gt;
&lt;b&gt;ATTENTION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
 Note that each cell in Jupyter notebook, can contain either Python code or Markdown code, or any other code that you can select from the &lt;i&gt;code&lt;/i&gt; dropdown menu at the top of the notebook.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;jupyter-shortcuts&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;jupyter-cheatsheet-and-keyboard-shortcuts&quot;&gt;Jupyter cheatsheet and keyboard shortcuts&lt;/h3&gt;
&lt;p&gt;There are may useful keyboard shortcuts in  Jupyter that facilitate editing and revising your Jupyter notebook cells. A Jupyter cheatsheet can be downloaded from &lt;a href=&quot;https://www.cheatography.com/weidadeyue/cheat-sheets/jupyter-notebook/#downloads&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. The following table is a summary of some of the most useful shortcuts, adopted from Jupyter website.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;
Table 1: Some useful shortcuts for Jupyter cells in &lt;i&gt;view mode&lt;/i&gt; (Press &lt;code&gt;ESC&lt;/code&gt; to switch to view mode).
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;keyboard shortcut&lt;/th&gt;
&lt;th&gt;Description of effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;
    &lt;td&gt;Enter&lt;/td&gt;
    &lt;td&gt;enter edit mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Shift + Enter&lt;/td&gt;
    &lt;td&gt;run cell, select below&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Enter&lt;/td&gt;
    &lt;td&gt;run cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Alt + Enter&lt;/td&gt;
    &lt;td&gt;run cell, insert below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Y&lt;/td&gt;
    &lt;td&gt;to code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;M&lt;/td&gt;
    &lt;td&gt;to markdown&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;R&lt;/td&gt;
    &lt;td&gt;to raw&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;to heading 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;2,3,4,5,6&lt;/td&gt;
    &lt;td&gt;to heading 2,3,4,5,6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Up/K&lt;/td&gt;
    &lt;td&gt;select cell above&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Down/J&lt;/td&gt;
    &lt;td&gt;select cell below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;A/B&lt;/td&gt;
    &lt;td&gt;insert cell above/below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;X&lt;/td&gt;
    &lt;td&gt;cut selected cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;C&lt;/td&gt;
    &lt;td&gt;copy selected cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Shift + V&lt;/td&gt;
    &lt;td&gt;paste cell above&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;V&lt;/td&gt;
    &lt;td&gt;paste cell below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Z&lt;/td&gt;
    &lt;td&gt;undo last cell deletion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;D,D&lt;/td&gt;
    &lt;td&gt;delete selected cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Shift + M&lt;/td&gt;
    &lt;td&gt;merge cell below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Ctrl + S&lt;/td&gt;
    &lt;td&gt;Save and Checkpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;L&lt;/td&gt;
    &lt;td&gt;toggle line numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;O&lt;/td&gt;
    &lt;td&gt;toggle output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Shift + O&lt;/td&gt;
    &lt;td&gt;toggle output scrolling&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Esc&lt;/td&gt;
    &lt;td&gt;close pager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;H&lt;/td&gt;
    &lt;td&gt;show keyboard shortcut help dialog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;I,I&lt;/td&gt;
    &lt;td&gt;interrupt kernel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;0,0&lt;/td&gt;
    &lt;td&gt;restart kernel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Space&lt;/td&gt;
    &lt;td&gt;scroll down&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Shift + Space&lt;/td&gt;
    &lt;td&gt;scroll up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Shift&lt;/td&gt;
    &lt;td&gt;ignore&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;
Table 2: Some useful shortcuts for Jupyter cells in &lt;i&gt;edit mode&lt;/i&gt; (Press &lt;code&gt;enter&lt;/code&gt; to switch to edit mode).
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;keyboard shortcut&lt;/th&gt;
&lt;th&gt;Description of effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;
    &lt;td&gt;Tab&lt;/td&gt;
    &lt;td&gt;code completion or indent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Shift + Tab&lt;/td&gt;
    &lt;td&gt;tooltip&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + ]&lt;/td&gt;
    &lt;td&gt;indent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + [&lt;/td&gt;
    &lt;td&gt;dedent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + A&lt;/td&gt;
    &lt;td&gt;select all&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Z&lt;/td&gt;
    &lt;td&gt;undo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Shift + Z&lt;/td&gt;
    &lt;td&gt;redo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Y&lt;/td&gt;
    &lt;td&gt;redo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Home&lt;/td&gt;
    &lt;td&gt;go to cell start&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Up&lt;/td&gt;
    &lt;td&gt;go to cell start&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + End&lt;/td&gt;
    &lt;td&gt;go to cell end&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Down&lt;/td&gt;
    &lt;td&gt;go to cell end&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Left&lt;/td&gt;
    &lt;td&gt;go one word left&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Right&lt;/td&gt;
    &lt;td&gt;go one word right&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Backspace&lt;/td&gt;
    &lt;td&gt;delete word before&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Delete&lt;/td&gt;
    &lt;td&gt;delete word after&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Esc&lt;/td&gt;
    &lt;td&gt;command mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + M&lt;/td&gt;
    &lt;td&gt;command mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Shift + Enter&lt;/td&gt;
    &lt;td&gt;run cell, select below&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Enter&lt;/td&gt;
    &lt;td&gt;run cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Alt + Enter&lt;/td&gt;
    &lt;td&gt;run cell, insert below&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Shift + Subtract&lt;/td&gt;
    &lt;td&gt;split cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Shift + -&lt;/td&gt;
    &lt;td&gt;split cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + S&lt;/td&gt;
    &lt;td&gt;Save and Checkpoint&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Up&lt;/td&gt;
    &lt;td&gt;move cursor up or previous cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Down&lt;/td&gt;
    &lt;td&gt;move cursor down or next cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + /&lt;/td&gt;
    &lt;td&gt;toggle comment on current or selected lines&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/3-python-for-beginners&quot;&gt;Lecture 3: Python for beginners&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on February 15, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 2: Course Progress Evaluation]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/announcement/2-course-progress-evaluation"/>
  <id>http:/ECL2017S/announcement/2-course-progress-evaluation</id>
  <published>2017-02-15T00:00:00-06:00</published>
  <updated>2017-02-15T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to assess your progress so far in this class, and to make improvements for the rest of the semester. I rely on your answers and comments to plan for the rest of the semester, so your response and time is appreciated very much!&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;script&gt;
        (function(t,e,c,s){var n,o,r;t.SMCX=t.SMCX||[],e.getElementById(s)||(n=e.getElementsByTagName(c),o=n[n.length-1],r=e.createElement(c),r.type=&quot;text/javascript&quot;,r.async=!0,r.id=s,r.src=[&quot;https:&quot;===location.protocol?&quot;https://&quot;:&quot;http://&quot;,&quot;widget.surveymonkey.com/collect/website/js/d5UY2kDTFxF8A6NQ_2FJ1Vhv2wmTNczXVXxO4ZZ3HU2PQyfRykxLg0hcBrFYhQfcsr.js&quot;].join(&quot;&quot;),o.parentNode.insertBefore(r,o))})(window,document,&quot;script&quot;,&quot;smcx-sdk&quot;)
    &lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;survey-results&quot;&gt;Survey results&lt;/h2&gt;
&lt;p&gt;The following are the results of the 9 questions of the survey as well as comments. The total number of respondents was 18.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SUMMARY:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is &lt;strong&gt;significant heterogeneity&lt;/strong&gt; in the abilities of individuals &lt;strong&gt;in this class&lt;/strong&gt;, such that some find this course too difficult, and some find it too easy and lame.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;However, despite the great student-heterogeneity, the course-homework-quiz &lt;strong&gt;speed and load are on average fair&lt;/strong&gt;, so far in this class.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;The online &lt;strong&gt;web design of the course&lt;/strong&gt; material is a &lt;strong&gt;great aid to students’ learning&lt;/strong&gt; in this class.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;The entire class unanimously prefer &lt;strong&gt;a Python project instead of final exam&lt;/strong&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;one-hour per week&lt;/strong&gt; is &lt;strong&gt;not enough&lt;/strong&gt; for this course.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/2/q1.PNG&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/2/q2.PNG&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/2/q3.PNG&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/2/q4.PNG&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/2/q5.PNG&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/2/q6.PNG&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/2/q7.PNG&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/2/q8.PNG&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/2/q9.PNG&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Comments:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just a bit slow. I would like to just stop babying people, it’s homework, things should be done by the time we get here or else we’re just debugging problems here.&lt;br /&gt;
2/22/2017 9:06 AM&lt;/p&gt;

&lt;p&gt;Please end the class on time! I have class at 10 AM sharp and must leave no later than 9:50.&lt;br /&gt;
2/22/2017 9:02 AM&lt;/p&gt;

&lt;p&gt;At this point, assignments with Python are needed to start improving upon programming and computation based skills, since I feel like not much has been accomplished in the class. The most useful yet easiest change would be to publish the lectures ahead of time, so I have a better idea of what the next class will be over.&lt;br /&gt;
2/22/2017 1:38 AM&lt;/p&gt;

&lt;p&gt;I would really love class time to be spent exclusively on python and the jupyter environment. I really dislike the use of Git for this class, and I feel it detracts from our learning of the real material. I wish we could just submit our stuff to you via canvas or some other means. I feel like we haven’t adequately covered github, and yet just about all classtime thus far has been dedicated to it. I was hoping for this class to teach me python but I honestly feel bogged down by github and the means of submission- I feel we are spending time on the wrong thing. I think github has a time and place, but I don’t feel that it is appropriate for this class. Overall though, I think you are doing an excellent job teaching and I look forward to learning more with you.&lt;br /&gt;
2/22/2017 1:26 AM&lt;/p&gt;

&lt;p&gt;I am impressed with how much I have been able to get out of a 1 hour course so far.&lt;br /&gt;
2/21/2017 11:20 PM&lt;/p&gt;

&lt;p&gt;Not your fault, but simply 1 hour a week of lecture time is not enough.&lt;br /&gt;
2/21/2017 10:17 PM&lt;/p&gt;

&lt;p&gt;Homework instructions are very clear but I’m confused on the way to present the outputs.&lt;br /&gt;
2/21/2017 9:20 PM&lt;/p&gt;

&lt;p&gt;I only wish this course was more like a real computing course instead of a 1hr lab. It would be a lot more useful if we could meet 2x a week and had more 1-on-1 time.&lt;br /&gt;
2/21/2017 7:00 PM&lt;/p&gt;

&lt;p&gt;Love the course so far. Learning so much. The grades worry me though - there needs to be a clearer understanding of what’s going to be on a quiz and the homeworks need to be a little more well defined. The first two quizzes and first homework were rough but quiz 3 and homework 2 already got so much better. Thanks so much!&lt;br /&gt;
2/21/2017 6:38 PM&lt;/p&gt;

&lt;p&gt;Ask more concept based questions rather than memory. Other than that, I really like this class.&lt;br /&gt;
2/20/2017 11:48 PM&lt;/p&gt;

&lt;p&gt;All the information we are supposed to get out of this course is so critical. Version Control, python programming, learning linux.. it’s all perfect. We just need more time. If this were a 2 or 3 hours course that would be incredible. If we met MWF 9-10, this class would be my favorite, and I would be so confident in my computer science ability.&lt;br /&gt;
2/17/2017 12:34 AM&lt;/p&gt;

&lt;p&gt;This class definitely needs more time per week than 1 hour. This is not enough time at all to give out all the information needed. &lt;br /&gt;
2/16/2017 7:32 PM&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/announcement/2-course-progress-evaluation&quot;&gt;Announcement 2: Course Progress Evaluation&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on February 15, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 2: Advanced Git concepts]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/2-advanced-git"/>
  <id>http:/ECL2017S/lecture/2-advanced-git</id>
  <published>2017-02-01T00:00:00-06:00</published>
  <updated>2017-02-01T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief review of some advanced topics in Git Version Control System which are essential for effective management of large collaborative projects.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;A useful Git-cheatsheet link for future reference:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ndpsoftware.com/git-cheatsheet.html&quot; target=&quot;_blank&quot;&gt;Advanced Git cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-help&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;getting-help-for-git-commands&quot;&gt;Getting help for Git commands&lt;/h2&gt;
&lt;p&gt;There are basically three ways to request information about Git commands on the Git-bash command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git help &amp;lt;command name&amp;gt;
$ git &amp;lt;command name&amp;gt; --help
$ man git-&amp;lt;command name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the last command &lt;code&gt;man&lt;/code&gt; is not a Git command. All Git commands begin with the word &lt;em&gt;git&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-log&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;viewing-the-git-commit-history&quot;&gt;Viewing the Git commit history&lt;/h2&gt;
&lt;p&gt;You can check the history of project commits to the repository using the Git command &lt;code&gt;git log&lt;/code&gt;.
For example, here is a snippet from the output  of &lt;code&gt;git log&lt;/code&gt; on laptop screen:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  $ git log
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit

commit b6f4fb69d97a396bde7159c78424100704328634
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 21:03:28 2017 -0600

    *.txt files removed

commit 961ff2d4ac68081a21864b2f1b067b43424d3342
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 21:02:00 2017 -0600

    update

commit 8fd3c49e90d96f4bcef2302c7b227f06ad7a5250
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:36:45 2017 -0600

    minor

commit cd0ed7def385ba29ea134bcc18a4ad0873d9f5ee
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:32:51 2017 -0600

    minor

commit 8096668868ef64189f788669d5f1838cd944f9b6
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:28:22 2017 -0600

    minor

commit c52ba6adea474625cce1493896ecaac40cb976af
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:24:23 2017 -0600

    minor

commit ab5a17f9e913e55cae0f971fd9b485a0a6e8dec3
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:16:27 2017 -0600

    minor

commit ce5c2421db6e76a338a0e6922acead9100a7c4c4
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:10:19 2017 -0600

    minor

commit 4a7d27d81260c2e2a29b6259e6c97befc065c069
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:05:14 2017 -0600

:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There is a long list of options that can be used with &lt;code&gt;git log&lt;/code&gt; command to display exactly what you need on bash screen.
Some of the most useful are discussed below.&lt;br /&gt;
To lists the differences of the files between different commits use &lt;code&gt;-p&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To lists only a limited number of most recent commits use &lt;code&gt;-&amp;lt;number of commits to display&amp;gt;&lt;/code&gt; flag. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -2
$ git log -2
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To list the statistics of the commits, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --stat -1
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

 README.md                |   1 +
 results/tables/README.md |   8 ++-
 results/tables/tgm.mat   | Bin 0 -&amp;gt; 2550889 bytes
 src/defineProject.m      |   3 +-
 src/main.m               |  82 +++++++++------------------
 src/writeTables.m        |  75 ++++++++++++++++++++++++
 9 files changed, 140 insertions(+), 56 deletions(-)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The log data can be even represented formatted via the flag &lt;code&gt;--pretty=format:&quot;&amp;lt;the desired format&amp;gt;&quot;&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -3 --pretty=format:&quot;%h - %an, %ar : %s&quot;
264043e - Amir Shahmoradi, 7 days ago : data tables for 1D model added.
b45ddd7 - Amir Shahmoradi, 7 days ago : minor edit
b6f4fb6 - Amir Shahmoradi, 3 weeks ago : *.txt files removed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A list of available format options is provided below.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;
Table 1: Some useful options for &lt;code&gt;git log --pretty=format:&quot;&amp;lt;options&amp;gt;&quot;&lt;/code&gt;. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description of Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Commit hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated commit hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tree hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated tree hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Parent hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated parent hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%an&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ad&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author date (format respects the --date=option)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author date, relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ce&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer date, relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subject&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
A list of useful options for &lt;code&gt;git log&lt;/code&gt; is given in the table below.&lt;/p&gt;

&lt;table id=&quot;log_options&quot; class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;Table 2: Common flags for &lt;code&gt;git log&lt;/code&gt; command. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot; /&gt;
&lt;col style=&quot;width: 80%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the patch introduced with each commit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--stat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show statistics for files modified in each commit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--shortstat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display only the changed/insertions/deletions line from the --stat command.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the list of files modified after the commit information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the list of files affected with added/modified/deleted information as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--abbrev-commit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show only the first few characters of the SHA-1 checksum instead of all 40.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--relative-date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--graph&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display an ASCII graph of the branch and merge history beside the log output.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--pretty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
A list of useful options for &lt;code&gt;git log&lt;/code&gt; commands that can change the format of the output, is given in the table below.&lt;/p&gt;

&lt;table id=&quot;limit_options&quot; class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;Table 3. Flags limiting the output of &lt;code&gt;git log&lt;/code&gt; command. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 66.6667%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&amp;lt;n&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show only the last n commits  (e.g., -2, -3, ...). &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--since&lt;/code&gt;, &lt;code&gt;--after&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Limit the commits to those made after the specified date.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--until&lt;/code&gt;, &lt;code&gt;--before&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Limit the commits to those made before the specified date.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--author&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits in which the author entry matches the specified string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--committer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits in which the committer entry matches the specified string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits with a commit message containing the string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits adding or removing code matching the string.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
For example, to list the commit history since a specific time in the past, use &lt;code&gt;--since&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --since=2.weeks
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or, with the following date format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --since=&quot;2017-01-15&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-reset-amend-tag&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;undoing-amending-and-tagging&quot;&gt;Undoing, amending, and tagging&lt;/h2&gt;
&lt;p&gt;Suppose you want to undo the latest addition of files to the stage area. The command to use in order to clean the stage area is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git reset
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This command is basically the opposite of &lt;code&gt;git add&lt;/code&gt;. There are a lot of options that can accompany this Git command, details of which can be found in &lt;a href=&quot;https://git-scm.com/docs/git-reset&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
However, &lt;strong&gt;be careful when using this command&lt;/strong&gt;, especially with flag &lt;code&gt;--hard&lt;/code&gt;, which can result in changes in your working directory as well, thus leading to involuntary loss of latest uncommitted files.&lt;/p&gt;

&lt;p&gt;Another useful command is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which is used when you forget to add some files to your latest commit and now, you would like to add the latest content of your project’s staging area to the last commit, by &lt;em&gt;amending&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;The Git command &lt;code&gt;git tag&lt;/code&gt; allows you to tag specific important commits in your commit history, for example a final release of your project/software. If you just type &lt;code&gt;git tag&lt;/code&gt; on Git bash command line, it will list all tags in the project, &lt;strong&gt;in alphabetical order&lt;/strong&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git tag
v1.0
v1.1
v2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can create a tag for the latest commit to your repository by using,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag -a v3.0 -m &quot;new version of project&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will add a new tag pointing to the latest commit in the project with name &lt;code&gt;v3.0&lt;/code&gt; and the message &lt;em&gt;new version of project&lt;/em&gt;.
Now if you want to display the information about a specific tag, use &lt;code&gt;git show&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git show v1.0
tag v1.0
Tagger: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 1 18:08:00 2017 -0600

first tag

commit 25129a074aece69d234838764e7df63ed1fb3023
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Fri Dec 27 17:12:08 2016 -0600

    Update README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also create a &lt;strong&gt;lightweight&lt;/strong&gt; tag by avoiding &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt;, or &lt;code&gt;-m&lt;/code&gt; flags in you tag command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag v4.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Annotated tags (created with &lt;code&gt;-a&lt;/code&gt; flag) are meant for very important project versions, such as a software release, while lightweight tags are meant for private or temporary object labels.&lt;br /&gt;
For more information about &lt;code&gt;git tag&lt;/code&gt;, see &lt;a href=&quot;https://git-scm.com/docs/git-tag&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-remote&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;working-with-remote-repositories&quot;&gt;Working with remote Repositories&lt;/h2&gt;
&lt;p&gt;In order to see which remote servers you have configured for your project, you can run the following Git command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote
origin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In the output above, &lt;code&gt;origin&lt;/code&gt; is the default name that Git gives to the server you cloned your project from. If you also specify &lt;code&gt;-v&lt;/code&gt; flag, Git will show you the URLs that Git has stored for the remote shortname (e.g., origin) to be used when reading and writing to that remote repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote -v
origin  git@github.com:shahmoradi/foo.git (fetch)
origin  git@github.com:shahmoradi/foo.git (push)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In order to see more information about a particular remote repository in your project, you can use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote show origin
* remote origin
  Fetch URL: git@github.com:shahmoradi/foo.git
  Push  URL: git@github.com:shahmoradi/foo.git
  HEAD branch: master
  Remote branches:
    development tracked
    master      tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The above information indicates that the current HEAD branch of the project is on &lt;em&gt;master&lt;/em&gt; branch, and the remote branches on the remote repository are &lt;em&gt;master&lt;/em&gt; and &lt;em&gt;development&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can find more information about &lt;code&gt;git remote&lt;/code&gt; command in &lt;a href=&quot;https://git-scm.com/docs/git-remote&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-branch&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;git-branching&quot;&gt;Git branching&lt;/h2&gt;
&lt;p&gt;Branching is powerful idea in Version Control Systems, which significantly facilitates collaboration or parallel development of a project. Suppose you have already a project which has reached its first release version, meaning that it works all fine. Now, you like to add a new feature to your project. To do this and to avoid further commits to your original project, you can create a new &lt;strong&gt;branch&lt;/strong&gt; of the project which is specifically devoted to adding the new feature. See the following figure, for an example of Git branching.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/2/branch-flowchart.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        An example illustration of Git branching for a project with three branches: master, development, topic.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When you create a Git project, the default single branch in your project is &lt;strong&gt;master&lt;/strong&gt;. So, for example if you search for your project branches, you’d see,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you already have created other branches in your project, for example &lt;strong&gt;development&lt;/strong&gt;, then you may see a Git message like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* development
  master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;strong&gt;*&lt;/strong&gt; behind the branch name indicates that the project HEAD (i.e., your working directory) points to that branch, that is, all commits will be made to that branch that is highlighted with &lt;strong&gt;*&lt;/strong&gt;. In the example above, the working directory points to &lt;em&gt;development&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;In order to &lt;strong&gt;create a new branch&lt;/strong&gt; in your project, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
When you create a new branch, Git creates an exact duplicate of the current branch that you are in, but with the requested name for the new branch. In order to &lt;strong&gt;switch to a specific Git branch&lt;/strong&gt; in your project, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout development
Switched to branch 'development'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A shortcut for &lt;strong&gt;both creating a new branch from the current branch, and switching to the new branch automatically&lt;/strong&gt; is to use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout -b &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout -b test
Switched to a new branch 'test'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose, you have made some significant progress on your project &lt;strong&gt;development&lt;/strong&gt; branch, and now you want to add the newly developed feature to your &lt;strong&gt;master&lt;/strong&gt; branch. All you need to do, is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
$ git merge development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
By doing this, you first switch to master branch, then request Git, to &lt;strong&gt;merge&lt;/strong&gt; all changes made to the project on the &lt;em&gt;development&lt;/em&gt; branch to be copied and transferred to the &lt;em&gt;master&lt;/em&gt; branch. For example, if I have added a single &lt;code&gt;test.txt&lt;/code&gt; file, and committed the change to the development branch, then upon mergin with master, Git will display something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Updating 25129a0..57ed7c2
Fast-forward
 test.txt | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose there was no change in the development branch, since branching it from master. Then upon merging, you would get a message like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Already up-to-date.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Occasionally, conflicts may arise between branches upon merging. This happens when a common file between the two branches, has been modified on both branches in parallel. In such cases, you will need to resolve the conflict by choosing one of the file edits in one of the branches and discard the other. The following is an example merge conflict message by Git.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Auto-merging test.txt
CONFLICT (content): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, if you use &lt;code&gt;git status&lt;/code&gt; command, the following is the typical message that will be displayed,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch test
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)
  (use &quot;git merge --abort&quot; to abort the merge)

Unmerged paths:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)

        both modified:   test.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To resolve the conflict, open the conflicting file. There you will see the segments of the file from both versions which are the cause of the conflict. Edit the file as you wish. and then perform the normal &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; on the file, to resolve the conflict and complete the merge process.&lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;git merge&lt;/code&gt;, there is another more elegant and powerful Git command, &lt;code&gt;git rebase&lt;/code&gt; for integrating changes in different branches into a single branch. But, the subject goes beyond the goals of this class, and the interested reader is referred to &lt;a href=&quot;https://git-scm.com/docs/git-rebase&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt; for this command and &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Branching-Rebasing&quot; target=&quot;_blank&quot;&gt;this pedagogical Git page&lt;/a&gt; for &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-branch-d&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;deleting-a-branch&quot;&gt;Deleting a branch&lt;/h4&gt;
&lt;p&gt;Normally, when a branch merge is done, the development branch is not needed anymore, so it is always wise and cleaner to delete the unwanted branches, using the command &lt;code&gt;git branch -d &amp;lt;branch name&amp;gt;&lt;/code&gt;. To do this, on the same branch that you just performed &lt;code&gt;git merge&lt;/code&gt; use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Your branch is ahead of 'origin/master' by 1 commit.
  (use &quot;git push&quot; to publish your local commits)
Switched to branch 'master'
$ git branch -d test
Deleted branch hotfix (3a0874c).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that you cannot delete a branch while you are on it (i.e., while it is checked out). For example, Git will give you the following error message,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;You cannot delete a branch from another branch with which you have not performed the merging either&lt;/strong&gt;. In this case, Git will give the following error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: The branch 'test' is not fully merged.
If you are sure you want to delete it, run 'git branch -D test'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Advice for good project management&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Your &lt;i&gt;master&lt;/i&gt; branch should always contain the latest clean version of your project, that is, the complete and working version/release. You should always make your new developments in a separate branch, and once it works and the new feature/development is complete, you merge the new development into the master branch.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;

&lt;p&gt;&lt;sup id=&quot;fn1&quot;&gt;1. See &lt;a href=&quot;https://git-scm.com/docs/git-log&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt; for more details and updates. &lt;a href=&quot;#ref1&quot; title=&quot;Jump back to footnote 1 in the text.&quot;&gt;↩&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/2-advanced-git&quot;&gt;Lecture 2: Advanced Git concepts&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on February 01, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 1: A professional programmer uses Version Control System (VCS)]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/1-version-control-system"/>
  <id>http:/ECL2017S/lecture/1-version-control-system</id>
  <published>2017-01-25T00:00:00-06:00</published>
  <updated>2017-01-25T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief review of Version Control Systems, why they are needed, how they work, and the most prominent and popular version control software that are available today for professional collaborative programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some useful links for future reference:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ECL2017S/lecture/1/progit.en.pdf&quot; target=&quot;_blank&quot;&gt;Git reference manual (2009)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ECL2017S/lecture/1/github-git-cheat-sheet.pdf&quot; target=&quot;_blank&quot;&gt;Github’s Git cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ECL2017S/lecture/1/atlassian_git_cheatsheet.pdf&quot; target=&quot;_blank&quot;&gt;Atlassian’s Git cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ECL2017S/lecture/1/markdown-cheatsheet-online.pdf&quot; target=&quot;_blank&quot;&gt;Markdown language cheat-sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
#### Table of Content
- [Motivation](#Motivation)
- [What is Version Control System (VCS)?](#VCS)
- [Git/Mercurial version control system](#GM-VCS)
  - [Git/Mercurial project indexing method](#GM-indexingMethod)
  - [Remote repository options for your Git/Mercurial projects](#remRepos)
- [Setting up your first Git project on Github](#gitProjectSetup)
  - [Setting up your Git identity](#gitID)
  - [Two methods of project initialization](#gitInit)
  - [Local device and remote repository SSH connection](#lorcalRemoteConnection)
  - [Main Git commands](#mainGitCommands)  
    - [`git status`](#git-status)
    - [`git add`](#git-add)
    - [`git commit`](#git-commit)
    - [`git push`](#git-push)
    - [`git pull`](#git-pull)
    - [Git commands summary](#git-summary)
--&gt;

&lt;p&gt;&lt;a name=&quot;Motivation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Back in the early years of my graduate studies when I started scientific research and programming, the directory containing my first project looked something like the following figure.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/1/badCodingHabit.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        An example of bad coding habit and project maintenance. The figure shows part of the content of a directory dedicated to a research project. Each folder contains one version of the project and its corresponding codes and results at a given time (i.e., one &lt;a href=&quot;https://en.wikipedia.org/wiki/Deliverable&quot; target=&quot;_blank&quot;&gt;deliverable&lt;/a&gt;). Obviously, tracking minor development stages of the project leading to each of the deliverables would be a very difficult task with such project management method.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Clearly, there are many disadvantages and caveats with maintaining the structure of your project and codes similar to the content of the above figure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Data redundancy and storage inefficiency&lt;/strong&gt;&lt;br /&gt;
 Every time you want to develop your existing project and take it to the next level, you have to make a whole duplicate of the last version of your project to start the new development (i.e., the next version of your project). Obviously, your the new version of your project will have a lot in ocmmon with the previous version. But, each one has its own dedicated separate folder, there is &lt;em&gt;a lot of code and data redundancy&lt;/em&gt; in using such method for just keeping track of your project version history.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;High risk of errors and irreversible mistakes&lt;/strong&gt;&lt;br /&gt;
Using this method, it is easy to forget which directory you’re in and accidentally write to the wrong file or copy over files you don’t mean to.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Difficulty in tracking minor developments in the project&lt;/strong&gt;&lt;br /&gt;
 Every version of the project is supposed to correspond to one working version of the project, that is, in professional terminology, each stage of the project should correspond to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Deliverable&quot; target=&quot;_blank&quot;&gt;deliverable&lt;/a&gt;. Therefore, if all minor developments of the project are to be documented, then each minor development has to be recorded as a new version of the project, with its own dedicated directory. However, since this is practically impossible, the programmer (researcher) has to either skip documenting all minor improvements, and therefore lose track of every detailed development in the code, or exacerbate the first caveat mentioned above, by generating more and more redundant copies of the same codes and data for the sake of keeping track of all minor stages of the development.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ambiguity in version differences&lt;/strong&gt;&lt;br /&gt;
 With this primitive method of project version control, it is not clear what the main differences between different versions of the project are, unless a very detailed documentation is provided along with each version detailing the differences between the current, its ancestor (i.e., the previous version of the project) and its descendant (i.e., the next version of the project), or parallel independent versions of the project (i.e., the project &lt;a href=&quot;https://en.wikipedia.org/wiki/Branching_(version_control)&quot; target=&quot;_blank&quot;&gt;branches&lt;/a&gt;).
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sharing and collaboration difficulties&lt;/strong&gt;&lt;br /&gt;
 Since the entire project is locally stored and accessible to one programmer or researcher, any collaborative effort will be extremely difficult, and require manual duplication and syncing of the project with other developers.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Potential risk of complete data loss:&lt;/strong&gt;&lt;br /&gt;
 As a result of the local storage of the project on a single computer or storage device, there is always a high risk of losing the entire project due to hardware failure, or other unpredicted events.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fortunately, several smart powerful solutions and software have been developed, collectively known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control&quot; target=&quot;_blank&quot;&gt;Version Control System (VCS)&lt;/a&gt; for &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_configuration_management&quot; target=&quot;_blank&quot;&gt;project management&lt;/a&gt;, in particular, since the turn of the millennium.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;VCS&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-version-control-system-vcs&quot;&gt;What is Version Control System (VCS)?&lt;/h2&gt;

&lt;p&gt;Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Depending on how the project is maintained and shared with others, VCS are classified into three categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Local VCS&lt;/strong&gt;&lt;br /&gt;
 The simplest form of project version control, and probably the oldest method is &lt;em&gt;local VCS&lt;/em&gt; where the VCS software keeps track of details of evolution of files in the project only on a local storage device or computer. A prime example of such version control software is the GNU &lt;a href=&quot;https://www.gnu.org/software/rcs/&quot; target=&quot;_blank&quot;&gt;Revision Control System (RCS)&lt;/a&gt;. Such VCS are able to avoid problems 1-4 mentioned above. The following figure illustrates the inner working of a local VCS.&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;1/localVCS.png&quot; alt=&quot;Local Version Control&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;
 &lt;strong&gt;Major Caveats:&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;No easy way of collaboration and synchronization between team members.&lt;/li&gt;
      &lt;li&gt;Potential risk of complete data loss.&lt;br /&gt;
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Centralized VCS (CVCS)&lt;/strong&gt;&lt;br /&gt;
 Since collaborative effort is at the heart of almost every large-scale project, a new generation of VCS has been developed that go beyond the capabilities of local VCS. These VCS have a central repository that is accessible by all members of the project’s team. This central repository contains all the project’s information and its development history and clients (team members) can check out and owrk on individual files of the project. For many years this VCS has been the dominant method version control. Prime examples include &lt;a href=&quot;https://en.wikipedia.org/wiki/Concurrent_Versions_System&quot; target=&quot;_blank&quot;&gt;Concurrent Versions System (CVS)&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Perforce_Helix&quot; target=&quot;_blank&quot;&gt;Perforce Helix&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Subversion&quot; target=&quot;_blank&quot;&gt;Apache Subversion(SVN)&lt;/a&gt;. The following figure illustrates the inner working of a CVCS.&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;1/centralizedVCS.png&quot; alt=&quot;Centralized Version Control&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;
 &lt;strong&gt;Major Caveats:&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Since the main database of the project is centralized, and team members have only snapshots of a specific version of the project, any failure in the central database would halt the individual and collaborative works of all team members, since no further developments can be submitted to the central database.&lt;/li&gt;
      &lt;li&gt;Also, if the central database is completely corrupted with no backups, then the entire history of the project is lost.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Distributed VCS (DVCS)&lt;/strong&gt;&lt;br /&gt;
 In order to resolve the caveats of the aforementioned VCS, several new VCS known as &lt;em&gt;distributed VCS&lt;/em&gt; have been developed within the first decade of the new millennium. With these VCS, each client has an entire copy of the central database at his own local storage device. Thus, every &lt;strong&gt;clone&lt;/strong&gt; of the central repository that is with each client, is a full backup of all the project data.  Consequently, if the central server/repository fails for any reason, the local repository of the team member that has the most recent clone of the project database, can be used to restore the central repository. *This VCS paradigm is currently the most popular class of VCS and we will be using a major implementation of it known as &lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt; throughout this course. Other major DVCS implementations include &lt;a href=&quot;https://www.mercurial-scm.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Mercurial&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://bazaar.canonical.com/en/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Bazaar&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&quot;http://darcs.net/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Darcs&lt;/strong&gt;&lt;/a&gt;. The following figure illustrates the inner working of a DVCS.&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;1/distributedVCS.png&quot; alt=&quot;Distributed Version Control&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A rather complete list of all major VCS software implementations can be found &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_version_control_software&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;GM-VCS&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;gitmercurial-version-control-system&quot;&gt;Git/Mercurial version control system&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; is a DVCS that grew out of frustration between the Linux kernel developing community and a proprietary VCS software company that maintained and indexed Linux kernel development. Similar to the other major DVCS implementation &lt;a href=&quot;https://www.mercurial-scm.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Mercurial&lt;/strong&gt;&lt;/a&gt;, Git is designed with the following goals in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Speed.&lt;/li&gt;
  &lt;li&gt;Simple design.&lt;/li&gt;
  &lt;li&gt;Strong support for non-linear development (thousands of parallel branches).&lt;/li&gt;
  &lt;li&gt;Fully distributed.&lt;/li&gt;
  &lt;li&gt;Able to handle large projects like the Linux kernel efficiently (speed and data size).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;GM-indexingMethod&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;gitmercurial-project-indexing-method&quot;&gt;Git/Mercurial project indexing method&lt;/h3&gt;

&lt;p&gt;VCS software, such as SVN and and Bazaar, index the new developments in the projects by tracking the changes in individual files of the projects, similar to the diagram below.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/1/deltas.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption&gt;
        &lt;b&gt;File-based&lt;/b&gt; project indexing method that is common to some VCS software such as CVS, Subversion, Perforce, Bazaar. &lt;br /&gt;(&lt;i&gt;Diagram is adopted from &lt;a href=&quot;https://git-scm.com/doc&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;&lt;/i&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;By contrast, both Git and Mercurial work by generating a complete snapshot of the project at any moment the project is committed to the local repository for version control. Even if some files have not changed in the new version of the project, they will still exist in the newly generated version of the project. However, both Git and Mercurial have been designed smart enough to realize if any changes has occurred to each individual file and store the files effectively and without redundancy.  The complete history of the project is constructed by the series of snapshots generated, a flow similar to the following figure.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/1/snapshots.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption&gt;
        &lt;b&gt;Snapshot-based&lt;/b&gt; project indexing method that is used in Git and Mercurial VCS software. &lt;br /&gt;(&lt;i&gt;Diagram is adopted from &lt;a href=&quot;https://git-scm.com/doc&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;&lt;/i&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a name=&quot;gitAreas&quot;&gt;&lt;/a&gt;
Each project file in Git/Mercurial indexing process can have one of the three possible states:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;modified, but not staged:&lt;/strong&gt;
 This is when a project file is modified by the user, but Git/Mercurial has no track of the file changes at the moment. If the file is lost or removed unexpectedly, then Git cannot recover the file.
 &lt;br /&gt;&lt;br /&gt;
 &lt;a name=&quot;stagingArea&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;staged for commit to the repository:&lt;/strong&gt;
 When a file is modified it can be added to the Git staging area to be later &lt;em&gt;committed&lt;/em&gt; permanently to the repository. The staging area is a file, generally contained in the project’s repository (&lt;code&gt;.git&lt;/code&gt; directory), that stores information about what will go into the next &lt;em&gt;commit&lt;/em&gt; to the repository. The staging area is also sometimes referred to as the &lt;strong&gt;index&lt;/strong&gt;.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;committed to the repository:&lt;/strong&gt; Once the staged files are &lt;em&gt;committed&lt;/em&gt; to the repository, they become a permanent part of it, and can be later extracted (checked out) for review or further development.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These three file states comprise an important integral part of Git and Mercurial. The following figure provides an illustration of the three file states.
&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/1/gitAreas.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption&gt;
        A diagram illustrating the project-indexing process of Git and Mercurial VCS software. Each project file can reside in three different states: working directory, staging area, or in the local repository. (&lt;i&gt;Diagram is adopted from &lt;a href=&quot;https://git-scm.com/doc&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;&lt;/i&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a name=&quot;remRepos&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;remote-repository-options-for-your-gitmercurial-projects&quot;&gt;Remote repository options for your Git/Mercurial projects&lt;/h3&gt;

&lt;p&gt;Git can be downloaded and installed from &lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for Windows, Mac, or Linux systems. The installation guide is available &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Mercurial can be downloaded and installed from &lt;a href=&quot;https://www.mercurial-scm.org/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for Windows, Mac, or other operating systems. For collaborative projects, you will need a central (remote) project repository to which all team members submit their latest developments. &lt;em&gt;Even if you are working on a project alone, it is always a good idea to submit all your project developments to a remote repository for the sake of avoiding unpredicted data loss and also publicly showcasing your work.&lt;/em&gt; Two popular online repositories for version-controlled projects are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt;, which is also an Internet hosting service works and works exclusively for projects that are indexed using Git. As of today, all public projects (visible to everyone on the web) are free-of-charge. For private projects you will have to pay a monthly fee. However, &lt;a href=&quot;https://github.com/blog/1900-the-best-developer-tools-now-free-for-students&quot; target=&quot;_blank&quot;&gt;Github Student&lt;/a&gt; offers a micro-account specially for students with five private repositories free-of-charge (normally $7/month) while you’re a student.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Bitbucket&lt;/strong&gt;&lt;/a&gt;, which used to exclusively host Mercurial-indexed projects, but as of 2011 can also host Git-indexed projects. As of today, all projects, public or private (up to 5 users), can be stored on Bitbucket free-of-charge.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following is a concise comparison between the general features and services of Github and Bitbucket.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;Bitbucket&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Supported VCS&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Mercurial, Git&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Git&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Public repos&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Free, unlimited&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Free, unlimited&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Private repos&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Free up to 5 users&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Starts at $7/month for unlimited users&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Popular projects hosted&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;Adium, Mailchimp, Opera, Python, Django&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;Bootstrap, Node.js, jQuery, Rails, Homebrew&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Notable Extra features&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;External authentication via Github, Twitter, Facebook, Google&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;Two-factor authentication, Github Pages, Github Gists&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;gitProjectSetup&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up-your-first-git-project-on-github&quot;&gt;Setting up your first Git project on Github&lt;/h2&gt;

&lt;p&gt;For this course, we will use Git as our version control software, and Github as central (remote) repository. Follow the following guidelines to create your first Git project on Github.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://education.github.com/&quot; target=&quot;_blank&quot;&gt;Github Student&lt;/a&gt; and create your student account.&lt;/li&gt;
  &lt;li&gt;Download and install &lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt; on your computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;gitID&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;setting-up-your-git-identity&quot;&gt;Setting up your Git identity&lt;/h3&gt;

&lt;p&gt;The first thing you should do when you install Git is to set your user-name and email address. This is important because every Git commit uses this information, and this information is permanently baked into the &lt;em&gt;commits&lt;/em&gt; you start making to your projects’ repositories. To set your name and email globally for all Git projects &lt;em&gt;once and for all&lt;/em&gt; on your computer, use the following Git commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git config --global user.name &quot;&amp;lt;your name, e.g., Amir Shahmoradi&amp;gt;&quot;
$ git config --global user.email &amp;lt;your email, e.g., amir@ices.utexas.edu&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You need to do this only once if you pass the &lt;code&gt;--global&lt;/code&gt; option, because then Git will always use the provided information for anything you do with Git on your system. If you want to override this information with a different name or email address later on for some specific projects, you can run the above same Git commands, but &lt;em&gt;without the &lt;code&gt;--global&lt;/code&gt; optional flag when you are in your specific project’s directory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;gitInit&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;two-methods-of-project-initialization&quot;&gt;Two methods of project initialization&lt;/h3&gt;

&lt;p&gt;Now at this point, there are two ways for project initialization. We will go through both here. A good detailed tutorial can be found &lt;a href=&quot;https://www.atlassian.com/git/tutorials/setting-up-a-repository&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;1-remote-project-initialization-on-github&quot;&gt;&lt;strong&gt;1. Remote project initialization (on Github)&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;With this method you first initialize an empty project on Github, and then clone the project from the remote (Github) repository to your local device, using the &lt;code&gt;git clone&lt;/code&gt; command, discussed later below. To create a remote repository on Github, login to your Github account and follow the instructions on &lt;a href=&quot;https://help.github.com/articles/create-a-repo/&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;2-local-project-initialization&quot;&gt;&lt;strong&gt;2. Local project initialization&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Local project initialization is done by the following git command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This command will initialize an empty repository in the current directory. If you check the repository, you will notice that a &lt;code&gt;.git&lt;/code&gt; (hidden) folder has been added to the directory. This folder will contain all history of your new project, and anything in the current directory in which &lt;code&gt;.git&lt;/code&gt; folder exists will be indexed as part of the project.&lt;br /&gt;
In order to generate the project’s repository in different directory, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git init &amp;lt;directory name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Even if the requested directory does not exist, git will first automatically create the requested directory and initialize the empty project inside it. That’s it! Now all you need to do is to start adding or developing your project files inside the project folder.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;lorcalRemoteConnection&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;local-device-and-remote-repository-ssh-connection&quot;&gt;Local device and remote repository SSH connection&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;Why is SSH needed?&lt;/strong&gt;&lt;br /&gt;
Now every time may you want to &lt;strong&gt;clone&lt;/strong&gt; your remote private repository to your local device or &lt;strong&gt;push&lt;/strong&gt; your local repository to a remote server (your Github account), or basically do any communication between the local and remote repositories, Git will ask you to authenticate your connection by supplying your Github username and password. Note that this security behavior is necessary, since you don’t want just anyone to be able to push to your personal projects or mess with them without your prior permission.
However, this rather annoying user/pass request by Git can be resolved by setting up an &lt;strong&gt;SSH&lt;/strong&gt; secure connection between your local device and the remote repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;br /&gt;
Think of your local device as a person who has a set of keys, now if your remote repository is a home with an entrance key hole that matches one of the person’s (local device’s) keys, then the person (your device) can gain access to the interior of the home (your remote repository).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is it set up?&lt;/strong&gt;&lt;br /&gt;
You can generate keys for your local device by following the instructions given &lt;a href=&quot;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Once you have generated the key and the key hole, you can add a copy of the key hole to your Github account by following the instructions given &lt;a href=&quot;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example educational video, explaining the SSH key setup process:&lt;/p&gt;
&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/H5qNpRGB7Qw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;mainGitCommands&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;main-git-commands&quot;&gt;Main Git commands&lt;/h3&gt;

&lt;p&gt;As of today, Git has more than 150 commands. For a complete list, you can type on your &lt;em&gt;Git bash&lt;/em&gt; command window,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git help -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to see a list of all Git commands. Note that every Git command begins with &lt;code&gt;git&lt;/code&gt;. Despite the long list of Git commands, you will likely use only five of them on an everyday basis. Not that the rest are unimportant, but with these five basic commands you will be at least able to develop and index your project, and communicate with remote repository and colleagues. In order to understand these five, we will have to recall the three states of a project’s files, described earlier &lt;a href=&quot;#gitAreas&quot;&gt;above&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-status&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-check-the-status-of-the-project&quot;&gt;1. Check the status of the project&lt;/h4&gt;

&lt;p&gt;First of all, you can check the status of your git project at any time by typing the following command in the git-bash prompt window, assuming the command line is already on the project’s directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-add&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-add-files-to-the-staging-area&quot;&gt;2. Add files to the staging area&lt;/h4&gt;

&lt;p&gt;In order to add any of the modified or new files to the &lt;a href=&quot;#stagingArea&quot;&gt;staging area&lt;/a&gt;, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add &amp;lt;file name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To add all modified files (including file removals as well as changes) to the staging area, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add -A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This command is equivalent to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add .
$ git add -u
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The first command stages new and modified files, but not the deleted files. The second command, stages modified and deleted files, without the newly created files.&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git add&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-add&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-commit&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-commit-the-staged-files-to-the-local-repository&quot;&gt;3. Commit the staged files to the local repository&lt;/h4&gt;

&lt;p&gt;The stages files can be committed (i.e., submitted permanently) to the local repository by&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
once this command is entered, a new page for &lt;em&gt;log message&lt;/em&gt; will open on the command line, which contains the list of all files to be committed, and a place at the top of the page to add comments regarding this version of the files that is being committed to the repository. To add a comment, press &lt;code&gt;i&lt;/code&gt; to enter the &lt;em&gt;insert&lt;/em&gt; mode of the &lt;strong&gt;vim&lt;/strong&gt; text-editor. Once comment is added, press &lt;code&gt;ESC&lt;/code&gt; button to exit the insert mode, and write &lt;code&gt;:wq&lt;/code&gt; on the command-line to &lt;strong&gt;w&lt;/strong&gt;rite the comment file (i.e., save it) and &lt;strong&gt;q&lt;/strong&gt;uit &lt;em&gt;vim&lt;/em&gt; text-editor.&lt;/p&gt;

&lt;p&gt;If you use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Both commands act as a shortcut to first automatically &lt;strong&gt;stage files&lt;/strong&gt; that have been &lt;strong&gt;modified and deleted&lt;/strong&gt; and then &lt;strong&gt;commit&lt;/strong&gt; them to the repository, but &lt;strong&gt;not the new files&lt;/strong&gt; that you have not yet told Git about. Another useful flag is &lt;code&gt;-m&lt;/code&gt; with which you can enter a short message on the command line as the log message of the commit, and therefore no new page will open up for entering log message,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -m &quot;This is a test commit!&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;-a&lt;/code&gt; and &lt;code&gt;-m&lt;/code&gt; flags can be combined to automatically stage and commit the files together,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -am &quot;This is a test commit!&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;But, keep in mind that with this method of staging, the &lt;strong&gt;new files&lt;/strong&gt; will neither be staged nor committed to the repository.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git commit&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-commit&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-push&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-push-the-changes-in-local-repository-to-the-remote-repository&quot;&gt;4. Push the changes in local repository to the remote repository&lt;/h4&gt;

&lt;p&gt;Now, in order to &lt;em&gt;push&lt;/em&gt; all your commits from the local repository to the remote repository, in order to place permanently there and be able to share it with others, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git push --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
We have not yet talked about &lt;strong&gt;git branches&lt;/strong&gt;, but what the above command basically does is that it orders Git to &lt;strong&gt;push all project branches&lt;/strong&gt; to the remote repository. Later on, we will talk more about different flags that can follow &lt;code&gt;git push&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git push&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-push&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-pull&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-pull-the-latest-project-revision-from-the-remote-to-the-local-repository&quot;&gt;5. Pull the latest project revision from the remote to the local repository&lt;/h4&gt;

&lt;p&gt;Now, in order to &lt;em&gt;pull&lt;/em&gt; the latest revision of the project – a result of other people’s work that is not available in your local repository – from the remote to the your local repository, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There are some important details about &lt;code&gt;git pull&lt;/code&gt; which we will delve into later on in the following lectures.&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git push&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-pull&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-summary&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-commands-summary&quot;&gt;Git commands summary&lt;/h4&gt;
&lt;p&gt;All in all, the most trivial, but also the most useful git commands are the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
$ git add --all
$ git commit
$ git push --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
for submitting your changes to the local and remote repositories, and&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
for syncing your local with the remote repository. Remember that you have to use these commands, in the above forms, inside the directory of the project.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;

&lt;!--
[^2]: &lt;span style=&quot;font-size:0.7em&quot;&gt;For a short history of Git see [Git history](https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git){:target=&quot;_blank&quot;}.&lt;/span&gt;
--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;span style=&quot;font-size:0.7em&quot;&gt;For a thorough review of VCS and particularly Git, see the &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.&lt;/span&gt;&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/1-version-control-system&quot;&gt;Lecture 1: A professional programmer uses Version Control System (VCS)&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on January 25, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 0: Programming history]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/0-programming-history"/>
  <id>http:/ECL2017S/lecture/0-programming-history</id>
  <published>2017-01-18T00:00:00-06:00</published>
  <updated>2017-01-18T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief history of the development of computers and computer programming languages and their mutual interaction with rapid developments in natural sciences in the 20th century.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-rise-of-the-machines&quot;&gt;The rise of the machines&lt;/h3&gt;

&lt;p&gt;Immediately after the first world-war and during the second world-war, many fields of science and engineering witnessed rapid growth. In particular, two fields of mathematical and physical sciences, &lt;strong&gt;mathematical programming&lt;/strong&gt; (a terminology used commonly in place of &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematical_optimization&quot; target=&quot;_blank&quot;&gt;mathematical optimization&lt;/a&gt;) (not to be confused with computer programming!) and &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot; target=&quot;_blank&quot;&gt;Monte Carlo methods&lt;/a&gt; witnessed rapid exponential growth in both theory and practical applications. Parallel to progresses in natural sciences, a new field of science and technology, &lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_computer_science&quot; target=&quot;_blank&quot;&gt;computer science&lt;/a&gt;, began to rise during the years of world-war-II, partly in response to the needs of war, but mostly in response to the exponential growth of natural sciences and engineering in the post-world-war-II era.&lt;/p&gt;

&lt;p&gt;The history of computer programming probably begins with the development of the first computer, &lt;a href=&quot;https://en.wikipedia.org/wiki/ENIAC&quot; target=&quot;_blank&quot;&gt;ENIAC&lt;/a&gt; (&lt;em&gt;Electronic Numerical Integrator And Computer&lt;/em&gt;), one of the earliest electronic general-purpose computers made.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/0/wordFreq.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A word-usage relative frequency plot, illustrating the exponential growth of computer technology in the mid 20th century, as well as developments in the fields of deterministic and stochastic optimization techniques, which ultimately led to the emergence of &lt;a href=&quot;https://www.nibib.nih.gov/science-education/science-topics/computational-modeling&quot; target=&quot;_blank&quot;&gt;computational modeling&lt;/a&gt; as the third pillar of science. Advances in the computational methods and technology also led to the gradual popularity of Bayesian techniques in mathematical modeling towards the end of the 20th century, and the emergence of an important of subfield of computational modeling, now known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Uncertainty_quantification&quot; target=&quot;_blank&quot;&gt;Uncertainty Quantification&lt;/a&gt;. Note that the positive-slope linear behavior on this semi-logarithmic plot indicates a exponential growth. (Data is adopted from &lt;a href=&quot;https://books.google.com/ngrams&quot; target=&quot;_blank&quot;&gt;Google Ngrams&lt;/a&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;programming-language-generations&quot;&gt;Programming language generations&lt;/h3&gt;

&lt;p&gt;Initially computers had to be programmed by what is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine code&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine language&lt;/a&gt;, a set of instructions for the Central Processing Unit (CPU)  of the computer, comprising a long sequence of binary digital zeros and ones. Any interaction with computer hardware, even nowadays, has to be first converted to machine code in order to become comprehensible by the computer hardware. The coding in this language is however, very tedious and time consuming, and non-portable. As a result, immediately after the development of the first generation of computers, the first generation of programming languages also came to exist, most notably, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot; target=&quot;_blank&quot;&gt;Assembly language&lt;/a&gt; in the late 1940s. Many more programming languages have been since developed that provide higher and higher levels of &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstraction_(software_engineering)&quot; target=&quot;_blank&quot;&gt;programming abstraction&lt;/a&gt; by hiding more complexities of the machine code interaction with machine hardware from the front-end computer software and users.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;http:/ECL2017S/lecture/0/PLchart.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ECL2017S/lecture/0/PLchart.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A diagram tracing the history of computer languages throughout the history of computer science.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Depending on their levels of abstraction, programming languages are classified into different generations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/First-generation_programming_language&quot; target=&quot;_blank&quot;&gt;First generation&lt;/a&gt; languages, or machine languages, are the lowest-level computer programming languages, which provide no abstraction in their interactions with computer hardware. These languages directly interact with computer hardware, and so there is no need for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot; target=&quot;_blank&quot;&gt;compiler&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language#Assembler&quot; target=&quot;_blank&quot;&gt;assembler&lt;/a&gt; to interpret these languages for the hardware.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Second generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/Second-generation_programming_language&quot; target=&quot;_blank&quot;&gt;second generation&lt;/a&gt; languages, are at a higher level of abstraction from the machine hardware, meaning that they require an &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language#Assembler&quot; target=&quot;_blank&quot;&gt;assembler&lt;/a&gt; to interpret the code for the computer hardware. The most prominent and, to my understanding, the sole language of this generation is &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot; target=&quot;_blank&quot;&gt;Assembly&lt;/a&gt;, which is the closest-possible compiled programming language to computer hardware.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Third generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/Third-generation_programming_language&quot; target=&quot;_blank&quot;&gt;third generation&lt;/a&gt; languages, or &lt;a href=&quot;https://en.wikipedia.org/wiki/High-level_programming_language&quot; target=&quot;_blank&quot;&gt;high-level&lt;/a&gt; programming languages provide an even higher abstraction level than the second-generation languages. Third-generation languages make programming almost platform-independent, meaning that the content of the code does not depend directly on the current hardware being used. This helps the programmer to focus more on the problem of interest, rather than spending time to understand details of the specific computer and hardware being currently used. Examples of third-generation programming languages are: &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/ALGOL&quot; target=&quot;_blank&quot;&gt;ALGOL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL&quot; target=&quot;_blank&quot;&gt;COBOL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/BASIC&quot; target=&quot;_blank&quot;&gt;BASIC&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot; target=&quot;_blank&quot;&gt;C&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&quot; target=&quot;_blank&quot;&gt;C#&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot; target=&quot;_blank&quot;&gt;C++&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Pascal_(programming_language)&quot; target=&quot;_blank&quot;&gt;Pascal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fourth generation:&lt;/strong&gt; The definition for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourth-generation_programming_language&quot; target=&quot;_blank&quot;&gt;fourth generation&lt;/a&gt; and beyond is not very clear, however, it is generally as the set of languages that provide an even higher level of abstraction from the hardware and proximity to the user (programmer). Some prominent examples of this category include &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot; target=&quot;_blank&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Perl&quot; target=&quot;_blank&quot;&gt;Perl&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ruby_(programming_language)&quot; target=&quot;_blank&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/IDL_(programming_language)&quot; target=&quot;_blank&quot;&gt;IDL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/R_programming_language&quot; target=&quot;_blank&quot;&gt;R&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/S_(programming_language)&quot; target=&quot;_blank&quot;&gt;S&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the field of scientific computation, &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt; (FORmula TRANslation), first released in 1956, is undoubtedly the most influential programming language of all human history and the oldest high-level programming language that is still in active everyday use. Here is a history of Fortran by its original developers:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/KohboWwrsXg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-final-personal-remark&quot;&gt;A final, personal remark&lt;/h3&gt;

&lt;p&gt;Sometimes science acts like humans: it finds a matching partner (a programming language), then they flourish together, make a love story and occasionally decline together as well, with the only difference that polygamy is allowed in science, like Fortran’s marriage with Aerospace and &lt;a href=&quot;https://en.wikipedia.org/wiki/Plasma_(physics)&quot; target=&quot;_blank&quot;&gt;Plasma physics&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=fortran%2Cplasma%2Caerospace&amp;amp;case_insensitive=on&amp;amp;year_start=1920&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cfortran%3B%2Cc0%3B%2Cs0%3B%3BFORTRAN%3B%2Cc0%3B%3BFortran%3B%2Cc0%3B.t4%3B%2Cplasma%3B%2Cc0%3B%2Cs0%3B%3Bplasma%3B%2Cc0%3B%3BPlasma%3B%2Cc0%3B%3BPLASMA%3B%2Cc0%3B.t4%3B%2Caerospace%3B%2Cc0%3B%2Cs0%3B%3BAerospace%3B%2Cc0%3B%3Baerospace%3B%2Cc0%3B%3BAEROSPACE%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ECL2017S/lecture/0/plasma-aerospace-fortran.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the co-evolution of two of the most challenging computationally-intensive fields of science (Aerospace and Plasma Physics) with the most popular high-performance scientific programming language in human history as of today. The vertical axis represents the relative word-usage frequency of the three keywords (Plasma, Aerospace, and Fortran) in all digital corpus, and the horizontal axis represents the year. Note that the downward slope of the curves in later times does NOT imply the decline of these fields of science or the decline of Fortran. It merely means that they have reached their exponential peak growth in the mid-1980s, and are now expanding steadily (linearly), whereas other newer fields (such as bioinformatics) are being more and more frequently referenced than the above three keywords every year in all digital corpus.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Many times throughout the recent history, some specific fields of science have boosted and popularized some computer programming languages and vice versa, in a positive feedback loop. A younger just-married couple seems to be Bioinformatics-Python, both of which, as of today seem to be thriving:&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=python%2Cbioinformatics&amp;amp;case_insensitive=on&amp;amp;year_start=1980&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cpython%3B%2Cc0%3B%2Cs0%3B%3BPython%3B%2Cc0%3B%3Bpython%3B%2Cc0%3B%3BPYTHON%3B%2Cc0%3B.t4%3B%2Cbioinformatics%3B%2Cc0%3B%2Cs0%3B%3BBioinformatics%3B%2Cc0%3B%3Bbioinformatics%3B%2Cc0%3B%3BBIOINFORMATICS%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ECL2017S/lecture/0/bioinformatics-python.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the co-evolution and thriving of the field of bioinformatics with the popular programming language, Python. The vertical axis represents the relative word-usage frequency of the two keywords (Bioinformatics and Python) in all digital corpus, and the horizontal axis represents the year.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Sometimes, a programming language couples with a specific field of science and thrives for a few years, only to be soon replaced with a younger, more attractive, programming language. This is probably what happened to the co-evolution of Perl with bioinformatics, a language which was gradually replaced with Python in the beginning of the new millennium, at least in the field of bioinformatics.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=python%2Cbioinformatics%2Cperl&amp;amp;case_insensitive=on&amp;amp;year_start=1980&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cpython%3B%2Cc0%3B%2Cs0%3B%3BPython%3B%2Cc0%3B%3Bpython%3B%2Cc0%3B%3BPYTHON%3B%2Cc0%3B.t4%3B%2Cbioinformatics%3B%2Cc0%3B%2Cs0%3B%3BBioinformatics%3B%2Cc0%3B%3Bbioinformatics%3B%2Cc0%3B%3BBIOINFORMATICS%3B%2Cc0%3B.t4%3B%2Cperl%3B%2Cc0%3B%2Cs0%3B%3BPerl%3B%2Cc0%3B%3Bperl%3B%2Cc0%3B%3BPERL%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ECL2017S/lecture/0/bioinformatics-python-perl.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the evolution and steady expansion of the Perl programming language and its gradual replacement with Python, in the field of bioinformatics. The vertical axis represents the relative word-usage frequency of the three keywords (Bioinformatics, Python, and Perl) in all digital corpus, and the horizontal axis represents the year.
    &lt;/figcaption&gt;
&lt;/figure&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/0-programming-history&quot;&gt;Lecture 0: Programming history&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on January 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 1: Assessing your programming knowledge and interests]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/announcement/1-assessing-your-programming-knowledge-and-interests"/>
  <id>http:/ECL2017S/announcement/1-assessing-your-programming-knowledge-and-interests</id>
  <published>2017-01-18T00:00:00-06:00</published>
  <updated>2017-01-18T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to assess your prior programming experience and to identify the favorite programming language of the class. Please fill out the following two survey questions, and submit them within 3 minutes.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;script&gt;
        (function(t,e,c,s){var n,o,r;t.SMCX=t.SMCX||[],e.getElementById(s)||(n=e.getElementsByTagName(c),o=n[n.length-1],r=e.createElement(c),r.type=&quot;text/javascript&quot;,r.async=!0,r.id=s,r.src=[&quot;https:&quot;===location.protocol?&quot;https://&quot;:&quot;http://&quot;,&quot;widget.surveymonkey.com/collect/website/js/cWwdqYkJlcOqqIvX4OQ6L0ROZOarbpr7vA_2BB3stCB3CdrDL1W7Ipzjdzq6PQKazc.js&quot;].join(&quot;&quot;),o.parentNode.insertBefore(r,o))})(window,document,&quot;script&quot;,&quot;smcx-sdk&quot;);
    &lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;survey-results&quot;&gt;Survey results&lt;/h2&gt;
&lt;p&gt;The following are the results of the two questions of the survey. The total respondents for both questions were 21. It appears that almost everyone in class, knows at least one programming language at medium level. Also it appears that almost everyone in this class is in love with Python!&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/1/programmingExperience.png&quot; width=&quot;700&quot; /&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/1/programmingExperienceStat.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/1/favoriteLanguage.png&quot; width=&quot;700&quot; /&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/1/favoriteLanguageStat.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/announcement/1-assessing-your-programming-knowledge-and-interests&quot;&gt;Announcement 1: Assessing your programming knowledge and interests&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on January 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 0: Student-professor connection day]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/announcement/0-student-professor-connection-day"/>
  <id>http:/ECL2017S/announcement/0-student-professor-connection-day</id>
  <published>2017-01-18T00:00:00-06:00</published>
  <updated>2017-01-18T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;I have ordered cookies to be delivered to our first ECL class. We will try to get to know each other and I will attempt to describe my research work and educational background for you, as well as what we should expect from this course. Then I will give you links to two surveys that will assess your programming knowledge and will determine the favorite programming language which the majority of class wish to learn.&lt;/p&gt;

&lt;h2 id=&quot;about-me-amir-the-instructor&quot;&gt;About me, Amir, the instructor&lt;/h2&gt;

&lt;p&gt;I am a physicist and researcher, currently at &lt;a target=&quot;_blank&quot; href=&quot;https://www.ices.utexas.edu/&quot;&gt;Institute for Computational Engineering and Sciences&lt;/a&gt; at &lt;a target=&quot;_blank&quot; href=&quot;http://www.utexas.edu/&quot;&gt;The University of Texas at Austin&lt;/a&gt;. I am a member of the &lt;a target=&quot;_blank&quot; href=&quot;http://cco.ices.utexas.edu/&quot;&gt;Center for Computational Oncology&lt;/a&gt; led by &lt;a target=&quot;_blank&quot; href=&quot;https://www.bme.utexas.edu/about-us/faculty-directory/yankeelov&quot;&gt;Dr. Thomas E. Yankeelov&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;https://www.ices.utexas.edu/people/85/&quot;&gt;Dr. J. Tinsley Oden&lt;/a&gt; at ICES with the goal of understanding Tumor Growth.&lt;/p&gt;

&lt;p&gt;The following figures show the growth of Glioblastoma tumor cells in a Rat’s brain over time.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_1_t10.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_2_t12.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_3_t14.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_5_t16.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_6_t18.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_7_t20.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;One of the fields on which my research is currently focused, is developing Monte Carlo optimizer/sampler and integrator algorithms for Bayesian inverse problems. Below you see example animations of two &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo&quot; target=&quot;_blank&quot;&gt;Markov Chain Monte Carlo&lt;/a&gt; (MCMC) samplers, both of which sample a double Gaussian-peak function, but with different MCMC sampling parameters.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/0/PDF_RS_L_Forever20ms.gif&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of low-efficiency, but good-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/announcement/0/PDF_RS_H_Forever20ms.gif&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of highly-efficiency, but bad-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;While my current focus of research is mathematical modelling of tumor growth and Monte Carlo samplers, I am and have been working in multiple branches of science and engineering for several years, from the subatomic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Elementary_particle&quot;&gt;elementary particles&lt;/a&gt;, to the microscopic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Macromolecule&quot;&gt;biological macromolecules&lt;/a&gt;, to &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot;&gt;astrophysical phenomena&lt;/a&gt; occurring on the grandest scales of the &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Observable_universe&quot;&gt;observable Universe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For several years of my research, I have been working on understanding Gamma-Ray Bursts (GRB) and their physics. Below is a movie of the moment a Short-duration GRB is generated from the merger of a binary Neutron star system.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/P2ESs1rPO_A?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I have also worked for a few years in the field of bioinformatics and evolutionary biology. The overarching goal in the field of protein bioinformatics and biophysics is to understand how proteins fold into their unique structure, and what determines the stability of the protein &lt;abbr title=&quot;3-Dimensional&quot;&gt;3D&lt;/abbr&gt; structure. One of the workhorses of this field, is therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Molecular_dynamics&quot; target=&quot;_blank&quot;&gt;molecular dynamic simulation&lt;/a&gt; to probe the dynamics of proteins and their interactions with other molecules. The following is a 1.5ns molecular dynamics simulation of Human Influenza H1 Hemagglutinin protein (&lt;a href=&quot;http://www.rcsb.org/pdb/explore.do?structureId=1rd8&quot; target=&quot;_blank&quot;&gt;1RD8&lt;/a&gt;, chains AB).&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- &lt;div id=&quot;video&quot;&gt; --&gt;

&lt;!--
&lt;div class=&quot;videoWrapper&quot;&gt;
&lt;div class=&quot;flex-video&quot;&gt;
    &lt;embed src=&quot;https://www.youtube.com/embed/P2ESs1rPO_A?rel=0&quot; style=&quot;width:100%;height:480px&quot; frameborder=&quot;0&quot; allowfullscreen&gt;
&lt;/div&gt;
&lt;/div&gt;
--&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/announcement/0-student-professor-connection-day&quot;&gt;Announcement 0: Student-professor connection day&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017 - W 9-10 AM - WRW 209&lt;/a&gt; on January 18, 2017.&lt;/p&gt;</content>
</entry>

</feed>
