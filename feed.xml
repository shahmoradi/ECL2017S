<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">COE 111L - Spring 2017</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/ECL2017S/feed.xml" />
<link rel="alternate" type="text/html" href="http:/ECL2017S/" />
<updated>2017-04-26T14:12:31-05:00</updated>
<id>http:/ECL2017S/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/ECL2017S/</uri>
  <email>amir@ices.utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Homework 10: Problems - Python advanced, Monte Carlo methods]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/10-problems-python-advanced-monte-carlo"/>
  <id>http:/ECL2017S/homework/10-problems-python-advanced-monte-carlo</id>
  <published>2017-04-26T00:00:00-05:00</published>
  <updated>2017-04-26T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This homework further explores Monte Carlo methods in Python.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;Monte Carlo approximation of the number $\pi$&lt;/strong&gt;. Suppose we did not know the value of $\pi$ and we wanted to estimate its value using Monte Carlo methods. One practical approach is to draw a square of unit side, with its diagonal opposite corners extending from the coordinates origin $(0,0)$ to $(1,1)$. Now we try to simulate uniform random points from inside of this square by generating uniform random points along the $X$ and $Y$ axes, i.e., by generating two random uniform numbers (x,y) from the range $[0,1]$.&lt;/p&gt;

&lt;p&gt;Now the generated random point $P$ has ther coordinate $(x,y)$, so we can calculate its distance from the coordiante origin. Now suppose we also draw a quarter-circle inside of this square whose radius is unit and is centered at the origin $(0,0)$. The ratio of the area of this quarter-circle, $S_C$ to the area of the area of the square enclosing it, $S_S$ is,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{S_C}{S_S} = \frac{\frac{1}{4}\pi r^2}{r^2} = \frac{1}{4}\pi&lt;/script&gt;

&lt;p&gt;This is because the area of the square of unit sides, is just 1. Therefore, if we can somehow measure the area of the quarter $S_C$, then we can use the following equation, to get an estimate of $\pi$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi = 4S_C&lt;/script&gt;

&lt;p&gt;In order to obtain, $S_C$, we are going to throw random points in the square, just as described above, and then find the fraction of points, $f=n_C/n_{\rm total}$, that fall inside this quarter-circle. This fracton is related to the area of the circle and square by the following equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f=\frac{n_C}{n_{\rm total}} = \frac{S_C}{S_S}&lt;/script&gt;

&lt;p&gt;Therefore, one can obtain an estimate of $\pi$ using this fraction,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi \approx \frac{1}{4}\frac{n_C}{n_{\rm total}}&lt;/script&gt;

&lt;p&gt;Now, write a Python function, that takes in the number of points to be simulated, and the calculate an approximate value for $\pi$ based on the Monte Carlo algorithm described above.  Write a second function that plot the estimate of $\pi$ versus the number of points simulated, like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/10/approximatePi_10000.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Monte Carlo sampling of distribution functions&lt;/strong&gt; Suppose that you wanted to generate points whose distribution follows the blue curve in the following curve, whose mathematical formulation is known (in the case here, the function is just the sum of two Gaussian distributions).&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/10/normSum.gif&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, one oway of doing this, is to draw a box around this curve, such that the box encompasses the entire curve.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/10/normSumWithRec_2.gif&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then, just as we did in the previous problem above, we draw random points from this square, and keep only those points that fall beneath this blue curve, like the red points in the following animation.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/10/RejSamForever.gif&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, if you plot the histogram of these points, you will see that the distribution of the red points follows closely the blue curve that we wanted to sample.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/10/rejSamHistForever.gif&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, given the above example, consider the following distribution function which we want to sample,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = \frac{(x+1)}{12} \exp\bigg(-\frac{(x-1)^2}{2x}\bigg) ~~,~~ x &gt; 0.&lt;/script&gt;

&lt;p&gt;Suppose we know already that the highest point (maximum value) of this function is $f&amp;lt;0.2$, so that the value of this function always remains below $0.2$ everywhere along the positive x-axis, as seen in the following figure,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/10/prob2Func.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Now, first write a function that generates a plot of this function, similar to the above plot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; Then write another Python script, that samples from this function by first drawing a rectangle of base size $[0,15]$ and height $[0,h]$ with $h=0.2$. Then, draw uniform random points from this rectangle, and keep those that fall beneath the the value of $f(x)$ given above as points that are sampled from this function. Finally make a histogram of these points like the following.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/10/prob2FuncHist.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; Now make a plot of all generated points, both those that were accepted as samples, and those that were rejected, similar to the following plot, with accepted points in red color, and rejected points in black,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/10/prob2FuncScatter.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/10-problems-python-advanced-monte-carlo&quot;&gt;Homework 10: Problems - Python advanced, Monte Carlo methods&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 26, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 11: Python advanced topics - decorators and classes]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/11-python-advanced-decorator-class"/>
  <id>http:/ECL2017S/lecture/11-python-advanced-decorator-class</id>
  <published>2017-04-25T00:00:00-05:00</published>
  <updated>2017-04-25T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture discusses some further important topics in Python, Decorators and Classes.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;pyton-decorators&quot;&gt;Pyton Decorators&lt;/h2&gt;
&lt;p&gt;Decorators can be thought of as functions which modify the functionality of another function. They help to make your code shorter and more Pythonic. To properly explain decorators we will slowly build up from functions. Consider the following simple function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def hello(name='Amir'):
    return 'Hello ' + name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now if you assign a new variable to this name,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;greet = hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You will notice that greet is also a function, and more importantly, it is not attached to the original function &lt;code&gt;hello()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;greet
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;function __main__.hello&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;del hello
hello
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&amp;lt;ipython-input-6-b1946ac92492&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 hello

NameError: name 'hello' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;functions-inside-other-functions&quot;&gt;Functions inside other functions&lt;/h3&gt;
&lt;p&gt;Now one thing to keep in mind, is that you can define functions inside functions in Python, just as you can do in almost any other capable language.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def hello(name='Amir'):
    print('The hello() function has been executed')
    
    def greet():
        return '\t This is inside the greet() function'
    
    def welcome():
        return &quot;\t This is inside the welcome() function&quot;
    
    print(greet())
    print(welcome())
    print(&quot;Now we are back inside the hello() function&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
So now, if you type,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;hello()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The hello() function has been executed
    This is inside the greet() function
    This is inside the welcome() function
Now we are back inside the hello() function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another cool feature to know about, is that you can have functions both as input and return values to and from another function. With this in mind, let’s create a function like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def new_decorator(func):

    def wrap_func():
        print(&quot;Code would be here, before executing the func&quot;)

        func()

        print(&quot;Code here will execute after the func()&quot;)

    return wrap_func

def func_needs_decorator():
    print(&quot;This function is in need of a Decorator&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
So now,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;func_needs_decorator()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;This function is in need of a Decorator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, see what happens with,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Reassign func_needs_decorator
func_needs_decorator = new_decorator(func_needs_decorator)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which upon calling outputs,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;func_needs_decorator()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Code would be here, before executing the func
This function is in need of a Decorator
Code here will execute after the func()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happened above is that we wrapped the function and modified its behavior using a simple &lt;strong&gt;decorator&lt;/strong&gt;. Now, since this functionality is needed frequently in Python, Python has a special syntax for it, the Decorator syntax,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;@new_decorator
def func_needs_decorator():
    print &quot;This function is in need of a Decorator&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The above statement, is an exact equivalent to,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Reassign func_needs_decorator
func_needs_decorator = new_decorator(func_needs_decorator)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which we used before to decorate our function.&lt;/p&gt;

&lt;p&gt;Now, what is the use of decorators? Basically it can be a handy tool, for functionalities that has to be repeated for many functions. For example, Porofiling and timing the performance of functions require the idea of decorators. Most often, decorators are useful and needed in web development with Python.&lt;/p&gt;

&lt;h2 id=&quot;pyton-classes&quot;&gt;Pyton classes&lt;/h2&gt;

&lt;p&gt;The concept of Python class, as in almost any programming language, relates to packing &lt;strong&gt;a set of variables&lt;/strong&gt; together &lt;strong&gt;with a set of functions&lt;/strong&gt; operating on the data. The goal is to achieve more modular code by grouping data and functions into manageable units. One thing to keep in mind for scientific computing is that, classes, and more generally, Object Oriented Programming, are not necessary, and could be a hinderance to efficient computing if used naively. Nevertheless, classes enable either more elegant solutions or code that is easier to extend at a later stage. In the non-mathematical world, where there are no mathematical concepts and associated algorithms to help structure the problem solving, software development can be very challenging. Classes may then improve the understanding of the problem and contribute to simplify the modeling of data and actions in programs. As a consequence, almost all large software systems being developed in the world today are heavily based on classes.&lt;/p&gt;

&lt;p&gt;Programming with classes is offered by most modern programming languages, including Python. Although Python employs classes extensively, but the user can use the language for many of purposes without even knowing what a class is, as we have done in this class so far.&lt;/p&gt;

&lt;p&gt;Classes can be used for many things in scientific computations, but one of the most frequent programming tasks is to represent mathematical functions that have a set of parameters in addition to one or more independent variables. To expand on this, consider the problem described in the following section.&lt;/p&gt;

&lt;h3 id=&quot;a-common-programming-challenge-in-numerical-computing&quot;&gt;A common programming challenge in numerical computing&lt;/h3&gt;
&lt;p&gt;To motivate for the class concept, let’s look at functions with parameters. One example is $y(t) = v_0t-\frac{1}{2}gt^2$. Conceptually, in physics, $y$ is viewed as a function of $t$, but mathematically $y$ also depends on two other parameters, $v_0$ and $g$, although it is not natural to view $y$ as a function of these parameters. One can therefore write $f(t;v_0g)$ to emphasize that $t$ is the independent variable, while $v_0$ and $g$ are parameters. Strictly speaking, $g$ is a fixed parameter (as long as the experiment is run on the surface of the earth), so only $v_0$ and $t$ can be arbitrarily chosen in the formula.
It would then be better to write $y(t;v_0). Here is an implementation of this function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def y(t, v0):
    g = 9.81
    return v0*t - 0.5*g*t**2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This function gives the height of the projectile as a function of time. Now suppose you wanted to differentiate $y$ with respect to $t$ in order to obtain the velocity. You could write the following code to do so,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff(f, x, h=1E-5):
    return (f(x+h) - f(x))/h
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But, here is the catch with this problem of differentiation. The &lt;code&gt;diff&lt;/code&gt; function works with any function &lt;code&gt;f&lt;/code&gt; that takes &lt;strong&gt;only&lt;/strong&gt; one argument. In other words, if we want to input &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;diff&lt;/code&gt;, then we will have to redefine &lt;code&gt;y&lt;/code&gt; to take only one argument.  You may wonder why not change &lt;code&gt;diff&lt;/code&gt;. For this simple problem, this could be a solution. But, with larger problems, you are more likely to use sophisticated routines and modules that have been already developed and many of these routines take a function as input that only has one input variable. This is quite often the case with high-performance integration routines.&lt;/p&gt;

&lt;p&gt;One, perhaps bad, solution to the above problem is to use &lt;strong&gt;global variables&lt;/strong&gt;. The requirement is thus to define Python implementations of mathematical functions of one variable with one argument, the independent variable,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def y(t):
    g = 9.81
    return v0*t - 0.5*g*t**2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This function will work only if &lt;code&gt;v0&lt;/code&gt; is a global variable, initialized before one attempts to call the function. Here is an example call where &lt;code&gt;diff&lt;/code&gt; differentiates y,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v0 = 3
dy = diff(y, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The use of global variables is in general considered bad programming. Why global variables are problematic in the present case can be illustrated when there is need to work with several versions of a function. Suppose we want to work with two versions of $y(t;v_0)$, one with $v_0=1$ and one with $v_0=5$. Every time we call &lt;code&gt;y&lt;/code&gt;, we must remember which version of the function we work with, and set &lt;code&gt;v0&lt;/code&gt; accordingly prior to the call,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v0 = 1; r1 = y(t)
v0 = 5; r2 = y(t)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Another problem&lt;/em&gt; is that variables with simple names like &lt;code&gt;v0&lt;/code&gt;, may easily be used as global variables in other parts of the program. These parts may change our &lt;code&gt;v0&lt;/code&gt; in a context different from the &lt;code&gt;y&lt;/code&gt; function, but the change affects the correctness of the &lt;code&gt;y&lt;/code&gt; function. In such a case, we say that changing &lt;code&gt;v0&lt;/code&gt; has &lt;strong&gt;side effects&lt;/strong&gt;, i.e., &lt;strong&gt;the change affects other parts of the program in an unintentional way&lt;/strong&gt;. This is one reason why a golden rule of programming tells us to &lt;strong&gt;limit the use of global variables as much as possible&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An alternative solution to the problem of needing two &lt;code&gt;v0&lt;/code&gt; parameters could be to introduce two &lt;code&gt;y&lt;/code&gt; functions, each with a distinct &lt;code&gt;v0&lt;/code&gt; parameter,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def y1(t):
    g = 9.81
    return v0_1*t - 0.5*g*t**2
def y2(t):
    g = 9.81
    return v0_2*t - 0.5*g*t**2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to initialize &lt;code&gt;v0_1&lt;/code&gt; and &lt;code&gt;v0_2&lt;/code&gt; once, and then we can work with &lt;code&gt;y1&lt;/code&gt; and &lt;code&gt;y2&lt;/code&gt;. However, if we need $100$ &lt;code&gt;v0&lt;/code&gt; parameters, we need $100$ functions. This is tedious to code, error prone, difficult to administer, and simply a really bad solution to a programming problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, is there a good remedy?&lt;/strong&gt; The answer is yes: the class concept solves all the problems described above.&lt;/p&gt;

&lt;h4 id=&quot;class-representation-of-a-function&quot;&gt;Class representation of a function&lt;/h4&gt;
&lt;p&gt;A class as contains a set of variables (data) and a set of functions, held together as one unit. The variables are visible in all the functions in the class. That is, we can view the variables as “global” in these functions. These characteristics also apply to modules, and modules can be used to obtain many of the same advantages as classes offer (see comments in Sect. 7.1.6). However, classes are technically very different from modules. You can also make many copies of a class, while there can be only one copy of a module. When you master both modules and classes, you will clearly see the similarities and differences. Now we continue with a specific example of a class.&lt;/p&gt;

&lt;p&gt;Consider the function $y(t;v_0) = v_0t - \frac{1}{2}gt^2$. We may say that $v_0$ and $g$, represented by the variables &lt;code&gt;v0&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;, constitute the data. A Python function, say &lt;code&gt;value(t)&lt;/code&gt;, is then needed to compute the value of $y(t;v_0)$ and this function must have access to the data &lt;code&gt;v0&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;, while &lt;code&gt;t&lt;/code&gt; is an argument. A programmer experienced with classes will then suggest to collect the data &lt;code&gt;v0&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;, and the function &lt;code&gt;value(t)&lt;/code&gt;, together as a &lt;strong&gt;class&lt;/strong&gt;. In addition, a class usually has another function, called &lt;strong&gt;constructor&lt;/strong&gt; for &lt;strong&gt;initializing the data&lt;/strong&gt;. The constructor is always named &lt;code&gt;__init__&lt;/code&gt;. Every &lt;strong&gt;class must have a name&lt;/strong&gt;, often &lt;strong&gt;starting with a capital&lt;/strong&gt;, so we choose &lt;code&gt;Y&lt;/code&gt; as the name since the class represents a mathematical function with name &lt;code&gt;y&lt;/code&gt;. The next step is to implement this class in Python. A complete class code &lt;code&gt;Y&lt;/code&gt; for our problem here would look as follows in Python:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class Y:
    def __init__(self, v0):
        self.v0 = v0
        self.g = 9.81
    def value(self, t):
        return self.v0*t - 0.5*self.g*t**2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;A class creates a new data type&lt;/strong&gt;, here of name &lt;code&gt;Y&lt;/code&gt;, so when we use the class to make objects, those objects are of type Y. &lt;strong&gt;All the standard Python objects, such as lists, tuples, strings, floating-point numbers, integers, …, are built-in Python classes&lt;/strong&gt;, and each time the user creates on these variable types, one instance os these classes is created by the Python interpreter. A user-defined object class (like Y) is usually called an &lt;strong&gt;instance&lt;/strong&gt;. We need such an instance in order to use the data in the class and call the value function. The following statement constructs an instance bound to the variable name y:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;y = Y(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Seemingly, we &lt;em&gt;call the class &lt;code&gt;Y&lt;/code&gt; as if it were a function&lt;/em&gt;. Indeed, &lt;code&gt;Y(3)&lt;/code&gt; is automatically translated by Python to a call to the constructor &lt;code&gt;__init__&lt;/code&gt; in class Y. The arguments in the call, here only the number &lt;code&gt;3&lt;/code&gt;, are always passed on as arguments to &lt;code&gt;__init__&lt;/code&gt; after the &lt;code&gt;self&lt;/code&gt; argument. That is, &lt;code&gt;v0&lt;/code&gt; gets the value &lt;code&gt;3&lt;/code&gt; and self is just dropped in the call. This may be confusing, but it is a rule that the self argument is never used in calls to functions in classes.
With the instance &lt;code&gt;y&lt;/code&gt;, we can compute the value of y(t=0.1;v_0=3) by the statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v = y.value(0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the &lt;code&gt;self&lt;/code&gt; input argument is dropped in the call to &lt;code&gt;value()&lt;/code&gt;. To access functions and variables in a class, one must prefix the function and variable names by the name of the instance and a dot: the value function is reached as &lt;code&gt;y.value&lt;/code&gt;, and the variables are reached as &lt;code&gt;y.v0&lt;/code&gt; and &lt;code&gt;y.g&lt;/code&gt;. One could, for example, print the value of &lt;code&gt;v0&lt;/code&gt; in the instance &lt;code&gt;y&lt;/code&gt; by writing,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print y.v0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
We have already introduced the term &lt;strong&gt;instance&lt;/strong&gt; for the object of a class. &lt;strong&gt;Functions&lt;/strong&gt; in classes are commonly called &lt;strong&gt;methods&lt;/strong&gt;, and &lt;strong&gt;variables (data)&lt;/strong&gt; in classes are called &lt;strong&gt;data attributes&lt;/strong&gt;. Methods are also known as &lt;strong&gt;method attributes&lt;/strong&gt;. For example, in our sample class &lt;code&gt;Y&lt;/code&gt; we have two methods or method attributes, &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;, two data attributes, &lt;code&gt;v0&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;, and four attributes in total (&lt;code&gt;__init__&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;v0&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;). Note that the names of attributes can be chosen freely, just as names of ordinary Python functions and variables. However, &lt;strong&gt;the constructor
must have the name &lt;code&gt;__init__&lt;/code&gt;, otherwise it is not automatically called when new instances are created&lt;/strong&gt;. You can do whatever you want in whatever method, but it is a common convention to &lt;strong&gt;use the constructor for initializing the variables in the class&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So far, we have explained a method of writing our function of interest in a class style, which resolves the need to pass a auxiliary variable to a function explicitly. But if you look at the original problem that we had, you will notice that we still cannot use our class &lt;code&gt;Y&lt;/code&gt; instance &lt;code&gt;y&lt;/code&gt; as an argument to other functions similar to &lt;code&gt;diff()&lt;/code&gt;. The final resolution to this problem is to add a &lt;code&gt;__call__&lt;/code&gt; method to our originally defined &lt;code&gt;Y&lt;/code&gt; class.&lt;/p&gt;

&lt;h3 id=&quot;callable-objects&quot;&gt;Callable objects&lt;/h3&gt;
&lt;p&gt;If you recall, computing the value of the mathematical function represented by class &lt;code&gt;Y&lt;/code&gt;, with &lt;code&gt;y&lt;/code&gt; as the name of the instance, is performed by writing &lt;code&gt;y.value(t)&lt;/code&gt;. If we could write just &lt;code&gt;y(t)&lt;/code&gt;, the &lt;code&gt;y&lt;/code&gt; instance would look as an ordinary function. Such a syntax is indeed possible and offered by the special method named &lt;code&gt;__call__&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class Y:
    def __init__(self, v0):
        self.v0 = v0
        self.g = 9.81
    def value(self, t):
        return self.v0*t - 0.5*self.g*t**2
    def __call__(self, t):
        return self.v0*t - 0.5*self.g*t**2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
then, writing &lt;code&gt;y(t)&lt;/code&gt; implies a call like &lt;code&gt;y.__call__(t)&lt;/code&gt;, which is equivalent to &lt;code&gt;y.value(t)&lt;/code&gt;. The previous value method is now redundant. A good programming convention is to &lt;strong&gt;include a &lt;code&gt;__call__&lt;/code&gt; method in all classes that represent a mathematical function&lt;/strong&gt;. Instances with &lt;code&gt;__call__&lt;/code&gt; methods are said to be &lt;strong&gt;callable objects&lt;/strong&gt;, just as plain functions are callable objects as well. The call syntax for callable objects is the same, regardless of whether the object is a function or a class instance.&lt;/p&gt;

&lt;p&gt;You can always test if an instance is callable or not by &lt;code&gt;callable()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;callable(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/11-python-advanced-decorator-class&quot;&gt;Lecture 11: Python advanced topics - decorators and classes&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 25, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 7: Solutions - Python - I/O, error handling, and tesing frameworks]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/quiz/7-solutions-python-io-error-handling-unit-testing"/>
  <id>http:/ECL2017S/quiz/7-solutions-python-io-error-handling-unit-testing</id>
  <published>2017-04-19T00:00:00-05:00</published>
  <updated>2017-04-19T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;7-problems-python-io-error-handling-unit-testing&quot; target=&quot;_blank&quot;&gt;Quiz 7: Problems - Python - I/O, error handling, and tesing frameworks&lt;/a&gt;.&lt;/p&gt;

&lt;!--
The following figure illustrates the grade distribution for this quiz.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/quiz/gradeDist/gradeHistQuiz7.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Python’s I/O.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Consider this &lt;a href=&quot;http:/ECL2017S/quiz/7/testInput.in&quot; target=&quot;_blank&quot;&gt;comma-separated data file&lt;/a&gt;. Write a simple Python code &lt;code&gt;outputter.py&lt;/code&gt; that takes two command line arguments like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python outputter.py outputter.in outputter.out
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
and then writes the same float data in the output file &lt;code&gt;outputter.out&lt;/code&gt; (whose name and path was taken from the command-line), and writes out data in a formatted style, like this &lt;a href=&quot;http:/ECL2017S/quiz/7/outputter.out&quot; target=&quot;_blank&quot;&gt;example output file&lt;/a&gt;, with only three digits after decimal point.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http:/ECL2017S/quiz/7/solutions/outputter.py&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is an example attempt.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/quiz/7-solutions-python-io-error-handling-unit-testing&quot;&gt;Quiz 7: Solutions - Python - I/O, error handling, and tesing frameworks&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 19, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 7: Problems - Python - I/O, error handling, and tesing frameworks]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/quiz/7-problems-python-io-error-handling-unit-testing"/>
  <id>http:/ECL2017S/quiz/7-problems-python-io-error-handling-unit-testing</id>
  <published>2017-04-19T00:00:00-05:00</published>
  <updated>2017-04-19T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims at testing your basic knowledge of Python’s I/O.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Consider this &lt;a href=&quot;http:/ECL2017S/quiz/7/outputter.in&quot; target=&quot;_blank&quot;&gt;comma-separated data file&lt;/a&gt;. Write a simple Python code &lt;code&gt;outputter.py&lt;/code&gt; that takes two command line arguments like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python outputter.py outputter.in outputter.out
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
and then writes the same float data in the output file &lt;code&gt;outputter.out&lt;/code&gt; (whose name and path was taken from the command-line), and writes out data in a formatted style, like this &lt;a href=&quot;http:/ECL2017S/quiz/7/outputter.out&quot; target=&quot;_blank&quot;&gt;example output file&lt;/a&gt;, with only three digits after decimal point.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/quiz/7-problems-python-io-error-handling-unit-testing&quot;&gt;Quiz 7: Problems - Python - I/O, error handling, and tesing frameworks&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 19, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 10: Python advanced topics - IO, Monte Carlo, wrappers and interoperability]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/10-python-advanced-io-monte-carlo-interoperability"/>
  <id>http:/ECL2017S/lecture/10-python-advanced-io-monte-carlo-interoperability</id>
  <published>2017-04-19T00:00:00-05:00</published>
  <updated>2017-04-19T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture discusses some further important topics in Python IO, the use of random numbers and Monte Carlo simulations, as well as methods of integrating Python codes with codes from other programming languages, in particular, the use of Python as a wrapper for highly efficient, fast, low-level codes written in Fortran and C.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;more-on-io-in-python&quot;&gt;More on IO in Python&lt;/h2&gt;
&lt;p&gt;There are a few topics and methods of &lt;a href=&quot;https://en.wikipedia.org/wiki/Input/output&quot; target=&quot;_blank&quot;&gt;input/output (IO)&lt;/a&gt; in Python that we have not discussed yet, such as reading data from special data files, or web pages. Such problems, happen almost daily in a scientific research career, even in High Performance Computing, and Python’s capability to easily handle such IO problems is indeed one of the main reasons for Python’s popularity.&lt;/p&gt;

&lt;h3 id=&quot;reading-data-from-special-data-files&quot;&gt;Reading data from special data files&lt;/h3&gt;
&lt;p&gt;It will happen quite often in your research that you will need to read data from a spreadsheet data file, most importantly &lt;code&gt;*.csv&lt;/code&gt; and Microsoft Excel files (e.g., &lt;code&gt;*.xls&lt;/code&gt; data files), or also frequently, from an &lt;code&gt;*.xml&lt;/code&gt; data file. There are many ways and Python libraries to read such files. For Excel files, the task can be a bit complex, since Excel files can contain multiple sheets. A good starting point might be &lt;a href=&quot;http://www.python-excel.org/&quot; target=&quot;_blank&quot;&gt;this webpage&lt;/a&gt;, also &lt;a href=&quot;http://pbpython.com/excel-pandas-comp.html&quot; target=&quot;_blank&quot;&gt;Pandas module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For CSV files, Python standard library has a solution. Suppose you want to read &lt;a href=&quot;http:/ECL2017S/lecture/10/jec_pdb_r4s.csv&quot; target=&quot;_blank&quot;&gt;this CSV file&lt;/a&gt;. A Python solution would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import csv
with open('jec_pdb_r4s.csv','r') as myfile:
    for counter, row in enumerate(csv.reader(myfile)):
        print(row)
        if counter&amp;gt;10: break
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;['pdb', 'pdb_id', 'chain', 'site', 'zr4s_JTT', 'r4s_JTT', 'zr4s_JC', 'r4s_JC']
['132L_A', '132L', 'A', '2', '-0.3133', '1.02', '0.04475', '1.188']
['132L_A', '132L', 'A', '3', '0.8385', '1.955', '0.2036', '1.311']
['132L_A', '132L', 'A', '4', '2.093', '2.973', '1.451', '2.272']
['132L_A', '132L', 'A', '5', '-0.8878', '0.5537', '-0.7985', '0.5382']
['132L_A', '132L', 'A', '6', '-1.443', '0.1028', '-1.426', '0.05416']
['132L_A', '132L', 'A', '7', '-0.1195', '1.177', '-0.07917', '1.093']
['132L_A', '132L', 'A', '8', '-0.7236', '0.6869', '-0.8997', '0.4602']
['132L_A', '132L', 'A', '9', '-1.107', '0.3755', '-0.8971', '0.4622']
['132L_A', '132L', 'A', '10', '0.7076', '1.848', '0.7369', '1.722']
['132L_A', '132L', 'A', '11', '0.9573', '2.051', '0.8809', '1.833']
['132L_A', '132L', 'A', '12', '-0.8315', '0.5993', '-0.9243', '0.4413']
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how I have used Python &lt;code&gt;enumerate()&lt;/code&gt; function to control the number of lines that is read from the file (The file contains more than 70000 lines of data!).&lt;/p&gt;

&lt;p&gt;Similarly, if you wanted to write a CSV file, you can use &lt;code&gt;csv.writer()&lt;/code&gt; method,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;with open('jec_pdb_r4s.csv','r') as infile, open('jec_out.csv', 'w') as outfile:
    for counter, row in enumerate(csv.reader(infile)):
        csv.writer(outfile).writerow(row)
        if counter&amp;gt;10: break
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of the code is &lt;a href=&quot;http:/ECL2017S/lecture/10/jec_out.csv&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt; (If you run this code on Windows machines, you will probably get an extra empty line between each row in the csv file).&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;*.xml&lt;/code&gt; files, Python standard library has a package &lt;a href=&quot;https://docs.python.org/3/library/xml.etree.elementtree.html&quot; target=&quot;_blank&quot;&gt;ElementTree&lt;/a&gt;, which you can use for both parsing and writing xml data files.&lt;/p&gt;

&lt;h3 id=&quot;reading-data-from-web&quot;&gt;Reading data from web&lt;/h3&gt;
&lt;p&gt;Nowadays, a lot of data repositories are available online publicly, and you may encounter problems that need to parse data from an online repository. For many of the most famous repositories, such as the &lt;a href=&quot;http://www.rcsb.org/pdb/home/home.do&quot; target=&quot;_blank&quot;&gt;Protein databank&lt;/a&gt;, excellent python packages have been written that automate the process of fetching data from online pages or repositories (e.g., &lt;a href=&quot;http://biopython.org/wiki/Biopython&quot; target=&quot;_blank&quot;&gt;Biopython&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Nevertheless you may need at some point in your research or career to read data from a web address. Most often, the online data is contained in a &lt;code&gt;html&lt;/code&gt; file, like the content of the &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;about page&lt;/a&gt; for this course, for example, which has the address: &lt;a href=&quot;http:/ECL2017S/about&quot; target=&quot;_blank&quot;&gt;http://www.shahmoradi.orghttp:/ECL2017S/about&lt;/a&gt;. Suppose you wanted to extract the content of this page. A simple solution would be the following via Python’s standard &lt;a href=&quot;https://docs.python.org/3/library/urllib.html&quot; target=&quot;_blank&quot;&gt;urllib&lt;/a&gt; module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import urllib.request as ur
myurl = 'http://www.shahmoradi.orghttp:/ECL2017S/about'
with ur.urlopen(myurl) as webfile:
    webcontent = [line.decode(&quot;utf-8&quot;) for line in webfile.readlines()]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now the variable &lt;code&gt;webcontent&lt;/code&gt; is a list, whose elements are each row in the html file for this page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;webcontent[0:10]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;['&amp;lt;!DOCTYPE html&amp;gt;\n',
'&amp;lt;html&amp;gt;\n',
'&amp;lt;head&amp;gt;\n',
'&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;\n',
'&amp;lt;title&amp;gt;COE 111L - SPRING 2017&amp;lt;/title&amp;gt;\n',
'&amp;lt;meta name=&quot;description&quot; content=&quot;Engineering Computation Lab&quot;&amp;gt;\n',
'&amp;lt;meta name=&quot;keywords&quot; content=&quot;Amir, Shahmoradi, Instructor&quot;&amp;gt;\n',
'\n',
'&amp;lt;!-- Twitter Cards --&amp;gt;\n',
'&amp;lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&amp;gt;\n']
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the content of the file is read in &lt;code&gt;byte&lt;/code&gt; format. Therefore, to convert it to string, one has to apply &lt;code&gt;.decode(&quot;utf-8&quot;)&lt;/code&gt; on each line. Similar to opening a file on harddisk, one can also use &lt;code&gt;.read()&lt;/code&gt; and &lt;code&gt;.readline()&lt;/code&gt; methods to read the contant of the web address. Alternatively, one could also save the entire content of the web address, in a single file locally,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import urllib.request as ur
myurl = 'http://www.shahmoradi.orghttp:/ECL2017S/about'
ur.urlretrieve(myurl, filename='about.html')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will output &lt;a href=&quot;http:/ECL2017S/lecture/10/about.html&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt; in your current working diretory of Python.&lt;/p&gt;

&lt;p&gt;Now, the file that we imported from the web does not contains any scientific data. But, in the homework you will see a real-world scientific example and value of Python’s ability to parse the content of web pages.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;writing-data-in-html-web-format&quot;&gt;Writing data in HTML (web) format&lt;/h3&gt;
&lt;p&gt;Doing research at a professional level requires reporting the results professionally as well. That is, the results of the project, including the final report itself have to be &lt;strong&gt;auto-generated&lt;/strong&gt; and &lt;strong&gt;reproducile&lt;/strong&gt; as much as possible, and reachable to the widest audience (which nowadays means, availibility on the world-wide web).&lt;/p&gt;

&lt;p&gt;Suppose you have worked on your final project for this course, which has resulted in several figures, that you wanted to put them all together on a single webpage in your repository on Github, together with some information about each figure. Let’s say the figures are
  &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_1_t10.0.png&quot; target=&quot;_blank&quot;&gt;figure 1&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_2_t12.0.png&quot; target=&quot;_blank&quot;&gt;figure 2&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_3_t14.0.png&quot; target=&quot;_blank&quot;&gt;figure 3&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_4_t15.0.png&quot; target=&quot;_blank&quot;&gt;figure 4&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_5_t16.0.png&quot; target=&quot;_blank&quot;&gt;figure 5&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_6_t18.0.png&quot; target=&quot;_blank&quot;&gt;figure 6&lt;/a&gt;
, &lt;a href=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_7_t20.0.png&quot; target=&quot;_blank&quot;&gt;figure 7&lt;/a&gt;.  Now, since these figures represent the time evolution of the growth of the tumor, you would wnat to write a code that automatically generates an HTML (or Markdown) files, which contains the correct HTML code for adding these figures in your page for the project. You could for example write the following Python code to achieve this goal,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;with open('SampleProjectReport.html', 'w') as html:
    html.write('&amp;lt;HTML&amp;gt;&amp;lt;BODY BGCOLOR=&quot;white&quot;&amp;gt;\n')
    html.write('&amp;lt;H1&amp;gt;Sample Semester Project: Tumor growth modeling&amp;lt;/H1&amp;gt;&amp;lt;br&amp;gt; \n')
    html.write('&amp;lt;H2&amp;gt;Each of following subplots figure represents the stage of the growth of tumor at the specified date in the figure title.&amp;lt;/H2&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; \n')

    time = [10.0,12.0,14.0,15.0,16.0,18.0,20.0]
    nfig = 7
    figReposPrefix = 'http://www.shahmoradi.orghttp:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_'
    for ifig in range(1,nfig+1):
        html.write( '&amp;lt;img src=&quot;{}{:d}_t{:.1f}.png&quot; width=&quot;900px&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;\n'.format(figReposPrefix,ifig,time[ifig-1]) )
    html.write('&amp;lt;H2&amp;gt;Conclusions:&amp;lt;/H2&amp;gt;\n')
    html.write('&amp;lt;p&amp;gt;Chances of survival for this rat are virtually zero.&amp;lt;/p&amp;gt;&amp;lt;br&amp;gt;\n')
    html.write('&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;\n')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This code will generate an HTML file, which you can view in browser &lt;a href=&quot;http:/ECL2017S/lecture/10/SampleProjectReport.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;random-numbers-in-python&quot;&gt;Random numbers in Python&lt;/h2&gt;
&lt;p&gt;One of the most important topics in todays’s science and computer simulation is &lt;a href=&quot;https://en.wikipedia.org/wiki/Random_number_generation&quot; target=&quot;_blank&quot;&gt;random number generation&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot; target=&quot;_blank&quot;&gt;Monte Carlo simulation&lt;/a&gt; methods. In the simplest scenario for your research, you may need to generate a sequence of uniformly distributed random numbers in Python. There are several approaches to handle such random number generation problems in Python. Here is one, via Python’s standard &lt;code&gt;random&lt;/code&gt; module:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [43]: import random as rnd

In [44]: rnd.random()   # generates a random number in the half open interval [0,1)
Out[44]: 0.012519922307372311

In [45]: rnd.
rnd.BPF             rnd.Random          rnd.betavariate     rnd.gauss           rnd.normalvariate   rnd.randrange       rnd.shuffle         rnd.weibullvariate
rnd.LOG4            rnd.SG_MAGICCONST   rnd.choice          rnd.getrandbits     rnd.paretovariate   rnd.sample          rnd.triangular
rnd.NV_MAGICCONST   rnd.SystemRandom    rnd.expovariate     rnd.getstate        rnd.randint         rnd.seed            rnd.uniform
rnd.RECIP_BPF       rnd.TWOPI           rnd.gammavariate    rnd.lognormvariate  rnd.random          rnd.setstate        rnd.vonmisesvariate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
As you see in the list of available methods in &lt;code&gt;random&lt;/code&gt;, you can generate random numbers from a wide variaty of univariate probability distributions, e.g.,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [46]: rnd.betavariate(0.5,0.5)   # Beta variate with the input parameters
Out[46]: 0.9281984408820623

In [54]: rnd.expovariate(1)         # random variable from exponential distribution with mean 1.
Out[54]: 2.546912414260747

In [55]: rnd.gammavariate(1,1)      # random variable from gamma distribution with parameters 1,1.
Out[55]: 0.5364897808236537
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Recall that if you needed help on a method or function in Python, you could use &lt;code&gt;help()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [61]: help(rnd.weibullvariate)
Help on method weibullvariate in module random:

weibullvariate(alpha, beta) method of random.Random instance
    Weibull distribution.

    alpha is the scale parameter and beta is the shape parameter.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To generate &lt;code&gt;float&lt;/code&gt; random numbers between the given input bounds,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [64]: rnd.uniform(50,100)    # generate a random float between 50 and 100
Out[64]: 65.59688328558263
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;b&gt;ATTENTION: &lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
Alwasy make sure you import modules with unique names, as different modules with similar component names may overwrite each other. For example &lt;code&gt;import random&lt;/code&gt; followed by &lt;code&gt;from numpy import *&lt;/code&gt; wil cause the &lt;code&gt;random&lt;/code&gt; module to be overwritten by &lt;code&gt;numpy.random&lt;/code&gt; module.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
Also pay attention to sublte differences between similar functions, with the same names, but in different modules. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
np.random.randint(1,6,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
will draw a random integer from the interval $[1,6)$ excluding the value $6$ (the third input, $1$, indicates how many numbers has to be drawn randomly by the function). However,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import random as rnd
rnd.randint(1,6)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
will draw a random integer form the interval $[1,6]$. Also note that &lt;code&gt;randint()&lt;/code&gt; from module &lt;code&gt;random&lt;/code&gt; is a scalar function, whereas the numpy’s version is vectorized.&lt;/p&gt;

&lt;h3 id=&quot;the-deterministic-aspect-of-randomness-in-python&quot;&gt;The deterministic aspect of randomness in Python&lt;/h3&gt;
&lt;p&gt;There is a truth about random numbers and random number generators and algorithms, not only in Python, but in all programming languages, and that is, &lt;strong&gt;true random numbers do not exist in the world of programming&lt;/strong&gt;. What we call a seuqence of random numbers, is simply a sequence of numbers that we, the user, to the best of our knowledge, don’t know how it was generated, and therefore, &lt;strong&gt;the sequence looks random to us, bu not the to the developer of the algorithm!&lt;/strong&gt;. To prove this, type the following code in a Python session,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [13]: import numpy as np

In [14]: np.random.seed(42)

In [15]: np.random.randint(1,6,6)
Out[15]: array([4, 5, 3, 5, 5, 2])

In [16]: np.random.randint(1,6,6)
Out[16]: array([3, 3, 3, 5, 4, 3])

In [17]: np.random.seed(42)

In [18]: np.random.randint(1,6,6)
Out[18]: array([4, 5, 3, 5, 5, 2])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You notice that everytime the random function is called, it generates a new sequence of random numbers, apparently completely random. But as soon as the function &lt;code&gt;np.random.seed(42)&lt;/code&gt; is called, it appears that the random number generator also restarts from the beginning, generating the same sequence of random numbers as it did before.&lt;/p&gt;

&lt;p&gt;You can even test the same code on a different computer, and as long as you set the seed of the random number generator to a specific value (here 42), &lt;code&gt;np.random.seed(42)&lt;/code&gt;, you will the same sequence of random numbers. So afterall, random numbers are not random at all, as they can be generated detrerministically, however, they mimic the behavior of true random numbers. The ability to set the seed for a random number generator is actually very useful, since it enables us to replicate the work of a code, exactly it has been done in the past. In particular, this is very useful for code debugging. However, beware of cases were you need to get a different result, everytime you run the code. If you set the random seed of the random generator to to a fixed value, right at the beginning of the code, you will never get a random behavior.&lt;/p&gt;

&lt;h3 id=&quot;drawing-a-random-element-from-a-list&quot;&gt;Drawing a random element from a list&lt;/h3&gt;
&lt;p&gt;Suppose you have the following list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
mylist = np.linspace(0,100,51)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([   0.,    2.,    4.,    6.,    8.,   10.,   12.,   14.,   16.,
         18.,   20.,   22.,   24.,   26.,   28.,   30.,   32.,   34.,
         36.,   38.,   40.,   42.,   44.,   46.,   48.,   50.,   52.,
         54.,   56.,   58.,   60.,   62.,   64.,   66.,   68.,   70.,
         72.,   74.,   76.,   78.,   80.,   82.,   84.,   86.,   88.,
         90.,   92.,   94.,   96.,   98.,  100.])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and now you wanted to draw a random element from the above list. You could do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import random as rnd
rnd.choice(mylist)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;80.0 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give a random element from the list. You could also generate a random shuffling of the list by,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import random as rnd
rnd.shuffle(mylist)
mylist
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([  98.,   12.,   76.,   60.,   46.,   22.,   24.,   92.,   66.,
         16.,    6.,   34.,   14.,    8.,   18.,   50.,   30.,   74.,
          4.,    2.,   38.,   90.,   70.,   56.,   94.,   80.,   32.,
         20.,   10.,   44.,   72.,   84.,    0.,   78.,  100.,   88.,
         86.,   96.,   48.,   52.,   62.,   64.,   26.,   36.,   40.,
         54.,   68.,   58.,   82.,   42.,   28.])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;summary-of-some-important-random-functions-in-python&quot;&gt;Summary of some important random functions in Python&lt;/h3&gt;
&lt;p&gt;As you may have noticed, since none of the random functions are builtin, things can get really confusing very easily, by simply mixing numpy’s random mdule with Python’s random module. The following helps to clarify some of the most important differences between these two modules.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;
Table 1: Some useful functions and their functionalities in &lt;code&gt;random&lt;/code&gt; and &lt;code&gt;numpy&lt;/code&gt; modules
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;th&gt;random module&lt;/th&gt;
&lt;th&gt;numpy.random module&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;random uniform numbers in $[0,1)$&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;random()&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;random(N)&lt;/code&gt; (vectorized)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;random uniform numbers in $[a,b)$&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;uniform(a,b)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;uniform(a,b,N)&lt;/code&gt; (vectorized)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;random integers in $[a,b]$&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;randint(a,b)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;randint(a,b+1,N)&lt;/code&gt; (vectorized) &lt;br /&gt; &lt;code&gt;random_integers(a,b+1,N)&lt;/code&gt; (vectorized) &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;random Gaussian deviate with parameters $[\mu, \sigma]=[m,s]$&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;gauss(m,s)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;normal(m,s,N)&lt;/code&gt; (vectorized)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;setting random number generator seed $i$&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;seed(i)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;seed(i)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;shuffling list mylist&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;shuffle(mylist)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;shuffle(mylist)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;choose a random element from mylist&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;choice(mylist)&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt; -- &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;monte-carlo-simulations&quot;&gt;Monte Carlo simulations&lt;/h3&gt;
&lt;p&gt;A Monte Carlo simulation is basically any simulation problem that somehow involves random numbers. Let’s start with an example of throwing a die repeatedly for N times. We can simulate the process of throwing a die by the following python code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def throwFairDie():
    import random as rnd
    return rnd.randint(1, 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, each time the function is called, it returns a random value for one throw of a virtual die,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [7]: throwFairDie()
Out[7]: 6

In [8]: throwFairDie()
Out[8]: 1

In [9]: throwFairDie()
Out[9]: 4

In [10]: throwFairDie()
Out[10]: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This is likely one of the simplest examples of &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot; target=&quot;_blank&quot;&gt;Monte Carlo simulations&lt;/a&gt;. Now suppose we wanted to make sure that the die is fair, meaning that each number (out of 6 possibilities) only appears with a frequency of $1/6$ over many throws of the die. To test this hypothesis, we could write the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np

def throwFairDie():
    import random as rnd
    return rnd.randint(1, 6)

def getMeanDieValue(n=10000):
    meanDieValue = np.zeros((n,6),dtype=np.double)
    randomThrow = throwFairDie() - 1        # assign the first value to the above array
    meanDieValue[0,randomThrow] = 1.0 / 1.0 # one try so far, one success for the die value that is obtained.
    for i in range(1,n):
        randomThrow = throwFairDie() - 1
        meanDieValue[i,randomThrow] = 1.0   # add one success for the value obtained
        meanDieValue[i,:] += meanDieValue[i-1,:]    # combine the recent success with the total number of successes from previous tries.
        meanDieValue[i-1,:] /= np.double(i)  # Now normalize the values form the last try to the total number of tries.
    meanDieValue[-1:,:] /= np.double(n)  # Now normalize the very last try to the total number of tries.
    return meanDieValue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
What this function does, is that it throws a die for given input number of times (n=10000 by default if not given as input), and then calculates for each new try, how many times each of the die values have occurred so far, and then finally outputs all the result as numpy &lt;code&gt;double&lt;/code&gt; array, each row of which contains the number of successes for each of the 6 die values. Normally, if the die is fair, you would expect that with more tries, the average number of successes for each try would converge more and more to the canonical value $1/6\sim0.1667$. We can test this, by calling the function with a large number of tries, and checking the values in the last row of the output array,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print( getMeanDieValue()[-1:,:] )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[ 0.1645  0.1668  0.1683  0.1664  0.169   0.165 ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print( getMeanDieValue(n=100000)[-1:,:] )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[ 0.16488  0.1665   0.16635  0.16841  0.1661   0.16776]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A better approach would be plot the output as a function of the number of tries, and see if the results for each of possible die outcomes do indeed converge to the canonical value or not.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
import matplotlib.pyplot as plt

nDieValues = 6 # 6 possible values for a die throw
nTrial = 100000 # total number of die throws
meanDieValues = getMeanDieValue(n=nTrial)

fig1 = plt.figure()
trial = np.linspace( 1 , nTrial+1 , nTrial )
lineTypes = ['r-','b-','g-','y-','b-','g-']
for i in range( nDieValues ) :
    plt.semilogx( trial[:] \
            , meanDieValues[:,i] \
            , lineTypes[i] \
            ) # plot with color red, as line
    plt.hold('on')
plt.xlabel('trial number')
plt.ylabel('fraction of occurrence for each die number')
plt.legend(['die value: '+str(i) for i in range(1,7) ])
plt.axis([1, nTrial , 0.0, 1.0]) # [xmin, xmax, ymin, ymax]
plt.title('N={} throws of a virtual die in Python'.format(nTrial))
plt.savefig('diceThrowsN{}.png'.format(nTrial))
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can see the output of the above code in the following figure,&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/10/diceThrowsN100000.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;python-wrappers-and-interfaces&quot;&gt;Python wrappers and interfaces&lt;/h2&gt;
&lt;p&gt;Python is a very convenient language for implementing scientific computations as the code can be made very close to the mathematical algorithms. However, the execution speed of the code is significantly lower than what can be obtained by
programming in languages such as Fortran, C, or C++. For example see the following performance comparisons and tests in &lt;a href=&quot;https://modelingguru.nasa.gov/docs/DOC-1762&quot; target=&quot;_blank&quot;&gt;NASA modeling guru webpage&lt;/a&gt;. As you can see there, the &lt;strong&gt;performance of Python code can be significantly lower, up to 500 times and more, compared to compiled languages such as Fortran and C&lt;/strong&gt;. These languages compile the program to machine language, which enables the computing resources to be utilized with very high efficiency. Knowing the performance hit in Python, the scientific programming paradigm in Python is to write compute-intensive parts of the code in lower level languages such as Fortran or C, and use Python as wrapper and glue between lower level codes and as a handy tool for high-level tasks.&lt;/p&gt;

&lt;p&gt;Python was initially designed for being integrated with C. This feature has spawned the development of several techniques and tools for calling compiled languages from Python, allowing us to relatively easily reuse fast and
well-tested scientific libraries in Fortran, C, or C++ from Python, or migrate slow Python code to compiled languages. It often turns out that only smaller parts of the code, usually for loops doing heavy numerical computations, suffer from low speed and can benefit from being implemented in Fortran, C, or C++.&lt;/p&gt;

&lt;p&gt;There are already several Python wrappers developed for integrating Python with other programming language codes. Most prominent examples include &lt;a href=&quot;https://docs.scipy.org/doc/numpy-dev/f2py/&quot; target=&quot;_blank&quot;&gt;F2PY&lt;/a&gt; for Fortran and C codes, &lt;a href=&quot;http://www.swig.org/&quot; target=&quot;_blank&quot;&gt;SWIG&lt;/a&gt; for C, C++, Perl, Java, and many others, &lt;a href=&quot;http://cython.org/&quot; target=&quot;_blank&quot;&gt;Cython&lt;/a&gt; for C, &lt;a href=&quot;http://www.jython.org/&quot; target=&quot;_blank&quot;&gt;Jython&lt;/a&gt; for Java, and several others.&lt;/p&gt;

&lt;p&gt;The usage of some of these wrappers can be tricky and requires some work and good familiarity with the wrapper. This is in particular true about SWIG, which involves a significant amount of manual modifications to the interfaces, compared to F2PY, for example. At the moment, F2PY only works with Python 2.x standard.&lt;/p&gt;

&lt;p&gt;There is also a Python module &lt;a href=&quot;http://pymat.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;pymat&lt;/a&gt; developed for direct interaction of Python code with MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/10-python-advanced-io-monte-carlo-interoperability&quot;&gt;Lecture 10: Python advanced topics - IO, Monte Carlo, wrappers and interoperability&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 19, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 9: Problems - Python advanced IO, Monte Carlo]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/9-problems-python-advanced-io-monte-carlo-interoperability"/>
  <id>http:/ECL2017S/homework/9-problems-python-advanced-io-monte-carlo-interoperability</id>
  <published>2017-04-19T00:00:00-05:00</published>
  <updated>2017-04-19T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This homework aims at giving you some experience with Python’s tools for interacting with the World Wide Web and writing Monte Carlo simulations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; As I discussed in class, in order to avoid creating potential traffic on Professor Butler’s webpage, I have now uploaded all the necessary files on &lt;a href=&quot;http:/ECL2017S/homework/9/swift/&quot; target=&quot;_blank&quot;&gt;this address&lt;/a&gt; (don’t click on the links in this table, because it will take you to Professor Butler’s repository for this data. I have all the data already saved in our domain locally). So now, your goal is to first read the event-ID HTML table from&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/9/swift/index.html&quot; target=&quot;_blank&quot;&gt;http://www.shahmoradi.org/homework/9/swift/index.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, use the event-IDs in this table to generate web addresses like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/9/swift/GRB00100433_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;http://www.shahmoradi.org/homework/9/swift/GRB00100433_ep_flu.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in order to download these &lt;code&gt;.txt&lt;/code&gt; files from the web. The rest of the homework is just as you would have done this problem as descibed below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;Reading scientific data from web&lt;/strong&gt;. Consider the webpage of Professor &lt;a href=&quot;http://butler.lab.asu.edu/&quot; target=&quot;_blank&quot;&gt;Nat Butler&lt;/a&gt; at Arizona State University. He has successfully written Python piplines for automated analysis of data from &lt;a href=&quot;https://www.nasa.gov/mission_pages/swift/main&quot; target=&quot;_blank&quot;&gt;NASA’s Swift satellite&lt;/a&gt;. For each &lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot; target=&quot;_blank&quot;&gt;Gamma-Ray Burst (GRB)&lt;/a&gt; detection that Swift makes, his pipline analyzes and reduces data for the burst and summarizes the results on his personal webpage, for example in &lt;a href=&quot;http://butler.lab.asu.edu/swift/bat_spec_table.html&quot; target=&quot;_blank&quot;&gt;this table&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Write a Python function named &lt;code&gt;fetchHtmlTable(link,outputPath)&lt;/code&gt; that takes two arguments:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;a web address (which will be this: &lt;a href=&quot;http://butler.lab.asu.edu/swift/bat_time_table.html&quot; target=&quot;_blank&quot;&gt;http://butler.lab.asu.edu/swift/bat_time_table.html&lt;/a&gt;), and,&lt;/li&gt;
  &lt;li&gt;an output path to where you want the code save the resulting files.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One file is exact HTML contained in the input webpage address, and a second file, which is the Table contained in this HTML address. To parse the HTML table in this address, you will need the Python code &lt;a href=&quot;http:/ECL2017S/homework/9/parseTable.py&quot; target=&quot;_blank&quot;&gt;parseTable.py&lt;/a&gt; also available and explained on &lt;a href=&quot;https://www.summet.com/dmsi/html/readingTheWeb.html&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.  This parsed HTML table, will be in the form of a list, whose elements correspond to each row in the HTML table, and each row of element of this parsed table is itself another list, that contains the columns of the HTML table in that row. Output this table as well, in a separate file, in a formatted style, meaning that each element of table in a row has a space of 30 characters for itself (or something appropriate as you wish, e.g., &lt;code&gt;'{:&amp;gt;30}'.format(item)&lt;/code&gt;). You can see an example output of the code &lt;a href=&quot;http:/ECL2017S/homework/9/bat_time_table.html&quot; target=&quot;_blank&quot;&gt;here for the HTML output file&lt;/a&gt;, and &lt;a href=&quot;http:/ECL2017S/homework/9/bat_time_table.html.tab&quot; target=&quot;_blank&quot;&gt;here for parse HTML table&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; Now, if you look at the content of the file that your function has generated (once you run it), you will see something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;                   GRB (Trig#)               Trig_Time (SOD)               Time Region [s]                          T_90                          T_50                       rT_0.90                       rT_0.50                       rT_0.45                          T_av                         T_max                        T_rise                        T_fall                           Cts                       Rate_pk                          Band                              
       GRB170406x   (00745966)                     44943.130                -40.63-&amp;gt;887.37              881.000 +/-7.697             549.000 +/-25.558             280.000 +/-13.432              124.000 +/-5.751              109.000 +/-4.997             433.667 +/-15.557            877.870 +/-367.494            890.500 +/-366.900              0.000 +/-366.630                6.082 +/-0.344               0.018 +/-0.0065                     15-350keV
       GRB170402x   (00745090)                     38023.150                  54.35-&amp;gt;66.35                9.000 +/-2.096                5.000 +/-1.490                7.000 +/-1.535                4.000 +/-0.640                3.000 +/-0.559               60.964 +/-1.316               58.850 +/-2.417                1.500 +/-2.894                7.500 +/-2.720                0.162 +/-0.045               0.022 +/-0.0106                     15-350keV
       GRB170401x   (00745022)                     68455.150                 -19.63-&amp;gt;71.49               78.880 +/-5.224               39.440 +/-4.168               41.480 +/-3.823               18.360 +/-1.585               16.320 +/-1.341               29.541 +/-2.857              24.910 +/-24.386              37.740 +/-24.251              41.140 +/-23.977                1.181 +/-0.122               0.024 +/-0.0130                     15-350keV
       GRB170331x   (00744791)                      6048.440                 9.835-&amp;gt;35.875               20.160 +/-1.285               10.290 +/-0.914               14.070 +/-1.041                5.880 +/-0.415                5.040 +/-0.359               21.461 +/-0.598               12.460 +/-5.633                0.525 +/-5.718               19.635 +/-5.840                1.875 +/-0.154               0.134 +/-0.0408                     15-350keV
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now write another function that reads the events’ unique numbers that appear in this table in parentheses (e.g., 00745966 is the first in table), and puts this number in place of &lt;code&gt;event_id&lt;/code&gt; in this web address template: &lt;code&gt;http://butler.lab.asu.edu/swift/event_id/bat/ep_flu.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now note that, for some events, this address exists, for example,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://butler.lab.asu.edu/swift/00745966/bat/ep_flu.txt&quot; target=&quot;_blank&quot;&gt;http://butler.lab.asu.edu/swift/00745966/bat/ep_flu.txt&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;which is a text file named &lt;code&gt;ep_flu.txt&lt;/code&gt;. For some other events, this address might not exist, for example,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://butler.lab.asu.edu/swift/00680331/bat/ep_flu.txt&quot; target=&quot;_blank&quot;&gt;http://butler.lab.asu.edu/swift/00680331/bat/ep_flu.txt&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;in which case your code will have to raise a &lt;code&gt;urllib.request.HTTPError&lt;/code&gt; exception. Write your code such that it can smoothly skip these exceptions. Write your code such that it saves all those existing text files on your local computer, in a file-name format like &lt;a href=&quot;http:/ECL2017S/homework/9/GRB00100433_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;this example: &lt;code&gt;GRB00100433_ep_flu.txt&lt;/code&gt;&lt;/a&gt; (A total of 938 files exist).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; Now write a third function, that reads all of these files in your directory, one by one, as numpy arrays, and plots the content of all of them together, on a single scatter plot like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/9/ep_flu.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To achieve this goal, your function should start like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def plotBatFiles(inPath,figFile):
    import os
    import numpy as np, os
    import matplotlib.pyplot as plt
    ax = plt.gca()  # generate a plot handle
    ax.set_xlabel('Fluence [ ergs/cm^2 ]') # set X axis title
    ax.set_ylabel('Epeak [ keV ]')  # set Y axis title
    ax.axis([1.0e-8, 1.0e-1, 1.0, 1.0e4]) # set axix limits [xmin, xmax, ymin, ymax]
    plt.hold('on')  # add all data files to the same plot
    counter = 0     # counts the number of events
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
where &lt;code&gt;inPath&lt;/code&gt; and &lt;code&gt;figFile&lt;/code&gt; are the path to the directory containing the files, and the name and path to the output figure file. You will have to use &lt;code&gt;os.listdir(inPath)&lt;/code&gt; to get a list of all files in your input directory. Then loop over this list of files, and use only those that end with &lt;code&gt;ep_flu.txt&lt;/code&gt; because that’s how you saved those files, e.g.,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;for file in os.listdir(inPath):
        if file.endswith(&quot;ep_flu.txt&quot;):
            # rest of your code ... 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But now, you have to also make sure that your input data does indeed contain some numerical data, because some files do contain anything, although they exist, like &lt;a href=&quot;http:/ECL2017S/homework/9/GRB00559075_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;this file: ``&lt;/a&gt;. To do so, you will have to perform a test on the content of file, once you read it as numpy array, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;            data = np.loadtxt(os.path.join(inPath, file), skiprows=1)
            if data.size!=0 and all(data[:,1]&amp;lt;0.0):
                # then plot data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the condition &lt;code&gt;all(data[:,1]&amp;lt;0.0)&lt;/code&gt; is rather technical. It makes sure that all values are positive on the second column. Once you have done all these checks, you have to do one final manipulation of data, that is, the data in these files on the second column is actually the log of data, so have to get the &lt;code&gt;exp()&lt;/code&gt; value to plot it (because plot is log-log). To do so you can use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;            data[:,1] = np.exp(data[:,1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
and then finally,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;            ax.scatter(data[:,1],data[:,0],s=1,alpha=0.05,c='r',edgecolors='none')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which will add the data for the current file to the plot. At the end, you will have to set a title for your plot as well, and save your plot,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    ax.set_title('Plot of Epeak vs. Fluence for {} Swift GRB events'.format(counter))
    plt.savefig(figFile)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the variable &lt;code&gt;counter&lt;/code&gt; contains the total number of events for which the text files exists on the website, &lt;strong&gt;and&lt;/strong&gt; the file contained some data (i.e., was not empty).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; What does &lt;code&gt;alpha=0.05&lt;/code&gt; and &lt;code&gt;s=1&lt;/code&gt; do in the following scatter plot command? (Vary their values to see what happens)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Simulating a fun Monte Carlo game.&lt;/strong&gt; Suppose you’re on a game show, and you’re given the choice of three doors:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/9/Monty_1.png&quot; width=&quot;600&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Behind one door is a car; behind the two others, goats. You pick a door, say No. 1, and the host of the show opens another door, say No. 3, which has a goat.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/9/Monty_open_door.png&quot; width=&quot;600&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;He then says to you, “Do you want to pick door No. 2?”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question: What would you do?&lt;/strong&gt;&lt;br /&gt;
Is it to your advantage to switch your choice from door 1 to door 2? Is it to your advantage, &lt;strong&gt;in the long run, for a large number of game tries&lt;/strong&gt;, to switch to the other door?&lt;/p&gt;

&lt;p&gt;Now whatever your answer is, I want you to check/prove your answer by a Monte Carlo simulation of this problem. Make a plot of your simulation for $ngames=100000$ repeat of this game, that shows, in the long run, on average, what is the probability of winning this game if you switch your choice, and what is the probability of winning, if you do not switch to the other door.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/9-problems-python-advanced-io-monte-carlo-interoperability&quot;&gt;Homework 9: Problems - Python advanced IO, Monte Carlo&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 19, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 8: Solutions - Python array computing and plotting]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/8-solutions-python-array-computing-plotting"/>
  <id>http:/ECL2017S/homework/8-solutions-python-array-computing-plotting</id>
  <published>2017-04-19T00:00:00-05:00</published>
  <updated>2017-04-19T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;8-problems-python-array-computing-plotting.html&quot; target=&quot;_blank&quot;&gt;Homework 8: Problems - Python array computing and plotting&lt;/a&gt;.&lt;/p&gt;

&lt;!--
The following figure illustrates the grade distribution for this homework.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/gradeDist/gradeHistHomework8.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.&lt;br&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;This homework aims at giving you some experience with Python’s array computing and plotting features.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop&lt;/strong&gt;. Consider the following mathematical function resembling a Hat function,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
f(x) = 
\begin{cases}
    0 ~,    &amp; \text{if}~~ x&lt;0 \\
    x ~,    &amp; \text{if}~~ 0\leq x &lt;1 \\
    2-x ~,  &amp; \text{if}~~ 1\leq x &lt;2 \\
    0 ~,    &amp; \text{if}~~ x \geq 2 \\
\end{cases} %]]&gt;&lt;/script&gt;

&lt;p&gt;A scalar implementation of this function would be,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def hatFunc(x):
    if x &amp;lt; 0:
        return 0.0
    elif 0 &amp;lt;= x &amp;lt; 1:
        return x
    elif 1 &amp;lt;= x &amp;lt; 2:
        return 2 - x
    elif x &amp;gt;= 2:
        return 0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a vectorized version of this function. (Hint: you may need numpy’s &lt;code&gt;logical_and&lt;/code&gt; method for building the vectorized version of this function.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def hatFunc(x):
    condition1 = x &amp;lt; 0
    condition2 = np.logical_and(0 &amp;lt;= x, x &amp;lt; 1)
    condition3 = np.logical_and(1 &amp;lt;= x, x &amp;lt; 2)
    condition4 = x &amp;gt;= 2
    r = np.zeros(len(x))
    r[condition1] = 0.0
    r[condition2] = x[condition2]
    r[condition3] = 2-x[condition3]
    r[condition4] = 0.0
    return r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; The vertical position $y(t)$ of a ball thrown upward is given by $y(t)=v_0t-\frac{1}{2}gt^2$, where $g$ is the acceleration of gravity and $v_0$ is the initial vertical velocity at $t=0$. Two important physical quantities in this context are the potential energy, obtained by doing work against gravity, and the kinetic energy, arising from motion. The potential energy is defined as $P=mgy$, where $m$ is the mass of the ball. The kinetic energy is defined as $K=\frac{1}{2}mv^2$, where $v$ is the velocity of the ball, related to $y$ by $v(t)=y’(t)$.&lt;/p&gt;

&lt;p&gt;Write a program that can plot $P(t)$ and $K(t)$ in the same plot, along with their sum $E = P + K$. Let $t\in[0,2v_0/g]$. Write your program such that $m$ and $v_0$ are read from the command line. Run the program with various choices of $m$ and $v_0$ and observe that $P+K$ always remains constant in this motion, regardless of initial conditions. This is in fact, the fundamental principle of conservation of energy in Physics.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
A sample code can be downloaded from &lt;a href=&quot;http:/ECL2017S/homework/8/ball_energy.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Here is an example output figure of the code:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/8/ball_energy.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Integration by midpoint rule&lt;/strong&gt;: The idea of the Midpoint rule for integration is to divide the area under a curve $f(x)$ into $n$ equal-sized rectangles. The height of the rectangle is determined by the value of $f$ at the midpoint of the rectangle. The figure below illustrates the idea,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/8/midpnt.gif&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;To implement the midpointrule, one has to compute the area of each rectangle, sum them up, just as in the formula for the Midpoint rule,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int^b_a f(x) dx \approx h\sum^{n-1}_{i=0} f(a+ih+0.5h) ~,&lt;/script&gt;

&lt;p&gt;where $h=(b-a)/n$ is the width of each rectangle. Implement this formula as a Python function midpoint(f, a, b, n) and test the integrator with the following example input mathematical functions.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    f_1(x) &amp;= exp(x) ~,~ \text{for integration range } ~ [0, \log(3)] \\\\
    f_2(x) &amp;= cos(x) ~,~ \text{for integration range } ~ [0, \pi]     \\\\
    f_3(x) &amp;= sin(x) ~,~ \text{for integration range } ~ [0, \pi]     \\\\
    f_4(x) &amp;= sin(x) ~,~ \text{for integration range } ~ [0, \pi / 2] \\\\
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
An example code can be downloaded from &lt;a href=&quot;http:/ECL2017S/homework/8/midpoint.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Here is the output of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [38]: run midpoint.py
The exact integral of exp(x) between 0.00000 and 1.09861 is 2.00000.            The approximate answer is 1.99899 giving an error of 0.00101
The exact integral of cos(x) between 0.00000 and 3.14159 is 0.00000.            The approximate answer is 0.00000 giving an error of 0.00000
The exact integral of sin(x) between 0.00000 and 3.14159 is 2.00000.            The approximate answer is 2.00825 giving an error of 0.00825
The exact integral of sin(x) between 0.00000 and 1.57080 is 1.00000.            The approximate answer is 1.00103 giving an error of 0.00103
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Visualize approximations in the Midpoint integration rule&lt;/strong&gt; Now consider the following function,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = x(12-x)+\sin(\pi x) ~~,~~ x\in[0,10] ~,&lt;/script&gt;

&lt;p&gt;which we wish to integrate using the midpoint integrator that you wrote in the previous example. Now write a new code that visualizes the midpoint rule, similar to in the following figure. (Hint: you will need to use the Matplotlib function &lt;code&gt;fill_between&lt;/code&gt; and use this function to create the filled areas between f(x) and the approximating rectangles)&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/8/midpoint_visualization.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
An example code can be downloaded from &lt;a href=&quot;http:/ECL2017S/homework/8/visualize_midpoint.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/8-solutions-python-array-computing-plotting&quot;&gt;Homework 8: Solutions - Python array computing and plotting&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 19, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 9: Python - array computing and plotting]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/9-python-array-computing-plotting"/>
  <id>http:/ECL2017S/lecture/9-python-array-computing-plotting</id>
  <published>2017-04-12T00:00:00-05:00</published>
  <updated>2017-04-12T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture focuses on array computing and code vectorization, as well as methods of plotting data in Python.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;vectorization-and-array-computing&quot;&gt;Vectorization and array computing&lt;/h2&gt;

&lt;p&gt;With regards to capabilities of Python for scientific calculations, there are conflicting opinions. On the scientific side of the opinion spectrum, some people think that Python is not good enough for number crunching (as a result of which, new programming languages such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Julia_(programming_language)&quot; target=&quot;_blank&quot;&gt;Julia&lt;/a&gt; have been developed). However, there are people at the other extreme who believe that Python is too much oriented towards scientific computation (as a result of which, new programming languages have emerged, such as Google’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_(programming_language)&quot; target=&quot;_blank&quot;&gt;Go language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far in this course, you may have noticed that all numerical vector calculations were either performed with lists, tuples, or dictionaries. Sadly, Python standard does not have an intrinsic special way of defining and manipulating numerical vectors and arrays, unlike most High Performance Computing (HPC) languages for scientific computations (such as Fortran, Ada, or C). However, there are powerful Python modules that enable a Python programmer to use Python efficiently for numerical analysis as well.&lt;/p&gt;

&lt;blockquote&gt;
If you expect to use Python heavily and mostly for scientific computation in future, you should keep in mind that Python's builtin list, tuple and dictionary types can be very slow for number crunching. 
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vectors-arrays-and-the-numerical-python-numpy-package&quot;&gt;Vectors, arrays and the Numerical Python (numpy) package&lt;/h3&gt;

&lt;p&gt;In Python, a list can be &lt;strong&gt;heterogeneous&lt;/strong&gt; meaning that not all its elements are of the same type. An &lt;strong&gt;array object&lt;/strong&gt; in Python can be viewed as a variant of a list, but with the following assumptions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;All elements must be of the same type, preferably integer, real, or complex numbers, for efficient numerical computing and storage.&lt;/li&gt;
  &lt;li&gt;The number of elements must be known when the array is created.&lt;/li&gt;
  &lt;li&gt;Arrays are not part of standard Python – one needs an additional package called &lt;strong&gt;Numerical Python&lt;/strong&gt;, often abbreviated as &lt;strong&gt;NumPy&lt;/strong&gt;. The Python name of the package, to be used in import statements, is &lt;code&gt;numpy&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;With numpy, a wide range of mathematical operations can be done directly on complete arrays, thereby removing the need for loops over array elements. This is commonly called &lt;strong&gt;vectorization&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Arrays with one index are often called &lt;strong&gt;vectors&lt;/strong&gt;. Arrays with two indices are used as an efficient data structure for tables, instead of lists of lists. Arrays can also have three or more indices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The number of elements of an array can be changed, but keep in mind that this can cause significant computational cost. Creating an array of a given length is frequently referred to as &lt;strong&gt;allocating the
array&lt;/strong&gt;. It means that a part of the computer’s memory is marked for being occupied by this array.&lt;/p&gt;

&lt;p&gt;To create a numpy array, you will have to first import it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The tradition is to import &lt;code&gt;numpy&lt;/code&gt; as &lt;code&gt;np&lt;/code&gt;. To convert a list to a numpy array,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [3]: import numpy as np

In [4]: a = [1,2,3,4,5]

In [5]: a = np.array(a)

In [6]: type(a)
Out[6]: numpy.ndarray

In [7]: a
Out[7]: array([1, 2, 3, 4, 5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To create a new &lt;strong&gt;array of length n, filled with zeros&lt;/strong&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = np.zeros(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that numpy automatically identifies the appropriate type for all array elements, whether &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, or etc.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [10]: a[1]
Out[10]: 2

In [11]: type(a[1])
Out[11]: numpy.int32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Even if there is a single &lt;code&gt;float&lt;/code&gt; element in the list, then all elements in the list will be converted to float in the numpy array by default,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: type(a[1])
Out[11]: numpy.int32

In [12]: a = [1,2,3,4,5.0]

In [13]: a = np.array(a)

In [14]: type(a[1])
Out[14]: numpy.float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you want to get the desired element type, then you will have to ask numpy for it explicitly,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [17]: a = [1,2,3.5,4.9,5.0]

In [18]: a = np.array(a, int)   # convert all elements in the list to integer

In [19]: a
Out[19]: array([1, 2, 3, 4, 5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can see the full list of input arguments to np.array function &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A similar function &lt;code&gt;np.zeros_like(c)&lt;/code&gt; generates an array of zeros where the length of the generated array is that of the input array c and the element type is the same as those in c.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [33]: b = [1,2,3,4,5,6,7]

In [34]: a = np.zeros_like(b)

In [35]: a
Out[35]: array([0, 0, 0, 0, 0, 0, 0])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Often one wants an array to have $n$ elements with uniformly distributed values in an interval $[p,q]$. The numpy function &lt;code&gt;linspace&lt;/code&gt; creates such arrays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [36]: a = np.linspace(1, 100, 53)

In [37]: a
Out[37]:
array([   1.        ,    2.90384615,    4.80769231,    6.71153846,
          8.61538462,   10.51923077,   12.42307692,   14.32692308,
         16.23076923,   18.13461538,   20.03846154,   21.94230769,
         23.84615385,   25.75      ,   27.65384615,   29.55769231,
         31.46153846,   33.36538462,   35.26923077,   37.17307692,
         39.07692308,   40.98076923,   42.88461538,   44.78846154,
         46.69230769,   48.59615385,   50.5       ,   52.40384615,
         54.30769231,   56.21153846,   58.11538462,   60.01923077,
         61.92307692,   63.82692308,   65.73076923,   67.63461538,
         69.53846154,   71.44230769,   73.34615385,   75.25      ,
         77.15384615,   79.05769231,   80.96153846,   82.86538462,
         84.76923077,   86.67307692,   88.57692308,   90.48076923,
         92.38461538,   94.28846154,   96.19230769,   98.09615385,  100.        ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vectorization&quot;&gt;Vectorization&lt;/h3&gt;
&lt;p&gt;Loops over very long arrays may run slowly. An advantage of arrays is that, with arrays, loops can be avoided the whole array be manipulated directly and simultaneously. If you are a Fortran programmer, you are likely already quite familiar with the powerful idea of array computing and vectorization. If not, then consider the following example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;x = np.linspace(0, 2, 201)
In [39]: x
Out[39]:
array([ 0.  ,  0.02,  0.04,  0.06,  0.08,  0.1 ,  0.12,  0.14,  0.16,
        0.18,  0.2 ,  0.22,  0.24,  0.26,  0.28,  0.3 ,  0.32,  0.34,
        0.36,  0.38,  0.4 ,  0.42,  0.44,  0.46,  0.48,  0.5 ,  0.52,
        0.54,  0.56,  0.58,  0.6 ,  0.62,  0.64,  0.66,  0.68,  0.7 ,
        0.72,  0.74,  0.76,  0.78,  0.8 ,  0.82,  0.84,  0.86,  0.88,
        0.9 ,  0.92,  0.94,  0.96,  0.98,  1.  ,  1.02,  1.04,  1.06,
        1.08,  1.1 ,  1.12,  1.14,  1.16,  1.18,  1.2 ,  1.22,  1.24,
        1.26,  1.28,  1.3 ,  1.32,  1.34,  1.36,  1.38,  1.4 ,  1.42,
        1.44,  1.46,  1.48,  1.5 ,  1.52,  1.54,  1.56,  1.58,  1.6 ,
        1.62,  1.64,  1.66,  1.68,  1.7 ,  1.72,  1.74,  1.76,  1.78,
        1.8 ,  1.82,  1.84,  1.86,  1.88,  1.9 ,  1.92,  1.94,  1.96,
        1.98,  2.  ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, if you wanted to calculate the &lt;code&gt;sin&lt;/code&gt; of the elements of &lt;code&gt;x&lt;/code&gt; in the traditional way, you would do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [41]: from math import sin

In [42]: sinX = [sin(i) for i in x]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This approach however, can be quite time consuming and computationally costly, because &lt;strong&gt;for-loops are very slow in Python&lt;/strong&gt;, up to a few hundred times than what you get in Fortran or C.&lt;/p&gt;

&lt;p&gt;A more appropriate solution to the above problem is use the &lt;code&gt;sin&lt;/code&gt; function from numpy module, which enables vectorization,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;sinX = np.sin(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You see, with the above numpy call, there is no need for a for-loop. The above Python code is an example of a &lt;strong&gt;vectorized code&lt;/strong&gt; and the previous code which contained for-loop is an example &lt;strong&gt;scalar code&lt;/strong&gt;. The numpy functions are capable of handling arrays as input. Compare the performance of the two codes in the above example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [45]: %timeit np.sin(x)
The slowest run took 11.73 times longer than the fastest. This could mean that an intermediate result is being cached.
100000 loops, best of 3: 2.21 µs per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [46]: %timeit [sin(i) for i in x]
10000 loops, best of 3: 23.1 µs per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The vectorized code in this example appears to be more than one order of magnitude (more than 10 times) faster than faster than the scalar version of the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is the vectorized code faster in Python?&lt;/strong&gt;&lt;br /&gt;
The reason is that numpy uses precompiled Fortran and C loops to loop over the elements of the input array. loops in Fortran and C have far less overhead than loops in Python. Similar to the above example, you can define your own functions that are also vectorized, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def f(x):
    return x**2*np.exp(-x**2)
x = np.linspace(-3, 3, 101)
y = f(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The numpy package also has a method for &lt;strong&gt;Automatic vectorization&lt;/strong&gt; of scalar functions (function that only take scalar arguments), for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;func_vec = np.vectorize(func_scalar)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, for serious programming, I do not recommend you to use this numpy functionality as it can be slow and inefficient.&lt;/p&gt;

&lt;h4 id=&quot;vectorization-of-if-blocks&quot;&gt;vectorization of if-blocks&lt;/h4&gt;
&lt;p&gt;For vectorization of calculations involving booleans and if conditions, the solution can be problem dependent, but one common easy way of addressing simple boolean problems could be &lt;code&gt;where&lt;/code&gt; method in numpy package. For example, suppose you have an list of numbers and you would like to perform a task on all negative numbers in the array, say set them all to zero, and leave the positive numbers intact. One solution would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [57]: x = np.array([1,-1,3,-5,-6,8,7,4,10])

In [58]: np.where(x&amp;lt;0,0,x)
Out[58]: array([ 1,  0,  3,  0,  0,  8,  7,  4, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aliasing-vs-copying-arrays&quot;&gt;Aliasing vs. copying arrays&lt;/h4&gt;
&lt;p&gt;If you recall from &lt;a href=&quot;http:/ECL2017S/lecture/5-python-variables-assignments#aliasing-vs-copying&quot; target=&quot;_blank&quot;&gt;lecture &lt;/a&gt;, there is a difference between aliasing and copying sequence objects in Python. The same rules also hold for numpy arrays, meaning that if you need an independent copy of an existing array, then you have to use &lt;code&gt;copy&lt;/code&gt; method to generate it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [63]: a = np.array([1,2,3,4,5])

In [64]: b = a.copy()

In [65]: b[0] = -1

In [66]: a
Out[66]: array([1, 2, 3, 4, 5])

In [67]: b
Out[67]: array([-1,  2,  3,  4,  5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
otherwise a simple equality assignment like &lt;code&gt;b = a&lt;/code&gt; will only create an alias for numpy array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [68]: a = np.array([1,2,3,4,5])

In [69]: b = a

In [70]: b[0] = -1

In [71]: a
Out[71]: array([-1,  2,  3,  4,  5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;in-place-arithmetic-in-python&quot;&gt;In-place arithmetic in Python&lt;/h4&gt;
&lt;p&gt;Consider two arrays &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; of the same shape. The expression &lt;code&gt;a += b&lt;/code&gt; means &lt;code&gt;a = a + b&lt;/code&gt;. There are however hidden differences between the two. In the statement &lt;code&gt;a = a + b&lt;/code&gt;, the sum &lt;code&gt;a + b&lt;/code&gt; is first computed, yielding a new array, and then the name &lt;code&gt;a&lt;/code&gt; is bound to this new array. The old array a is lost unless there are other names assigned to this array. In the statement &lt;code&gt;a += b&lt;/code&gt;, elements of &lt;code&gt;b&lt;/code&gt; are added directly into the elements of &lt;code&gt;a&lt;/code&gt; (in memory). There is no hidden intermediate array as in &lt;code&gt;a = a + b&lt;/code&gt;. This implies that &lt;strong&gt;&lt;code&gt;a += b&lt;/code&gt; is more efficient than &lt;code&gt;a = a + b&lt;/code&gt; since Python avoids making an extra array&lt;/strong&gt;. In other words, the operators +=, *=, and similar operators, perform &lt;strong&gt;in-place arithmetic&lt;/strong&gt; in arrays.&lt;/p&gt;

&lt;h4 id=&quot;allocating-arrays-in-python&quot;&gt;Allocating arrays in Python&lt;/h4&gt;
&lt;p&gt;We have already seen in the above that the &lt;code&gt;np.zeros&lt;/code&gt; function is useful for making a new array of a given size. Very often the size and the type of array elements are known a priori or has to match another existing array’s shape and type &lt;code&gt;b&lt;/code&gt;. There are two ways of achieving this goal,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [66]: a
Out[66]: array([1, 2, 3, 4, 5])

In [67]: b
Out[67]: array([-1,  2,  3,  4,  5])

In [68]: a
Out[68]: array([1, 2, 3, 4, 5])

In [69]: b = a.copy()

In [70]: c = np.zeros(a.shape, a.dtype)

In [71]: a.shape
Out[71]: (5,)

In [72]: a.
a.T            a.argsort      a.compress     a.cumsum       a.dumps        a.imag         a.min          a.prod         a.reshape      a.shape        a.sum          a.tostring
a.all          a.astype       a.conj         a.data         a.fill         a.item         a.nbytes       a.ptp          a.resize       a.size         a.swapaxes     a.trace
a.any          a.base         a.conjugate    a.diagonal     a.flags        a.itemset      a.ndim         a.put          a.round        a.sort         a.take         a.transpose
a.argmax       a.byteswap     a.copy         a.dot          a.flat         a.itemsize     a.newbyteorder a.ravel        a.searchsorted a.squeeze      a.tobytes      a.var
a.argmin       a.choose       a.ctypes       a.dtype        a.flatten      a.max          a.nonzero      a.real         a.setfield     a.std          a.tofile       a.view
a.argpartition a.clip         a.cumprod      a.dump         a.getfield     a.mean         a.partition    a.repeat       a.setflags     a.strides      a.tolist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Notice how the attribute &lt;code&gt;a.dtype&lt;/code&gt; (dtype standing for data type), and &lt;code&gt;x.shape&lt;/code&gt; (a tuple) were used in the above example. The shape attribute in array objects holds the shape, i.e., the size of each dimension. The method &lt;code&gt;size&lt;/code&gt; returns the total number of elements in the array.&lt;/p&gt;

&lt;p&gt;Sometimes one may also want to ensure that an object is an array, and if not, turn it into an array. The &lt;code&gt;np.asarray&lt;/code&gt; function is useful in such cases,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = np.asarray(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that one could have also use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = np.array(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There is no difference in the output, but note that the second approach does one redundant step, because in the first approach, if the input object is already an array, then there is no need in converting it to an array.&lt;/p&gt;

&lt;h4 id=&quot;multidimensional-numpy-arrays&quot;&gt;Multidimensional NumPy arrays&lt;/h4&gt;
&lt;p&gt;Creating multidimensional arrays is very much the same as vectors in numpy. The only thing to keep in mind is that the shape of the array is given as a tuple to &lt;code&gt;np.array()&lt;/code&gt;. For example, to initialize a 3D array of size (0:3,0:5,0:2), you would do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [86]: a = np.zeros((3,5,2))

In [87]: a
Out[87]:
array([[[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]],

       [[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]],

       [[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The arrays created so far have been of type &lt;code&gt;ndarray&lt;/code&gt;. NumPy also has a matrix type called &lt;code&gt;matrix&lt;/code&gt; or &lt;code&gt;mat&lt;/code&gt; for one- and two-dimensional arrays. One-dimensional arrays are then extended with one extra dimension such that they become matrices, i.e., either a row vector or a column vector,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [99]: x1 = np.array([1, 2, 3], float)

In [100]: x2 = np.matrix(x1) # or np.mat(x1)

In [102]: x3 = np.mat(x1).T # transpose = column vector

In [103]: x3
Out[103]:
matrix([[ 1.],
        [ 2.],
        [ 3.]])

In [104]: type(x3)
Out[104]: numpy.matrixlib.defmatrix.matrix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A special feature of matrix objects in NumPy is that the multiplication operator represents the matrix-matrix, vector-matrix, or matrix-vector product as we know from linear algebra. However, keep in mind that &lt;strong&gt;the multiplication operator between standard ndarray objects is different from multiplication between numpy matrices&lt;/strong&gt;. The &lt;code&gt;ndarray&lt;/code&gt; multiplication is simply a vectorized version of scalar multiplication,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [105]: a = np.array([1,2,3])

In [106]: b = np.array([1,2,3])

In [107]: a*b
Out[107]: array([1, 4, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
whereas, the matrix multiplication would yield,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [108]: aMat = np.mat(a)

In [109]: bMat = np.mat(b)

In [110]: aMat*bMat.T
Out[110]: matrix([[14]])

In [111]: aMat.T*bMat
Out[111]:
matrix([[1, 2, 3],
        [2, 4, 6],
        [3, 6, 9]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you intend to use Python and MATLAB together for your projects, then I recommend you to consider programming with matrices in Python instead of &lt;code&gt;ndarray&lt;/code&gt; objects, because the matrix type in Python behaves quite similar to matrices in MATLAB.
Numpy has a lot more to offer for linear algebra operation, that far beyond the scope of this lecture. More information about algebraic operations in NumPy can be found &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/routines.linalg.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;symbolic-linear-algebra&quot;&gt;Symbolic linear algebra&lt;/h4&gt;
&lt;p&gt;There also a package &lt;a href=&quot;http://www.sympy.org/en/index.html&quot; target=&quot;_blank&quot;&gt;SymPy&lt;/a&gt; that supports symbolic computations for linear algebra operations as well,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [116]: import sympy as sym

In [117]: a = sym.Matrix([[2, 0], [0, 5]])

In [118]: a**-1     # inverse of matrix a
Out[118]:
Matrix([
[1/2,   0],
[  0, 1/5]])

In [119]: a.inv()   # same as above, inverse of a
Out[119]:
Matrix([
[1/2,   0],
[  0, 1/5]])

In [120]: a.det()   # determinant of a
Out[120]: 10

In [121]: a.eigenvals() # eigenvalues of a
Out[121]: {2: 1, 5: 1}

In [122]: a.eigenvects()    # eigenvectors of a
Out[122]:
[(2, 1, [Matrix([
   [1],
   [0]])]), (5, 1, [Matrix([
   [0],
   [1]])])]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A tutorial on &lt;code&gt;sympy&lt;/code&gt; can be found &lt;a href=&quot;http://docs.sympy.org/dev/tutorial/matrices.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;curve-plotting-in-python&quot;&gt;Curve plotting in Python&lt;/h2&gt;
&lt;p&gt;The workhorse of plotting in Python is &lt;a href=&quot;https://matplotlib.org/&quot; target=&quot;_blank&quot;&gt;Matplotlib&lt;/a&gt; which is a Python 2D plotting library capable of producing publication quality figures. The usage of matplotlib is very similar to MATLAB.&lt;/p&gt;

&lt;h3 id=&quot;matplotlib-the-workhorse-of-plotting-in-python&quot;&gt;Matplotlib, the workhorse of plotting in Python&lt;/h3&gt;
&lt;p&gt;To see how plotting with Matplotlib works, let’s start with a simple example of 2D curve plotting,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
import matplotlib.pyplot as plt
def f(x):
    return x**2*np.exp(-x**2)
x = np.linspace(0, 3, 51) # 51 points between 0 and 3
y = np.zeros(len(x)) # allocate y with float elements
for i in range(len(x)):
    y[i] = f(x[i])
plt.plot(x, y)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you try the above code in IPython, the out on screen would be something like the following,&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/simple_curve_screen.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;You can also save the figure output as a file by,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [8]: plt.plot(x, y)
Out[8]: [&amp;lt;matplotlib.lines.Line2D at 0x1bff2e479e8&amp;gt;]

In [9]: plt.savefig('simple_curve.pdf') # produces PDF file.

In [10]: plt.savefig('simple_curve.png') # produces PNG file.

In [11]: pwd
Out[11]: 'C:\\Users\\Amir'  # files are saved here
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Just like MATLAB, the figures could be also decorated with axis labels, plot title, legend and a lot more, in a syntax very much like MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['x^2*exp(-x^2)'])
plt.axis([0, 3, -0.05, 0.6]) # [xmin, xmax, ymin, ymax]
plt.title('A simple Matplotlib decorated plot')
plt.savefig('simple_curve_decorated.png')
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which outputs &lt;a href=&quot;http:/ECL2017S/lecture/9/simple_curve_decorated.png&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt; in your current directory,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/simple_curve_decorated.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;plotting-multiple-curves-in-one-figure&quot;&gt;Plotting multiple curves in one figure&lt;/h4&gt;
&lt;p&gt;Again, similar to MATLAB, this can be achieved by the statement &lt;code&gt;hold('on')&lt;/code&gt; like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def f(x):
    return x**2*np.exp(-x**2)
def g(x):
    return x*np.exp(-x)
x = np.linspace(0, 3, 51) # 51 points between 0 and 3
yf = np.zeros(len(x)) # allocate y with float elements
yg = np.zeros(len(x)) # allocate y with float elements
for i in range(len(x)):
    yf[i] = f(x[i])
    yg[i] = g(x[i])
plt.plot(x, yf, 'r-')   # plot with color red, as line
plt.hold('on')
plt.plot(x, yg, 'bo')   # # plot with color blue, as points
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['x^2*exp(-x^2)' , 'x*exp(-x)'])
plt.axis([0, 3, -0.05, 0.6]) # [xmin, xmax, ymin, ymax]
plt.title('multiple Matplotlib curves in a decorated plot')
plt.savefig('multiple_curves_decorated.png')
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of the code is a PNG figure &lt;a href=&quot;http:/ECL2017S/lecture/9/multiple_curves_decorated.png&quot; target=&quot;_blank&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/multiple_curves_decorated.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;If you need to discontinue multiple plots on the same figure, again, as in MATLAB, you use &lt;code&gt;hold('off')&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;subplots-in-matplotlib&quot;&gt;Subplots in Matplotlib&lt;/h4&gt;
&lt;p&gt;Suppose you wanted to generate the same curves as in the above example, but each in a different plot, but in the same figure. One way to do this would be like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.figure()            # generates a new figure as in MATLAB
plt.subplot(2,1,1)      # create a 2-row, 1-column subplot, and this is the 1st subplot.
plt.plot(x, yf, 'r-')   # plot with color red, as line
plt.subplot(2,1,2)      # this is the 2nd subplot.
plt.plot(x, yg, 'bo')   # plot with color blue, as points
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['x*exp(-x)'])
plt.axis([0, 3, -0.05, 0.6]) # [xmin, xmax, ymin, ymax]
plt.title('an example Matplotlib subplot')
plt.savefig('two_by_one_subplot.png')
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of the code is a PNG figure &lt;a href=&quot;http:/ECL2017S/lecture/9/two_by_one_subplot.png&quot; target=&quot;_blank&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/two_by_one_subplot.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Note that since the decorations appeared only for the second subplot, only the second one in the figure above is decorated with plot title, legend, etc. Also, note that the &lt;code&gt;figure()&lt;/code&gt; method creates a new plot window on the screen.&lt;/p&gt;

&lt;h3 id=&quot;other-plotting-packages&quot;&gt;Other plotting packages&lt;/h3&gt;
&lt;p&gt;For more complicated 2D/3D or vector field plotting, you may find Matplotlib inadequate. To address these inadequacies, other packages have been developed which provide interface to more advanced plotting software such as, MATLAB, Gnuplot, Grace, OpenDX, VTK, and others.&lt;/p&gt;

&lt;h4 id=&quot;easyviz-from-scitools&quot;&gt;Easyviz from SciTools&lt;/h4&gt;
&lt;p&gt;Because each of the above mentioned visualization software has its own plotting syntax, a Python module &lt;code&gt;easyviz&lt;/code&gt; has been developed which provides a universal interface for any of the above mentioned back-end plotting software. In other words, the user can request eazyvis to use one of the above-mentioned software as the plotting engine in Python, while the syntax of the Python code is universal and the same for all of them, and this is achieved by using &lt;code&gt;eazyvis&lt;/code&gt;. Just like Matplotlib, the syntax of &lt;code&gt;eazyvis&lt;/code&gt; has been also purposefully made very similar to MATLAB.&lt;/p&gt;

&lt;p&gt;The Easyviz module is part of the &lt;a href=&quot;https://github.com/hplgit/scitools&quot; target=&quot;_blank&quot;&gt;SciTools package&lt;/a&gt;, which consists of a set of Python tools building on Numerical Python, ScientificPython, the comprehensive SciPy environment, and other packages for scientific computing with Python. However, keep in mind that &lt;strong&gt;SciTools strictly requires &lt;a href=&quot;http://python.org&quot; target=&quot;_blank&quot;&gt;Python v2.7&lt;/a&gt; and &lt;a href=&quot;http://numpy.org&quot; target=&quot;_blank&quot;&gt;Numerical Python&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;mayavi-visualization-package&quot;&gt;Mayavi visualization package&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.enthought.com/mayavi/mayavi/&quot; target=&quot;_blank&quot;&gt;Mayavi&lt;/a&gt; is another advanced, free, scientific data visualizer for Python, with emphasis on &lt;strong&gt;three-dimensional visualization techniques&lt;/strong&gt;. The package is written in Python, and uses the &lt;a href=&quot;http://www.vtk.org/&quot; target=&quot;_blank&quot;&gt;Visualization Toolkit (VTK)&lt;/a&gt; in C++ for rendering graphics. Since VTK can be configured with different backends, so can Mayavi. Mayavi is cross
platform and runs on most platforms like Mac OS X, Windows, and Linux.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/9-python-array-computing-plotting&quot;&gt;Lecture 9: Python - array computing and plotting&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 12, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 8: Problems - Python array computing and plotting]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/8-problems-python-array-computing-plotting"/>
  <id>http:/ECL2017S/homework/8-problems-python-array-computing-plotting</id>
  <published>2017-04-12T00:00:00-05:00</published>
  <updated>2017-04-12T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This homework aims at giving you some experience with Python’s array computing and plotting features.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop&lt;/strong&gt;. Consider the following mathematical function resembling a Hat function,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
f(x) = 
\begin{cases}
    0 ~,    &amp; \text{if}~~ x&lt;0 \\
    x ~,    &amp; \text{if}~~ 0\leq x &lt;1 \\
    2-x ~,  &amp; \text{if}~~ 1\leq x &lt;2 \\
    0 ~,    &amp; \text{if}~~ x \geq 2 \\
\end{cases} %]]&gt;&lt;/script&gt;

&lt;p&gt;A scalar implementation of this function would be,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def hatFunc(x):
    if x &amp;lt; 0:
        return 0.0
    elif 0 &amp;lt;= x &amp;lt; 1:
        return x
    elif 1 &amp;lt;= x &amp;lt; 2:
        return 2 - x
    elif x &amp;gt;= 2:
        return 0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a vectorized version of this function. (Hint: you may need numpy’s &lt;code&gt;logical_and&lt;/code&gt; method for building the vectorized version of this function.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; The vertical position $y(t)$ of a ball thrown upward is given by $y(t)=v_0t-\frac{1}{2}gt^2$, where $g$ is the acceleration of gravity and $v_0$ is the initial vertical velocity at $t=0$. Two important physical quantities in this context are the potential energy, obtained by doing work against gravity, and the kinetic energy, arising from motion. The potential energy is defined as $P=mgy$, where $m$ is the mass of the ball. The kinetic energy is defined as $K=\frac{1}{2}mv^2$, where $v$ is the velocity of the ball, related to $y$ by $v(t)=y’(t)$.&lt;/p&gt;

&lt;p&gt;Write a program that can plot $P(t)$ and $K(t)$ in the same plot, along with their sum $E = P + K$. Let $t\in[0,2v_0/g]$. Write your program such that $m$ and $v_0$ are read from the command line. Run the program with various choices of $m$ and $v_0$ and observe that $P+K$ always remains constant in this motion, regardless of initial conditions. This is in fact, the fundamental principle of conservation of energy in Physics.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Integration by midpoint rule&lt;/strong&gt;: The idea of the Midpoint rule for integration is to divide the area under a curve $f(x)$ into $n$ equal-sized rectangles. The height of the rectangle is determined by the value of $f$ at the midpoint of the rectangle. The figure below illustrates the idea,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/8/midpnt.gif&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;To implement the midpointrule, one has to compute the area of each rectangle, sum them up, just as in the formula for the Midpoint rule,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int^b_a f(x) dx \approx h\sum^{n-1}_{i=0} f(a+ih+0.5h) ~,&lt;/script&gt;

&lt;p&gt;where $h=(b-a)/n$ is the width of each rectangle. Implement this formula as a Python function midpoint(f, a, b, n) and test the integrator with the following example input mathematical functions.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    f_1(x) &amp;= exp(x) ~,~ \text{for integration range } ~ [0, \log(3)] \\\\
    f_2(x) &amp;= cos(x) ~,~ \text{for integration range } ~ [0, \pi]     \\\\
    f_3(x) &amp;= sin(x) ~,~ \text{for integration range } ~ [0, \pi]     \\\\
    f_4(x) &amp;= sin(x) ~,~ \text{for integration range } ~ [0, \pi / 2] \\\\
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Visualize approximations in the Midpoint integration rule&lt;/strong&gt; Now consider the following function,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = x(12-x)+\sin(\pi x) ~~,~~ x\in[0,10] ~,&lt;/script&gt;

&lt;p&gt;which we wish to integrate using the midpoint integrator that you wrote in the previous example. Now write a new code that visualizes the midpoint rule, similar to in the following figure. (Hint: you will need to use the Matplotlib function &lt;code&gt;fill_between&lt;/code&gt; and use this function to create the filled areas between f(x) and the approximating rectangles)&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/8/midpoint_visualization.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/8-problems-python-array-computing-plotting&quot;&gt;Homework 8: Problems - Python array computing and plotting&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 12, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 7: Solutions - Python I/O, error handling, and unit testing]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/7-solutions-python-IO-error-handling-unit-testing"/>
  <id>http:/ECL2017S/homework/7-solutions-python-IO-error-handling-unit-testing</id>
  <published>2017-04-12T00:00:00-05:00</published>
  <updated>2017-04-12T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;7-problems-python-IO-error-handling-unit-testing&quot; target=&quot;_blank&quot;&gt;Homework 7: Problems - Python I/O, error handling, and unit testing&lt;/a&gt;.&lt;/p&gt;

&lt;!--
The following figure illustrates the grade distribution for this homework.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/gradeDist/gradeHistHomework7.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.&lt;br&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This homework aims at giving you some experience with Python I/O, error handling in your code, and testing you code for accuracy and robustness.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Write a simple program named &lt;code&gt;sum.py&lt;/code&gt;, that takes in an arbitrary-size list of input floats from the command-line, and prints out the sum of them on the terminal with the following message,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python sum.py 1 2 1 23
The sum of 1 2 1 23 is 27.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that you will need to use the Python’s builtin function &lt;code&gt;sum()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import sys
print( 'The sum of {} is {}'.format( ' '.join(sys.argv[1:]) , sum([float(x) for x in sys.argv[1:]]) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here is the Bash output,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python sum.py 1 2 1 23
The sum of 1 2 1 23 is 27.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Similar to the previous probelm, write a simple program named &lt;code&gt;sum_via_eval.py&lt;/code&gt;, that takes in an arbitrary-size list of input numbers from the command-line, and prints out the sum of them on the terminal, this time using Python’s &lt;code&gt;eval&lt;/code&gt; function. The program output should look like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python sum.py 1 2 1 23
The sum of 1 2 1 23 is 27
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import sys
print( 'The sum of {} is {}'.format( ' '.join(sys.argv[1:]) , eval('+'.join(sys.argv[1:]) ) ) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here is the Bash output,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python sum.py 1 2 1 23
The sum of 1 2 1 23 is 27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider &lt;a href=&quot;http:/ECL2017S/homework/7/1A2T_A.dssp&quot; target=&quot;_blank&quot;&gt;this data file&lt;/a&gt;. It contains information about the amino acids in &lt;a href=&quot;http://www.rcsb.org/pdb/explore.do?structureId=1a2t&quot; target=&quot;_blank&quot;&gt;a protein&lt;/a&gt; called &lt;code&gt;1A2T&lt;/code&gt;. Each amino acid in protein is labeled by a single letter. There are 20 amin acid molecules in nature, and each has a total surface area (in units of Angstroms squared) that is given by the following table,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'A': 129.0
'R': 274.0
'N': 195.0
'D': 193.0
'C': 167.0
'Q': 225.0
'E': 223.0
'G': 104.0
'H': 224.0
'I': 197.0
'L': 201.0
'K': 236.0
'M': 224.0
'F': 240.0
'P': 159.0
'S': 155.0
'T': 172.0
'W': 285.0
'Y': 263.0
'V': 174.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, when these amino acids sit next to each other to form a chain protein, they cover parts of each other, such that only parts of their surfaces is exposed, while the rest is hidden from the outside world by other neighboring amino acids. Therefore, one would expect an amino acid that is at the core of a spherical protein would have almost zero exposed surface area.&lt;/p&gt;

&lt;p&gt;Now given the above information, write a Python program that takes in two command-line input arguments, one of which is a string containing the path to the above &lt;a href=&quot;http:/ECL2017S/homework/7/1A2T_A.dssp&quot; target=&quot;_blank&quot;&gt;input file&lt;/a&gt; &lt;code&gt;1A2T_A.dssp&lt;/code&gt; which contains the partially exposed surface areas of amino acids in protein &lt;code&gt;1A2T&lt;/code&gt; for each of its amino acids, and a second command-line argument which is the path to the file containing output of the code (e.g., it could be &lt;code&gt;./readDSSP.out&lt;/code&gt;). Then,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;the code reads the content of this file, and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;extracts the names of the amino acids in this protein from the data column inside the file which has the header &lt;code&gt;AA&lt;/code&gt; (look at the line number 25 inside the input data file, below &lt;code&gt;AA&lt;/code&gt; is the column containing the one-letter names of amino acids in this protein), and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;also extracts the partially exposed surface area information for each of these amino acids which appear in the column with header &lt;code&gt;ACC&lt;/code&gt;, and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;then uses the above table of maximum surface area values to calculate the fractional exposed surface area of each amino acid in this protein (i.e., for each amino acid, fraction_of_exposed_surface = ACC / maximum_surface_area_from_table), and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;finally for each amino acid in this protein, it prints the one-letter name of the amino acid, its corresponding partially exposed surface area (ACC from the input file), and its corresponding fractional exposed surface area (name it RSA) to the output file given by the user on the command line.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;On the first column of the output file, the code should also write the name of the protein (which is basically the name of the input file &lt;code&gt;1A2T_A&lt;/code&gt;) on each line of the output file. &lt;strong&gt;Note that your code should extract the protein name from the input filename&lt;/strong&gt; (by removing the file extension and other unnecessary information from the input command line string). &lt;a href=&quot;http:/ECL2017S/homework/7/readDSSP.out&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is an example output of the code.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Your code should also be able to handle an error resulting from less or more than 2 input command line arguments. That is, if the number of input arguments is 3 or 1, then it should input the following message on screen and stop.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./readDSSP.py ./1A2T_A.dssp


Usage:
      ./readDSSP.py &amp;lt;input dssp file&amp;gt; &amp;lt;output summary file&amp;gt;

Program aborted.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./readDSSP.py ./1A2T_A.dssp ./readDSSP.out amir


Usage:
      ./readDSSP.py &amp;lt;input dssp file&amp;gt; &amp;lt;output summary file&amp;gt;

Program aborted.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To achieve the above goal, you will have to create a dictionary from the above table, with amino acid names as the keys, and the maximum surface areas as the corresponding values. Name your code &lt;code&gt;readDSSP.py&lt;/code&gt; and submit it to your repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write your code in such a way that it checks for the existence of the output file&lt;/strong&gt;. If it already exists, then it does not remove the content of the file, whereas, it appends new data to the existing file. therwise, if the file does not exist, then it creates a new output file as requested by the user. To do so, you will need to use &lt;code&gt;os.path.isfile&lt;/code&gt; function from module &lt;code&gt;os&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;: Note that in some rows instead of a one-letter amino acid name, there is &lt;code&gt;!&lt;/code&gt;. In such cases, your code should be able to detect the abnormality and skip that row, because that row does not contain amino acid information.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
An example implementation can be downloaded from &lt;a href=&quot;http:/ECL2017S/homework/7/readDSSP.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the simplest program for evaluating the formula $y(t) = v_0t-\frac{1}{2}gt^2$,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v0 = 3; g = 9.81; t = 0.6
y = v0*t - 0.5*g*t**2
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(A) Write a program that takes in the above necessary input data ($t$,$v_0$) as command line arguments.&lt;br /&gt;
&lt;br /&gt;
(B) Extend your program from part (A) with exception handling such that missing command-line arguments are detected. For example, if the user has entered enough input arguments, then the code should raise &lt;code&gt;IndexError&lt;/code&gt; exception. In the &lt;code&gt;except IndexError&lt;/code&gt; block, the code should use the &lt;code&gt;input&lt;/code&gt; function to ask the user for the missing input data.&lt;br /&gt;
&lt;br /&gt;
(C) Add another exception handling block that tests if the $t$ value read from the command line, lies between $0$ and $2v_0/g$. If not, then it raises a &lt;code&gt;ValueError&lt;/code&gt; exception in the if block on the legal values of $t$, and notifes the user about the legal interval for $t$ in the exception message.&lt;/p&gt;

&lt;p&gt;Here are some example runs of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py
Both v0 and t must be supplied on the command line
v0 = ?
5
t = ?
4
Traceback (most recent call last):
  File &quot;./projectile.py&quot;, line 17, in &amp;lt;module&amp;gt;
    'must be between 0 and 2v0/g = {}'.format(t,2.0*v0/g))
ValueError: t = 4.0 is a non-physical value.
must be between 0 and 2v0/g = 1.019367991845056
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py
Both v0 and t must be supplied on the command line
v0 = ?
5
t = ?
0.5
y = 1.27375
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py 5 0.4
y = 1.2151999999999998
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py 5 0.4 3
y = 1.2151999999999998
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http:/ECL2017S/homework/7/projectile.py&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is an example implementation.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the function &lt;code&gt;Newton&lt;/code&gt; that we discussed in &lt;a href=&quot;http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing&quot; target=&quot;_blank&quot;&gt;lecture 8&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def Newton(f, dfdx, x, eps=1E-7, maxit=100):
    if not callable(f): raise TypeError( 'f is %s, should be function or class with __call__' % type(f) )
    if not callable(dfdx): raise TypeError( 'dfdx is %s, should be function or class with __call__' % type(dfdx) )
    if not isinstance(maxit, int): raise TypeError( 'maxit is %s, must be int' % type(maxit) )
    if maxit &amp;lt;= 0: raise ValueError( 'maxit=%d &amp;lt;= 0, must be &amp;gt; 0' % maxit )
    n = 0 # iteration counter
    while abs(f(x)) &amp;gt; eps and n &amp;lt; maxit:
        try:
            x = x - f(x)/float(dfdx(x))
        except ZeroDivisionError:
            raise ZeroDivisionError( 'dfdx(%g)=%g - cannot divide by zero' % (x, dfdx(x)) )
        n += 1
    return x, f(x), n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This function is supposed to be able to handle exceptions such as divergent iterations (which we discussed in the lecture), and division-by-zero. The latter error happens when &lt;code&gt;dfdx(x)=0&lt;/code&gt; in the above code. Write a test code that ensures the above code is able to correctly identify a division-by-zero exception and raise the correct assertionError.&lt;br /&gt;
(&lt;em&gt;Hint: To do so, you need to consider a test mathematical function as input to &lt;code&gt;Newton&lt;/code&gt;. One example could be $f(x)=\cos(x)$ with a starting search value $x=0$. This would result in derivative value $f’(x=0)=-\sin(x=0)=0$, which should lead to a &lt;code&gt;ZeroDivisionError&lt;/code&gt; exception. Now, write a test function &lt;code&gt;test_Newton_div_by_zero&lt;/code&gt; that can explicitly handle this exception by introducing a boolean variable &lt;code&gt;success&lt;/code&gt; that is &lt;code&gt;True&lt;/code&gt; if the exception is raised and otherwise &lt;code&gt;False&lt;/code&gt;&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def test_Newton_div_by_zero():
    from math import sin, cos
    f = cos
    dfdx = lambda x: -sin(x)
    success = False
    try:
        x, f_x, n = Newton(f, dfdx, 0, eps=1E-4, maxit=1)
    except ZeroDivisionError:
        success = True
    assert success , &quot;Test for division-by-zero failed&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/7-solutions-python-IO-error-handling-unit-testing&quot;&gt;Homework 7: Solutions - Python I/O, error handling, and unit testing&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 12, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 6: Solutions - Python modules, loops, and IO]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/quiz/6-solutions-python-modules-loops-io"/>
  <id>http:/ECL2017S/quiz/6-solutions-python-modules-loops-io</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;6-problems-python-modules-loops-io&quot; target=&quot;_blank&quot;&gt;Quiz 6: Problems - Python modules, loops, and IO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this quiz.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/quiz/gradeDist/gradeHistQuiz6.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Python’s modules, loops and simple I/O. Don’t forget to push your answers to your remote repository by the end of quiz time. Push your quiz-6 &lt;em&gt;readme.md&lt;/em&gt; file to quiz/6/ folder in your Github project.  If you write your answers in Python scripts, put the script files in the same folder as well. If you feel uncertain about your answer, you can test your final codes on Jupyter or IPython command lines.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Suppose you write a Python module, which you would also like to run it as a standalone Python code. If you wanted to make sure that some specific Python statements are executed only when the code is run a Python code (and not a module), you may recall from the lecture, that we had to use and if block like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    &amp;lt;Python statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Briefly explain what this if block does and mean.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Each Python module has an attribute &lt;code&gt;__name__&lt;/code&gt;. When the code is used as a Python module, the &lt;code&gt;__name__&lt;/code&gt; is set to the name of the module, otherwise it is set to &lt;code&gt;__main__&lt;/code&gt;. Therefore, this if block makes sure that the code is running as a standalone code or not.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Suppose you write a module named &lt;code&gt;myModule&lt;/code&gt;, which contains the function &lt;code&gt;myfunc&lt;/code&gt;. Now you import this module to another code.&lt;/p&gt;

&lt;p&gt;(A) Write down the import statement that would enable you to use &lt;code&gt;myfunc&lt;/code&gt; with name &lt;code&gt;f&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;(B) What would be the output of the following Python print statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import myModule as mm
print(mm.__name__)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
(A)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [27]: from math import sqrt as f

In [28]: f(4.0)
Out[28]: 2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [25]: import math as m

In [26]: print(m.__name__)
math
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Suppose there are two lists of numbers,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;even = [0,2,4,6,8]
odd = [1,3,5,7,9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a &lt;strong&gt;one-line&lt;/strong&gt; Python statement (list comprehension) that gives a list &lt;code&gt;summ&lt;/code&gt; whose elements are the sum of the respective elements in the above two lists &lt;code&gt;odd&lt;/code&gt; and &lt;code&gt;even&lt;/code&gt;, that is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [37]: summ
Out[37]: [1, 5, 9, 13, 17]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(Hint: You can use &lt;code&gt;zip&lt;/code&gt; function inside the list comprehension.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [39]: even = [0,2,4,6,8]

In [40]: odd = [1,3,5,7,9]

In [41]: summ = [i+j for i,j in zip(odd,even)]

In [42]: summ
Out[42]: [1, 5, 9, 13, 17]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the following for-loop,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
How many iterations does this for-loop perform before ending? Explain briefly why.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
This for-loop never ends! Because at each iteration, a new element is added to the end of the list. You can check if this is indeed the case by adding a print statement inside the loop,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
    print(item)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
2
4
6
8
1
3
5
7
9
2
4
6
8
10
3
5
7
9
11
4
6
8
10
12
5
7
9
11
13
6
8
10
12
14
7
9
11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the loop keeps printing forever!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/quiz/6-solutions-python-modules-loops-io&quot;&gt;Quiz 6: Solutions - Python modules, loops, and IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 6: Problems - Python modules, loops, and IO]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/quiz/6-problems-python-modules-loops-io"/>
  <id>http:/ECL2017S/quiz/6-problems-python-modules-loops-io</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims at testing your basic knowledge of Python’s modules, loops and simple I/O. Don’t forget to push your answers to your remote repository by the end of quiz time. Push your quiz-6 &lt;em&gt;readme.md&lt;/em&gt; file to quiz/6/ folder in your Github project.  If you write your answers in Python scripts, put the script files in the same folder as well. If you feel uncertain about your answer, you can test your final codes on Jupyter or IPython command lines.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Suppose you write a Python module, which you would also like to run it as a standalone Python code. If you wanted to make sure that some specific Python statements are executed only when the code is run a Python code (and not a module), you may recall from the lecture, that we had to use and if block like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    &amp;lt;Python statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Briefly explain what this if block does and mean.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Suppose you write a module named &lt;code&gt;myModule&lt;/code&gt;, which contains the function &lt;code&gt;myfunc&lt;/code&gt;. Now you import this module to another code.&lt;/p&gt;

&lt;p&gt;(A) Write down the import statement that would enable you to use &lt;code&gt;myfunc&lt;/code&gt; with name &lt;code&gt;f&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;(B) What would be the output of the following Python print statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import myModule as mm
print(mm.__name__)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Suppose there are two lists of numbers,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;even = [0,2,4,6,8]
odd = [1,3,5,7,9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a &lt;strong&gt;one-line&lt;/strong&gt; Python statement (list comprehension) that gives a list &lt;code&gt;summ&lt;/code&gt; whose elements are the sum of the respective elements in the above two lists &lt;code&gt;odd&lt;/code&gt; and &lt;code&gt;even&lt;/code&gt;, that is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [37]: summ
Out[37]: [1, 5, 9, 13, 17]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(Hint: You can use &lt;code&gt;zip&lt;/code&gt; function inside the list comprehension.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the following for-loop,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
How many iterations does this for-loop perform before ending? Explain briefly why.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/quiz/6-problems-python-modules-loops-io&quot;&gt;Quiz 6: Problems - Python modules, loops, and IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 8: Python - I/O, error handling, and testing frameworks]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing"/>
  <id>http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture further explains topics on Input/Output processes and error handling in Python, as well as methods of testing the accuracy and robustness of your code.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;io-continued&quot;&gt;I/o (continued)&lt;/h2&gt;
&lt;p&gt;So far in this course, we have indirectly discussed several methods of getting input information from the user, and several methods of outputting the result in a Python program. This lecture, attempts at formalizing all the previous discussions and introduce more general efficient methods of the code interaction with users.&lt;/p&gt;

&lt;h3 id=&quot;methods-of-inputting-data&quot;&gt;Methods of inputting data&lt;/h3&gt;
&lt;p&gt;Let’s begin with an example code, explaining the meaning of input/output (I/O) in Python,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import exp
a = 0.1
b = 1
x = 0.6
y = a*exp(b*x)
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.1822118800390509
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code, $a,b,x$ are examples of input data to a code, and $y$ is an example of code output. In such case as in the above, the input data is said to be &lt;strong&gt;hardcoded&lt;/strong&gt; in the program.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;In general, in any programming language, including Python you should always avoid hardcoding input information into your program.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    If data is hardcoded, then every time it has to change, the user has to change the content of the code, and this is not considered good programming style for software development.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
In general, input data can be fed to a program in four different ways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;let the user answer questions in a dialog in the &lt;strong&gt;terminal window&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user provide input on the &lt;strong&gt;command line&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user provide input data in a &lt;strong&gt;file&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user write input data in a &lt;strong&gt;graphical interface&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;input-data-from-terminal-window&quot;&gt;Input data from terminal window&lt;/h4&gt;
&lt;p&gt;We have already introduced and used this method frequently in previous lectures, via the Python’s builtin function &lt;code&gt;input()&lt;/code&gt;. If we were to get the input data for the above example code via the terminal window, an example would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import exp
a,b,x = input('input the values for a,b,x (comma separated): ').split(&quot;,&quot;)
y = float(a)*exp(float(b)*float(x))
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input the values for a,b,x (comma separated): 0.1,1,0.6
0.1822118800390509
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;input-data-from-command-line&quot;&gt;Input data from command line&lt;/h4&gt;

&lt;p&gt;This approach, which we discussed in previous lecture, is most popular in Unix-like environments, where most users are accustomed to using Bash command line. However, it can be readily used in Windows environment as well. For this approach, there is a Python module &lt;code&gt;sys&lt;/code&gt; that can accomplish what we desire,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import exp
import sys
a,b,x = sys.argv[1],sys.argv[2],sys.argv[3]
y = float(a)*exp(float(b)*float(x))
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now if you save this code in a &lt;a href=&quot;http:/ECL2017S/lecture/8/input_via_sys.py&quot; target=&quot;_blank&quot;&gt;file&lt;/a&gt;, and run it on the Bash command line, the program expects you the enter 3 float numbers following the name of the program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python input_via_sys.py 0.1 1 0.6
0.1822118800390509
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;ATTENTION: Notice the convention for command-line arguments&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    
    &lt;b&gt;1.&lt;/b&gt; As you see in the above example, the name of the program is considered as the first command line argument (&lt;code&gt;sys.argv[0]&lt;/code&gt;). Also the arguments must be separated by a white space, and should appear in the proper order.&lt;br /&gt;&lt;br /&gt;
    
    &lt;b&gt;2.&lt;/b&gt; If one value has a white space (e.g., a string value with white space character in it), then it has to be contained in quotation marks &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;&quot;&quot;&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;
    
    &lt;b&gt;3.&lt;/b&gt; Also note that all input command-line arguments are taken as string values. Therefore, you will have to convert them to the proper type (e.g., float, int, ...) once they are read from the command line.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;variable-number-of-command-line-arguments&quot;&gt;Variable number of command line arguments&lt;/h5&gt;
&lt;p&gt;If the number of input arguments on the command line is not known a priori, then you can get a list of all input arguments using &lt;code&gt;sys.argv[1:]&lt;/code&gt; and then use a for-loop to loop over individual elements of it, or use &lt;code&gt;len()&lt;/code&gt; function to find the total number of input arguments.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;option-value-pairs-as-command-line-input&quot;&gt;Option-value pairs as command-line input&lt;/h5&gt;
&lt;p&gt;Once the number of input arguments to your code increases, the process of inputting data as command line arguments can get complicated. Ideally, the user should be able to enter data in any arbitrary order. This can be done by indicating the meaning of each input by a flag before the input value. For example, suppose you were to find the location $y(t)$ of an object thrown up in the air vertically, given that the object started at $y=y_0$, at $t=0$ with an initial velocity $v_0$, and thereafter was subject to a constant acceleration $a$,
&lt;script type=&quot;math/tex&quot;&gt;y(t) = y_0 + v_0t + \frac{1}{2}at^2 ~.&lt;/script&gt;
Obviously, this formula requires four input variables: $y_0$, $v_0$, $a$, and $t$, and we don’t the program user to memorize their order of entry on the command line. The solution is to identify the type of each input using a flag preceding the input value. This can be done using &lt;code&gt;argparse&lt;/code&gt; Python module. Details of the usage of this module goes beyond the limited time of our class. However, I recommend you to have a look at the &lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot; target=&quot;_blank&quot;&gt;syntax and usage of &lt;em&gt;argparse&lt;/em&gt; module&lt;/a&gt;, as you will find it very handy in your Python codes, projects, and software development.&lt;/p&gt;

&lt;h4 id=&quot;input-data-from-file&quot;&gt;Input data from file&lt;/h4&gt;
&lt;p&gt;In cases where the input data is large, the command-line arguments and input from terminal window are not efficient anymore. In such cases, the most common approach is to let the code read input data from a file, the path to which is most often given to the code from the command line or the terminal window.&lt;/p&gt;

&lt;h5 id=&quot;reading-a-file-line-by-line&quot;&gt;Reading a file line by line&lt;/h5&gt;
&lt;p&gt;To read a file, say &lt;a href=&quot;http:/ECL2017S/lecture/8/data.in&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;, one first needs to open it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: myfile = open('data.in', 'r')

In [2]: type(myfile)
Out[2]: _io.TextIOWrapper

In [5]: myfile.
     myfile.buffer         myfile.detach         myfile.fileno         myfile.line_buffering myfile.newlines       myfile.readline       myfile.seekable       myfile.writable
     myfile.close          myfile.encoding       myfile.flush          myfile.mode           myfile.read           myfile.readlines      myfile.tell           myfile.write
     myfile.closed         myfile.errors         myfile.isatty         myfile.name           myfile.readable       myfile.seek           myfile.truncate       myfile.writelines

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The function &lt;code&gt;open&lt;/code&gt; creates a file object, stored in the variable &lt;code&gt;myfile&lt;/code&gt;. The second input argument to &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;'r'&lt;/code&gt; tells the function that the purpose of this file opening is to read data (as opposed to, for example, writing data, or both reading and writing).&lt;/p&gt;

&lt;p&gt;Now you can use a for loop to read the data in this file line by line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;for line in myfile:
    print(line)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is printed here, is actually the content of &lt;code&gt;data.in&lt;/code&gt; file, line by line.&lt;/p&gt;

&lt;h5 id=&quot;alternative-method-of-reading-file-data&quot;&gt;Alternative method of reading file data&lt;/h5&gt;
&lt;p&gt;Instead of reading one line at a time, as in the above, we can load all lines into a single list of strings,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [9]: myfile = open('data.in', 'r')
In [10]: lines = myfile.readlines()

In [11]: type(lines)
Out[11]: list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that each element of &lt;code&gt;line&lt;/code&gt; contains one line of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [15]: lines
Out[15]: ['1\n', '3\n', '4\n', '5\n', '6\n', '7\n', '88\n', '65\n']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The action of the method &lt;code&gt;readlines()&lt;/code&gt; is equivalent to a for-loop like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: myfile = open('data.in', 'r')
    ...: lines = []
    ...: for line in myfile:
    ...:     lines.append(line)
    ...: lines
    ...:
Out[16]: ['1\n', '3\n', '4\n', '5\n', '6\n', '7\n', '88\n', '65\n']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or this &lt;em&gt;list comprehension&lt;/em&gt; format,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [19]: myfile = open('data.in', 'r')
    ...: lines = [line for line in myfile]
    ...: lines
    ...:
Out[19]: ['1\n', '3\n', '4\n', '5\n', '6\n', '7\n', '88\n', '65\n']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose you were to calculate the mean of the numbers in &lt;a href=&quot;http:/ECL2017S/lecture/8/data.in&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;. You could simply use the following list comprehension code to do so,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [22]: mean = sum([float(line) for line in lines])/len(lines)
    ...: print(mean)
22.375
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that once you read the file, you can close it using,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;myfile.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-with-statement&quot;&gt;The &lt;em&gt;with&lt;/em&gt; statement&lt;/h5&gt;
&lt;p&gt;More often in modern Python code you may see the &lt;code&gt;with&lt;/code&gt; statement for reading a file, like the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [34]: with open('data.in', 'r') as myfile:
    ...:     for line in myfile:
    ...:         print(line)
    ...:
1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This is technically equivalent to,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [35]: myfile = open('data.in', 'r')
    ...: for line in myfile:
    ...:     print(line)
    ...: myfile.close()
    ...:
1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The difference here is that with the modern &lt;code&gt;with&lt;/code&gt; statement, there is no need to close the file in the end.&lt;/p&gt;

&lt;h5 id=&quot;the-old-while-true-construction&quot;&gt;The old &lt;em&gt;while True&lt;/em&gt; construction&lt;/h5&gt;
&lt;p&gt;The call &lt;code&gt;myfile.readline()&lt;/code&gt; returns a string containing the text at the current line. A new &lt;code&gt;myfile.readline()&lt;/code&gt; statement will read the next line. If the file reaches the end, then &lt;code&gt;myfile.readline()&lt;/code&gt; returns an empty string, the end of the file has
reached and the code must stop further reading of the file. The traditional way of telling the code to stop at the end of the file is a &lt;code&gt;while&lt;/code&gt; loop like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [36]: myfile = open('data.in', 'r')
    ...: while True:
    ...:     line = myfile.readline()
    ...:     if not line:
    ...:         break
    ...:     print(line)
1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;reading-an-entire-file-as-a-single-string&quot;&gt;Reading an entire file as a single string&lt;/h5&gt;
&lt;p&gt;While the &lt;code&gt;readlines()&lt;/code&gt; method returns a list of lines in the file, the &lt;code&gt;read()&lt;/code&gt; method returns a string containing the entire content of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
In [37]: myfile = open('data.in', 'r')
    ...: s = myfile.read()

In [38]: s
Out[38]: '1\n3\n4\n5\n6\n7\n88\n65\n'

In [39]: print(s)
1
3
4
5
6
7
88
65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The major advantage of this method of reading file content is that you can then immediately apply string methods directly on the file content.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [48]: myfile = open('data.in', 'r')
    ...: numbers = [float(x) for x in myfile.read().split()]
    ...: mean = sum(numbers)/len(numbers)
    ...:

In [49]: print(mean)
22.375
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;converting-user-input-to-live-python-objects&quot;&gt;Converting user input to live Python objects&lt;/h3&gt;
&lt;p&gt;One of the cool features in Python I/O is that you can provide text containing valid Python code as input to a program and then
turn that text into &lt;em&gt;live Python objects&lt;/em&gt; as if the text were lines of code written directly into the program beforehand. This is a very powerful tool for letting users specify function formulas, for instance, as input to a program. The program code itself has no knowledge about the kind of function the user wants to work with, yet at run time the user’s desired
formula enters the computations. To achieve the goal, one can use Python’s &lt;strong&gt;magic functions&lt;/strong&gt;, a.k.a. &lt;strong&gt;special methods&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-magic-eval-function&quot;&gt;The magic &lt;em&gt;eval&lt;/em&gt; function&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;eval&lt;/code&gt; function takes a &lt;strong&gt;string as argument&lt;/strong&gt; and &lt;strong&gt;evaluates&lt;/strong&gt; this string as a &lt;strong&gt;Python expression&lt;/strong&gt;. The result of an expression is an &lt;strong&gt;object&lt;/strong&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [10]: eval('1+2')
Out[10]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This is equivalent to typing,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: 1+2
Out[11]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or another example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [12]: a = 1

In [13]: b = 2

In [14]: c = eval('a+b')

In [15]: c
Out[15]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [19]: from math import sqrt

In [20]: eval('sqrt(4)')
Out[20]: 2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But, note that in all of the above examples, the &lt;code&gt;eval&lt;/code&gt; function &lt;strong&gt;evaluates&lt;/strong&gt; a Python expression, that is, this function &lt;strong&gt;cannot execute&lt;/strong&gt; a Python statement.&lt;/p&gt;

&lt;p&gt;Now the cool thing about this function is that, you can directly apply it to the user input. For example, suppose the user is asked to input a Python expression and then the code is supposed to evaluate the input just like a simple calculator,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;eval(input('Input an arithmetic expression to evaluate: '))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Input an arithmetic expression to evaluate: 2 + 3.0/5 + exp(7)
1099.2331584284584
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;the-magic-exec-function&quot;&gt;The magic &lt;em&gt;exec&lt;/em&gt; function&lt;/h4&gt;
&lt;p&gt;Similar to the &lt;code&gt;eval&lt;/code&gt; function, there is also an &lt;code&gt;exec&lt;/code&gt; magic function that executes a string containing an arbitrary
Python code, not just a Python expression. This is a powerful idea since it now enables the user to write a formula as input to the program, available to the program in the form of a string object. The program can then convert this formula to a callable Python code, or function, using the magic &lt;code&gt;exec&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [21]: exec('import math')

In [22]: exec('a=1; b=2; c=a+b')

In [23]: a,b,c
Out[23]: (1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One could even input a full function definition to the exec function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;myFuncString = input('Input a Python function definition of interest: ')
f = exec(myFuncString)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Input a Python function definition of interest, named func: def func(x): return 2*x + 1  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;func(x=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, since this is such a useful functionality in Python, there is already a package written &lt;code&gt;scitools&lt;/code&gt;, that converts an input expression to a Python function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from scitools.StringFunction import StringFunction
myfuncString = input('Input a Python expression to build your requested Python function: ')
myfunc = StringFunction(myfuncString)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The only major caveat with this module is that, at the moment, it only works with Python 2.x, and not Python 3. So, the above code will not work on your Python 3 platform.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;methods-of-outputting-data&quot;&gt;Methods of outputting data&lt;/h3&gt;
&lt;p&gt;Two major methods of data output are,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;writing to the terminal window, as previously done using &lt;code&gt;print()&lt;/code&gt; function, or,&lt;/li&gt;
  &lt;li&gt;writing to an output file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have already extensively discussed printing output to the terminal window. Writing data to file is also easy.&lt;/p&gt;

&lt;h4 id=&quot;writing-to-a-file&quot;&gt;Writing to a file&lt;/h4&gt;
&lt;p&gt;Similar to reading from a file, in order to write to a file, one has to first open the file, this time for the purpose of writing, which is indicated by &lt;code&gt;'w'&lt;/code&gt; or &lt;code&gt;'a'&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;outfile = open(filename, 'w') # write to a new file, or overwrite file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One could also &lt;strong&gt;append&lt;/strong&gt; some output to an &lt;strong&gt;existing file&lt;/strong&gt; using the &lt;code&gt;'a'&lt;/code&gt; indicator as input to &lt;code&gt;open()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;outfile = open(filename, 'a') # append to the end of an existing file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In both cases, the string valued variable &lt;code&gt;filename&lt;/code&gt; contains the path to the file that should be created or manipulated. Suppose we want to write the output of the above code in previous section to a new file. All you would need to do is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;myfile = open('data.in', 'r')
numbers = [float(x) for x in myfile.read().split()]
mean = sum(numbers)/len(numbers)
outfile = open('data.out','w')
outfile.write(str(mean) + '\n')
myfile.close()
outfile.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will result in the creation of &lt;a href=&quot;http:/ECL2017S/lecture/8/data.out&quot; target=&quot;_blank&quot;&gt;a new file&lt;/a&gt; named &lt;code&gt;data.out&lt;/code&gt; which contains the value of &lt;code&gt;mean&lt;/code&gt; variable. Note that the addition of the character &lt;code&gt;'\n'&lt;/code&gt; at the end of the &lt;code&gt;write&lt;/code&gt; statement is necessary, otherwise the next write to the file will not appear on a new line.&lt;/p&gt;

&lt;h5 id=&quot;writing-a-table-of-data-to-a-file&quot;&gt;Writing a table of data to a file&lt;/h5&gt;
&lt;p&gt;Now suppose you were to write the following list to an output file,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data = [[ 0.75, 0.29619813, -0.29619813, -0.75 ],
[ 0.29619813, 0.11697778, -0.11697778, -0.29619813],
[-0.29619813, -0.11697778, 0.11697778, 0.29619813],
[-0.75, -0.29619813, 0.29619813, 0.75 ]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One solution would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;outfile = open('table.out', 'w')
for row in data:
    for column in row:
        outfile.write( '{:14.8f}'.format(column) )
    outfile.write('\n')
outfile.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This code would result in the creation of an &lt;a href=&quot;http:/ECL2017S/lecture/8/table.out&quot; target=&quot;_blank&quot;&gt;output file&lt;/a&gt; named &lt;code&gt;table.out&lt;/code&gt; which contain the content of &lt;code&gt;data&lt;/code&gt; variable, in a nice formatted style as the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;    0.75000000    0.29619813   -0.29619813   -0.75000000
    0.29619813    0.11697778   -0.11697778   -0.29619813
   -0.29619813   -0.11697778    0.11697778    0.29619813
   -0.75000000   -0.29619813    0.29619813    0.75000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;error-handling-in-python&quot;&gt;Error handling in Python&lt;/h2&gt;
&lt;p&gt;A good code has to be able to handle exceptional situations that may occur during the code execution. These exceptions may occur during data input from either command line, terminal window, or an input file. They may also occur as a result of repeated operations on the input data, inside the code. For example, in &lt;a href=&quot;http:/ECL2017S/lecture/7-python-modules-loops-io#command-line-arguments&quot; target=&quot;_blank&quot;&gt;lecture 7&lt;/a&gt;, we explained a way of handling the wrong number of input command line arguments. This and similar measures to handle nicely the unexpected runtime errors is what’s called &lt;strong&gt;error and exception handling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A simple way of error handling is to write multiple if-blocks each of which handle a special exceptional situation. That is, to let the code execute some statements, and if something goes wrong, write the program in such a way that can detect this and jump to a set of statements that handle the erroneous situation as desired.&lt;/p&gt;

&lt;p&gt;A more modern and flexible way of handling such potential errors in Python is through the following Python construction,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;try:
    &amp;lt;Python statements&amp;gt;
except &amp;lt;error type&amp;gt;:
    &amp;lt;Python statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, if we were to rewrite the command line argument section in &lt;a href=&quot;http:/ECL2017S/lecture/7/cmd_find_primes.py&quot; target=&quot;_blank&quot;&gt;this code&lt;/a&gt; in &lt;a href=&quot;http:/ECL2017S/lecture/7-python-modules-loops-io#command-line-arguments&quot; target=&quot;_blank&quot;&gt;lecture 7&lt;/a&gt;, to handle exceptions that arise due to &lt;code&gt;ValueError&lt;/code&gt; (e.g., not an integer input), it would look something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        try:
            n = int(sys.argv[1])
            print('Here is a list of all prime numbers smaller than {}:'.format(n))
            get_primes(n)
        except ValueError:
            print('The input you entered is not an integer!\n Try again...')
            sys.exit(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The statement &lt;code&gt;sys.exit(1)&lt;/code&gt; aborts the program. The whole code can be found &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_modern.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Now if we run the &lt;a href=&quot;http:/ECL2017S/lecture/7/cmd_find_primes.py&quot; target=&quot;_blank&quot;&gt;original code&lt;/a&gt; with a non-integer input, we would get the following Python error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ../7/cmd_find_primes.py amir
Traceback (most recent call last):
  File &quot;../7/cmd_find_primes.py&quot;, line 34, in &amp;lt;module&amp;gt;
    n = int(sys.argv[1])
ValueError: invalid literal for int() with base 10: 'amir'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
whereas, if we run the &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_modern.py&quot; target=&quot;_blank&quot;&gt;newly written code&lt;/a&gt;, the non-integer error is noicely handled by outputting a gentle error message to the user and exiting the program gracefully.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cmd_find_primes_modern.py amir
The input you entered is not an integer!
 Try again...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The type of error occurring in the above example was &lt;code&gt;ValueError&lt;/code&gt;. There can be however, many other types of errors and exceptions. For this reason, Python has a &lt;a href=&quot;https://docs.python.org/2/library/exceptions.html&quot; target=&quot;_blank&quot;&gt;builtin list of exceptions&lt;/a&gt; that frequently occur in programming.&lt;/p&gt;

&lt;h3 id=&quot;the-raise-statement&quot;&gt;The &lt;em&gt;raise&lt;/em&gt; statement&lt;/h3&gt;
&lt;p&gt;Instead of the print statement in the above &lt;code&gt;except&lt;/code&gt; block, Python has a builtin function to handle the error together with an input message from the programmer. For example, the previous code, could be modified to the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        try:
            n = int(sys.argv[1])
            print('Here is a list of all prime numbers smaller than {}:'.format(n))
            get_primes(n)
        except ValueError:
            raise ValueError('The input you entered is not an integer!\n Try again...')
            sys.exit(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Executing the &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_raise.py&quot; target=&quot;_blank&quot;&gt;code&lt;/a&gt; with wrong input would give,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cmd_find_primes_raise.py amir
Traceback (most recent call last):
  File &quot;./cmd_find_primes_raise.py&quot;, line 35, in &amp;lt;module&amp;gt;
    n = int(sys.argv[1])
ValueError: invalid literal for int() with base 10: 'amir'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;./cmd_find_primes_raise.py&quot;, line 39, in &amp;lt;module&amp;gt;
    raise ValueError('The input you entered is not an integer!\n Try again...')
ValueError: The input you entered is not an integer!
 Try again...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A more elegant and cleaner way of handling and outputting the error would be use the following syntax, in &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_raise_as_err.py&quot; target=&quot;_blank&quot;&gt;this modified code&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        try:
            n = int(sys.argv[1])
            print('Here is a list of all prime numbers smaller than {}:'.format(n))
            get_primes(n)
        except ValueError as err:
            print(err)
            sys.exit(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
With the following output,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cmd_find_primes_raise_as_err.py amir
invalid literal for int() with base 10: 'amir'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In the statement &lt;code&gt;except ValueError as err:&lt;/code&gt; one could use &lt;code&gt;Exception&lt;/code&gt; for all types of errors instead of only &lt;code&gt;ValueError&lt;/code&gt; exceptions, or use a tuple syntax such as &lt;code&gt;except (ValueError, IndexError) as err:&lt;/code&gt; to cover these two exceptions.&lt;/p&gt;

&lt;h2 id=&quot;code-verification-and-unit-testing&quot;&gt;Code verification and unit testing&lt;/h2&gt;
&lt;p&gt;In the previous lecture we discussed the process of creating modules and collecting functions in one file as a personal module to be used later. As soon as the list of your codes and functions grow, you will need to have a unified way of ensuring all your functions work appropriately, regardless of the potential future internal changes that are made to the functions. This is what the &lt;strong&gt;unit testing&lt;/strong&gt; exists for. Unit testing is a software development process in which the smallest testable parts of an application, called &lt;strong&gt;units&lt;/strong&gt;, are individually and independently scrutinized for proper operation. Unit testing can be done manually, but if you have a long list of functions (which you most often have), you’d want to automate the testing process.&lt;/p&gt;

&lt;p&gt;The grand goal in unit testing is to reduce the risk of encountering potential problems when running the code in the smallest possible units of the code. This means,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ensuring the code has the &lt;strong&gt;correct behavior&lt;/strong&gt; when given the proper input data.&lt;/li&gt;
  &lt;li&gt;ensuring the &lt;strong&gt;code robustness&lt;/strong&gt; to exceptions and invalid input data, meaning that it does not crash when it reaches unexpected situations during the code execution and gracefully handles the error, without interruption.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because of the goals for which the unit tests are designed, they are mostly written and used by the developers of the code.&lt;/p&gt;

&lt;h3 id=&quot;unit-test-frameworks&quot;&gt;Unit test frameworks&lt;/h3&gt;
&lt;p&gt;There are many ways to write tests for codes. Now, if you asked each software developer to write a unit test for a specific software, each would likely come up with their own set of rules and tests of the software. You will end up with many tests, that will generally only be usable by the developer that wrote the tests. That is why you should select a unit test framework. A unit test framework provides consistency for how the unit tests for your project are written. There are many test frameworks to choose from for just about any language you want to program with, including Python. Just like programming language, almost every programmer has a strong opinion which test framework is the best. Research what’s out there and use the one that meets the needs of your organization (For example, there is one experienced Python programmer in our ECL class who does not like any of the existing unit tests for Python, and wants to write his own unit test as the project of this course!).&lt;/p&gt;

&lt;p&gt;The framework will provide a consistent testing structure to create maintainable tests with reproducible results. From a product quality and business point of view, those are the most valuable reasons to use a unit test framework. When you write a code, you should also think of a quick and simple way to develop and verify your logic in isolation. Once you make sure you have it working solidly by itself, then you can proceed to integrate it into the larger project solutions with great confidence.&lt;/p&gt;

&lt;p&gt;Python offers three unit testing frameworks,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;unittest&lt;/strong&gt;&lt;/a&gt; (Python’s standard unit testing framework)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nose.readthedocs.io/en/latest/index.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;nose&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.pytest.org/en/latest/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;pytest&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;which automate as much as possible the process of testing all of your codes, whenever required. The last, &lt;code&gt;pytest&lt;/code&gt; appears to be the most popular unit testing framework as of today.&lt;/p&gt;

&lt;h4 id=&quot;conventions-for-test-functions&quot;&gt;Conventions for test functions&lt;/h4&gt;
&lt;p&gt;The simplest way of using the testing frameworks (e.g., pytest or nose) is to write a set of test functions, scattered around in files, such that pytest or nose can automatically find and run all of these test functions. To achieve the goal, the test functions need to follow certain conventions:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The name of a test function starts with &lt;code&gt;test_&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A test function cannot take any arguments.&lt;/li&gt;
  &lt;li&gt;Any test must be formulated as a boolean condition.&lt;/li&gt;
  &lt;li&gt;An &lt;code&gt;AssertionError&lt;/code&gt; exception is raised if the boolean condition is &lt;code&gt;False&lt;/code&gt; (i.e., when the test fails).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;testing-function-accuracy&quot;&gt;Testing function accuracy&lt;/h4&gt;
&lt;p&gt;Suppose we have written the following function which runs the Newton’s method for solving an algebraic equation of the form $f(x)=0$, and we would like to write a test function that ensures its correct behavior.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def newton(f, dfdx, x, eps=1E-7):
    n = 0 # iteration counter
    while abs(f(x)) &amp;gt; eps:
        x = x - f(x)/dfdx(x)
        n += 1
    return x, f(x), n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Our goal is to write a function that tests the validity of the output of the function for a special case for which we know the results a priori. In the case of the above code, the function output is a not a fixed result, but an approximate float number $x_0$ which satisfies the condition $f(x_0)&amp;lt;\epsilon$ where $\epsilon$ is a prescribed number close to zero. Therefore, we have to first come up with a mathematical test input function to the function &lt;code&gt;newton&lt;/code&gt;, for which we have calculated the correct answer a priori, and we want to make sure if the above code gives the same answer. Since the output of the function &lt;code&gt;newton&lt;/code&gt; is a float that depends on the machine precision, we cannot expect the function to output the exact same result every time the code is run on any computer. Therefore, we have to define our test such that the function passes the test even if the result is not exactly what we expect, but still close enough to the correct answer. Here is an example test function for the above code using the &lt;code&gt;sin(x)&lt;/code&gt; function as the test input function to &lt;code&gt;newton()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def test_newton_sin():
    
    from math import sin, cos, pi

    def f(x):
        return sin(x)
    
    def dfdx(x):
        return cos(x)
    
    x_ref = 0.000769691024206
    f_x_ref = 0.000769690948209
    n_ref = 3
    x, f_x, n = newton(f, dfdx, x=-pi/3, eps=1E-2)
    tol = 1E-15 # tolerance for comparing real numbers
    assert abs(x_ref - x) &amp;lt; tol , &quot;The test for the value of x_0 failed&quot; # is x correct?
    assert abs(f_x_ref - f_x) &amp;lt; tol , &quot;The test for the function value failed&quot; # is f_x correct?
    assert n == 3 , &quot;The test for the number of iterations failed&quot; # is f_x correct? # is n correct?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that in the above test function, the function name begins with &lt;code&gt;test_&lt;/code&gt;, takes no arguments, and raises an &lt;code&gt;assertionError&lt;/code&gt; at the end. Now if you run the test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;test_newton_sin()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
you will notice that the function passed the test. However, if in the above test, we set &lt;code&gt;eps=1E-10&lt;/code&gt;, and run the test again, you will get an assertion error like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&amp;lt;ipython-input-20-8be9faac8d8e&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 test_newton_sin()

&amp;lt;ipython-input-18-263651ba410f&amp;gt; in test_newton_sin()
     14     x, f_x, n = newton(f, dfdx, x=-pi/3, eps=1E-10)
     15     tol = 1E-15 # tolerance for comparing real numbers
---&amp;gt; 16     assert abs(x_ref - x) &amp;lt; tol , &quot;The test for the value of x_0 failed&quot; # is x correct?
     17     assert abs(f_x_ref - f_x) &amp;lt; tol , &quot;The test for the function value failed&quot; # is f_x correct?
     18     assert n == 3 , &quot;The test for the number of iterations failed&quot; # is f_x correct? # is n correct?

AssertionError: The test for the value of x_0 failed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One could also write exact tests for the function &lt;code&gt;newton&lt;/code&gt; which test for an exact result which is known a priori, for example a mathematical linear input function to &lt;code&gt;newton&lt;/code&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;testing-function-robustness&quot;&gt;Testing function robustness&lt;/h4&gt;
&lt;p&gt;The above &lt;code&gt;newton&lt;/code&gt; function is very basic and suffers from several problems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;for divergent iterations it will iterate forever,&lt;/li&gt;
  &lt;li&gt;it can divide by zero in f(x)/dfdx(x),&lt;/li&gt;
  &lt;li&gt;it can perform integer division in f(x)/dfdx(x),&lt;/li&gt;
  &lt;li&gt;it does not test whether the arguments have acceptable types and values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A more robust implementation dealing with these potential problems would look like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def Newton(f, dfdx, x, eps=1E-7, maxit=100):
    if not callable(f): raise TypeError( 'f is %s, should be function or class with __call__' % type(f) )
    if not callable(dfdx): raise TypeError( 'dfdx is %s, should be function or class with __call__' % type(dfdx) )
    if not isinstance(maxit, int): raise TypeError( 'maxit is %s, must be int' % type(maxit) )
    if maxit &amp;lt;= 0: raise ValueError( 'maxit=%d &amp;lt;= 0, must be &amp;gt; 0' % maxit )
    n = 0 # iteration counter
    while abs(f(x)) &amp;gt; eps and n &amp;lt; maxit:
        try:
            x = x - f(x)/float(dfdx(x))
        except ZeroDivisionError:
            raise ZeroDivisionError( 'dfdx(%g)=%g - cannot divide by zero' % (x, dfdx(x)) )
        n += 1
    return x, f(x), n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, for this more robust code (than the earlier version: &lt;code&gt;newton&lt;/code&gt;), we have to also write a set of tests, examining the robustness of the code, subject to potential exceptions. For example, one can write a test function that examines the behavior of &lt;code&gt;Newton&lt;/code&gt; subject to an input mathematical function that is known to lead to divergent (infinite) iterations, if the initial starting point $x$ is not sufficiently close to the root of the function. One such example is $f(x)=tanh(x)$, for which a starting search value of $x=20$ would lead to infinite iterations in the Newton’s method. So we can set &lt;code&gt;maxit=12&lt;/code&gt; in our robust &lt;code&gt;Newton&lt;/code&gt; code, and test that the actual number of iterations reaches this limit. Given our prior knowledge for this function, that the value of $x$ will also diverge after 12 iterations, we could also add a test for the value of $x$, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def test_Newton_divergence():
    from math import tanh
    f = tanh
    dfdx = lambda x: 10./(1 + x**2)
    
    x, f_x, n = Newton(f, dfdx, 20, eps=1E-4, maxit=12)
    assert n == 12
    assert x &amp;gt; 1E+50
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;test_Newton_divergence()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The example given here, only tests for the robustness of &lt;code&gt;Newton()&lt;/code&gt; in handling divergent situations. For other potential problems, one has to write other test functions, some which will be given as exercise.&lt;/p&gt;

&lt;h3 id=&quot;summary-unit-testing&quot;&gt;Summary: unit testing&lt;/h3&gt;
&lt;p&gt;Unit testing is a component of &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot; target=&quot;_blank&quot;&gt;test-driven development (TDD)&lt;/a&gt;, a pragmatic methodology that takes a meticulous approach to building a product by means of &lt;em&gt;continual testing and revision&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Unit testing has a steep learning curve. The development team needs to learn what unit testing is, how to unit test, what to unit test and how to use automated software tools to facilitate the process on an on-going basis.  The great benefit to unit testing is that the earlier a problem is identified, the fewer compound errors occur. A compound error is one that doesn’t seem to break anything at first, but eventually conflicts with something down the line and results in a problem.&lt;/p&gt;

&lt;p&gt;There is a lot more to unit testing and the existing Python frameworks for it than we discussed here. However, covering all those topics would require a dedicated course for unit testing, which is certainly beyond the capacity of this course. But if you are interested to know more, I recommend you to refer to one of the three unit testing frameworks mentioned &lt;a href=&quot;#unit-test-frameworks&quot;&gt;above&lt;/a&gt;. There are also books already written on this topic an example of which is available &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000000754/pr01.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing&quot;&gt;Lecture 8: Python - I/O, error handling, and testing frameworks&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 7: Problems - Python I/O, error handling, and unit testing]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/7-problems-python-IO-error-handling-unit-testing"/>
  <id>http:/ECL2017S/homework/7-problems-python-IO-error-handling-unit-testing</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This homework aims at giving you some experience with Python I/O, error handling in your code, and testing you code for accuracy and robustness.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Write a simple program named &lt;code&gt;sum.py&lt;/code&gt;, that takes in an arbitrary-size list of input floats from the command-line, and prints out the sum of them on the terminal with the following message,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python sum.py 1 2 1 23
The sum of 1 2 1 23 is 27.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that you will need to use the Python’s builtin function &lt;code&gt;sum()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Similar to the previous probelm, write a simple program named &lt;code&gt;sum_via_eval.py&lt;/code&gt;, that takes in an arbitrary-size list of input numbers from the command-line, and prints out the sum of them on the terminal, this time using Python’s &lt;code&gt;eval&lt;/code&gt; function. The program output should look like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python sum.py 1 2 1 23
The sum of 1 2 1 23 is 27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider &lt;a href=&quot;http:/ECL2017S/homework/7/1A2T_A.dssp&quot; target=&quot;_blank&quot;&gt;this data file&lt;/a&gt;. It contains information about the amino acids in &lt;a href=&quot;http://www.rcsb.org/pdb/explore.do?structureId=1a2t&quot; target=&quot;_blank&quot;&gt;a protein&lt;/a&gt; called &lt;code&gt;1A2T&lt;/code&gt;. Each amino acid in protein is labeled by a single letter. There are 20 amin acid molecules in nature, and each has a total surface area (in units of Angstroms squared) that is given by the following table,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'A': 129.0
'R': 274.0
'N': 195.0
'D': 193.0
'C': 167.0
'Q': 225.0
'E': 223.0
'G': 104.0
'H': 224.0
'I': 197.0
'L': 201.0
'K': 236.0
'M': 224.0
'F': 240.0
'P': 159.0
'S': 155.0
'T': 172.0
'W': 285.0
'Y': 263.0
'V': 174.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, when these amino acids sit next to each other to form a chain protein, they cover parts of each other, such that only parts of their surfaces is exposed, while the rest is hidden from the outside world by other neighboring amino acids. Therefore, one would expect an amino acid that is at the core of a spherical protein would have almost zero exposed surface area.&lt;/p&gt;

&lt;p&gt;Now given the above information, write a Python program that takes in two command-line input arguments, one of which is a string containing the path to the above &lt;a href=&quot;http:/ECL2017S/homework/7/1A2T_A.dssp&quot; target=&quot;_blank&quot;&gt;input file&lt;/a&gt; &lt;code&gt;1A2T_A.dssp&lt;/code&gt; which contains the partially exposed surface areas of amino acids in protein &lt;code&gt;1A2T&lt;/code&gt; for each of its amino acids, and a second command-line argument which is the path to the file containing output of the code (e.g., it could be &lt;code&gt;./readDSSP.out&lt;/code&gt;). Then,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;the code reads the content of this file, and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;extracts the names of the amino acids in this protein from the data column inside the file which has the header &lt;code&gt;AA&lt;/code&gt; (look at the line number 25 inside the input data file, below &lt;code&gt;AA&lt;/code&gt; is the column containing the one-letter names of amino acids in this protein), and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;also extracts the partially exposed surface area information for each of these amino acids which appear in the column with header &lt;code&gt;ACC&lt;/code&gt;, and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;then uses the above table of maximum surface area values to calculate the fractional exposed surface area of each amino acid in this protein (i.e., for each amino acid, fraction_of_exposed_surface = ACC / maximum_surface_area_from_table), and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;finally for each amino acid in this protein, it prints the one-letter name of the amino acid, its corresponding partially exposed surface area (ACC from the input file), and its corresponding fractional exposed surface area (name it RSA) to the output file given by the user on the command line.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;On the first column of the output file, the code should also write the name of the protein (which is basically the name of the input file &lt;code&gt;1A2T_A&lt;/code&gt;) on each line of the output file. &lt;strong&gt;Note that your code should extract the protein name from the input filename&lt;/strong&gt; (by removing the file extension and other unnecessary information from the input command line string). &lt;a href=&quot;http:/ECL2017S/homework/7/readDSSP.out&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is an example output of the code.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Your code should also be able to handle an error resulting from less or more than 2 input command line arguments. That is, if the number of input arguments is 3 or 1, then it should input the following message on screen and stop.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./readDSSP.py ./1A2T_A.dssp


Usage:
      ./readDSSP.py &amp;lt;input dssp file&amp;gt; &amp;lt;output summary file&amp;gt;

Program aborted.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./readDSSP.py ./1A2T_A.dssp ./readDSSP.out amir


Usage:
      ./readDSSP.py &amp;lt;input dssp file&amp;gt; &amp;lt;output summary file&amp;gt;

Program aborted.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To achieve the above goal, you will have to create a dictionary from the above table, with amino acid names as the keys, and the maximum surface areas as the corresponding values. Name your code &lt;code&gt;readDSSP.py&lt;/code&gt; and submit it to your repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write your code in such a way that it checks for the existence of the output file&lt;/strong&gt;. If it already exists, then it does not remove the content of the file, whereas, it appends new data to the existing file. therwise, if the file does not exist, then it creates a new output file as requested by the user. To do so, you will need to use &lt;code&gt;os.path.isfile&lt;/code&gt; function from module &lt;code&gt;os&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;: Note that in some rows instead of a one-letter amino acid name, there is &lt;code&gt;!&lt;/code&gt;. In such cases, your code should be able to detect the abnormality and skip that row, because that row does not contain amino acid information.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the simplest program for evaluating the formula $y(t) = v_0t-\frac{1}{2}gt^2$,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v0 = 3; g = 9.81; t = 0.6
y = v0*t - 0.5*g*t**2
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(A) Write a program that takes in the above necessary input data ($t$,$v_0$) as command line arguments.&lt;br /&gt;
&lt;br /&gt;
(B) Extend your program from part (A) with exception handling such that missing command-line arguments are detected. For example, if the user has entered enough input arguments, then the code should raise &lt;code&gt;IndexError&lt;/code&gt; exception. In the &lt;code&gt;except IndexError&lt;/code&gt; block, the code should use the &lt;code&gt;input&lt;/code&gt; function to ask the user for the missing input data.&lt;br /&gt;
&lt;br /&gt;
(C) Add another exception handling block that tests if the $t$ value read from the command line, lies between $0$ and $2v_0/g$. If not, then it raises a &lt;code&gt;ValueError&lt;/code&gt; exception in the if block on the legal values of $t$, and notifes the user about the legal interval for $t$ in the exception message.&lt;/p&gt;

&lt;p&gt;Here are some example runs of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py
Both v0 and t must be supplied on the command line
v0 = ?
5
t = ?
4
Traceback (most recent call last):
  File &quot;./projectile.py&quot;, line 17, in &amp;lt;module&amp;gt;
    'must be between 0 and 2v0/g = {}'.format(t,2.0*v0/g))
ValueError: t = 4.0 is a non-physical value.
must be between 0 and 2v0/g = 1.019367991845056
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py
Both v0 and t must be supplied on the command line
v0 = ?
5
t = ?
0.5
y = 1.27375
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py 5 0.4
y = 1.2151999999999998
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py 5 0.4 3
y = 1.2151999999999998
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the function &lt;code&gt;Newton&lt;/code&gt; that we discussed in &lt;a href=&quot;http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing&quot; target=&quot;_blank&quot;&gt;lecture 8&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def Newton(f, dfdx, x, eps=1E-7, maxit=100):
    if not callable(f): raise TypeError( 'f is %s, should be function or class with __call__' % type(f) )
    if not callable(dfdx): raise TypeError( 'dfdx is %s, should be function or class with __call__' % type(dfdx) )
    if not isinstance(maxit, int): raise TypeError( 'maxit is %s, must be int' % type(maxit) )
    if maxit &amp;lt;= 0: raise ValueError( 'maxit=%d &amp;lt;= 0, must be &amp;gt; 0' % maxit )
    n = 0 # iteration counter
    while abs(f(x)) &amp;gt; eps and n &amp;lt; maxit:
        try:
            x = x - f(x)/float(dfdx(x))
        except ZeroDivisionError:
            raise ZeroDivisionError( 'dfdx(%g)=%g - cannot divide by zero' % (x, dfdx(x)) )
        n += 1
    return x, f(x), n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This function is supposed to be able to handle exceptions such as divergent iterations (which we discussed in the lecture), and division-by-zero. The latter error happens when &lt;code&gt;dfdx(x)=0&lt;/code&gt; in the above code. Write a test code that ensures the above code is able to correctly identify a division-by-zero exception and raise the correct assertionError.&lt;br /&gt;
(&lt;em&gt;Hint: To do so, you need to consider a test mathematical function as input to &lt;code&gt;Newton&lt;/code&gt;. One example could be $f(x)=\cos(x)$ with a starting search value $x=0$. This would result in derivative value $f’(x=0)=-\sin(x=0)=0$, which should lead to a &lt;code&gt;ZeroDivisionError&lt;/code&gt; exception. Now, write a test function &lt;code&gt;test_Newton_div_by_zero&lt;/code&gt; that can explicitly handle this exception by introducing a boolean variable &lt;code&gt;success&lt;/code&gt; that is &lt;code&gt;True&lt;/code&gt; if the exception is raised and otherwise &lt;code&gt;False&lt;/code&gt;&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/7-problems-python-IO-error-handling-unit-testing&quot;&gt;Homework 7: Problems - Python I/O, error handling, and unit testing&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Exam final: semester project]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/exam/2-semester-project"/>
  <id>http:/ECL2017S/exam/2-semester-project</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is page describes the course project that will serve as the final exam for this course. Please submit all your efforts for this project (all files and data and results) in &lt;code&gt;ECL2017S/exams/final/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by the end of the semester.&lt;/p&gt;

&lt;p&gt;Inside the directory for the project (&lt;code&gt;ECL2017S/exams/final/&lt;/code&gt;) create three other folders: &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; folder contains the &lt;a href=&quot;http:/ECL2017S/exam/2/cells.mat&quot; target=&quot;_blank&quot;&gt;input data&lt;/a&gt; for this project. The &lt;code&gt;src&lt;/code&gt; folder should contain all your codes that you write for this project, and the &lt;code&gt;results&lt;/code&gt; folder should contain all the results generated by your code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Our goal in this project is to fit a mathemtical model of the growth to living cells to data for the growth of a tumor mass in the brain of a rat. You can download the MATLAB data file for this project from &lt;a href=&quot;http:/ECL2017S/exam/2/cells.mat&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Write a Python code, set of separate codes that performs the following tasks one after the other, and output all the results to the &lt;code&gt;results&lt;/code&gt; folder described above. If you have multiple Python codes each in a separate file, then write a &lt;code&gt;main.py&lt;/code&gt; Python code, such that if the user runs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./main.py ../data/cells.mat ../results/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
then all the necessary Python codes to generate all the results will be called by this &lt;code&gt;main.py&lt;/code&gt; code. The first command line argument to this code is the path to the input &lt;a href=&quot;http:/ECL2017S/exam/2/cells.mat&quot; target=&quot;_blank&quot;&gt;MATLAB data file&lt;/a&gt; containing data for this project, and the second command line tells the code where to write all the output and results of the project.&lt;/p&gt;

&lt;h3 id=&quot;data-structure-of-the-input-matlab-file&quot;&gt;Data structure of the input MATLAB file&lt;/h3&gt;
&lt;p&gt;The input file, is a 4-dimensional double-precision MATLAB matrix &lt;code&gt;cells(:,:,:,:)&lt;/code&gt;, corresponding to dimensions &lt;code&gt;cells(y,x,z,time)&lt;/code&gt;. This data is collected from MRI imaging of the rat’s brain almost every other day for a period of two weeks. For example, &lt;code&gt;cells(:,:,:,1)&lt;/code&gt; contains the number of cells at each point in space (y,x,z) at the first time point, or, &lt;code&gt;cells(:,:,10,1)&lt;/code&gt; represents a (XY) slice of MRI at $z=1$ and $t=1$.&lt;/p&gt;

&lt;p&gt;Now write a set of Python codes that perform the following tasks.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;data-reduction-and-visualization&quot;&gt;Data reduction and visualization&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; First write a code that reads the input MATLAB file and converts the data to a 4-D NumPy array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write Python codes that generate figures as similar as possible to the following figures (specific color-codes of the curves and figures do not matter, focus more on the format of the plots and its parts).&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_1_t10.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_2_t12.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_3_t14.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_5_t16.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_6_t18.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_7_t20.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;and finally, a plot that shows the time evolution of the total number of tumor cells at all time points available in the input data. The time points are  $T=[10, 12, 14, 15, 16, 18, 20]$ in units of days.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/growthCurve_CellCount_rad_00gy.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-mathematical-model-of-tumor-growth&quot;&gt;The mathematical model of tumor growth&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Now our goal is to fit the time evolution of the growth of this tumor, using a mathematical model, and use the maximum likelihood approach and Markov Chain Monte Carlo Technique to find the best-fit parameters of the model. The model we use is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gompertz_function&quot; target=&quot;_blank&quot;&gt;Gompertizan growth model&lt;/a&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;N(t,a,b,c) = a\exp\big( -b\exp(-ct) \big) ~,&lt;/script&gt;

&lt;p&gt;where $N(t)$ is the number of tumor cells at time $t$, and $a$, $b$, and $c$ are the parameters that we would like to find their best values given the input tumor cell data.&lt;/p&gt;

&lt;h4 id=&quot;combining-the-mathematical-model-with-a-regression-model&quot;&gt;Combining the mathematical model with a regression model&lt;/h4&gt;

&lt;p&gt;Now, if the model was ideally perfect in describing the data, the curve of the model predicion would pass through all the points in the growth curve plot in the above, providing a prefect description of data. This is however, never the case, as it is famously said &lt;strong&gt;all models are wrong, but some are useful&lt;/strong&gt;. In other words, the model prediction never matches observation perfectly. Therefore, we have to seek for the parameter values of the model that can get us closet possible to data. To do so, we define a statistical regression model (the renowned least-squares method) that gives us the probability $\pi(N_{obs}|N(t))$ of observing individual data points at each of the given times,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi(N_{obs}|N(t),a,b,c) = \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ N_{obs}(t)-N(t) \big]^2}{2\sigma^2} \bigg) ~,&lt;/script&gt;

&lt;p&gt;We have seven data points, so the overall probability of observing all of data $\mathcal{D}$ together given the parameters of the model, $\mathcal{L}(D|a,b,c,\sigma)$, is the product of their invidiual probabilities of observation given by the above equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}(D|a,b,c,\sigma) = \prod_{i=1}^{n=7} \pi(N_{obs}(t_i)|N(t_i),a,b,c) = \prod_{i=1}^{n=7} \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ N_{obs}(t_i)-N(t_i) \big]^2}{2\sigma^2} \bigg) ~,&lt;/script&gt;

&lt;p&gt;More often, you would want to work with $\log\mathcal{L}$ instead of $\mathcal{L}$, so the above equation becomes,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    \log\mathcal{L}(D|a,b,c,\sigma)
    &amp;= \sum_{i=1}^{n=7} \log\pi(N_{obs}(t_i)|N(t_i),a,b,c) \\\\
    &amp;= -\frac{n}{2}\bigg( \ln(2\pi) + \ln\sigma^2 \bigg) - \frac{1}{2\sigma^2} \sum_{i=1}^{n=7} \bigg[ N_{obs}(t_i)-N(t_i) \bigg]^2 ~,
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt;  Now the goal is to use an optimization algorithm, such as Markov Chain Monte Carlo available in Python via &lt;a href=&quot;https://pymc-devs.github.io/pymc/README.html&quot; target=&quot;_blank&quot;&gt;PyMc package&lt;/a&gt;, to find the most likely set of parameters of the model $a,b,c,\sigma$ that give the best prediction of the available data. Use the pymc package, or any other method you wish to obtein the best parameters, then redraw the above tumor evolution curve and show the result from the model as well. You can also alternatively use my own package for MCMC sampling, if which case, please inform me and I will instruct how to use it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/exam/2-semester-project&quot;&gt;Exam final: semester project&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 7: Python - modules, loops, and I/O]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/7-python-modules-loops-io"/>
  <id>http:/ECL2017S/lecture/7-python-modules-loops-io</id>
  <published>2017-03-29T00:00:00-05:00</published>
  <updated>2017-03-29T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains modules, loops, with a brief introduction to Input/Output processes in Python. Ideally, modules should have been part of the previous lecture (with Python functions). The split was however necessary to reduce the size of lecture 6 to a managable size.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;python-modules&quot;&gt;Python modules&lt;/h2&gt;
&lt;p&gt;We have already used Python modules extensively in the past lectures, homework, and quizzes. although we never discussed them. To put it simply, Python modules are a collection of Python definitions, variables, functions, … that can be reused as a library in future.&lt;/p&gt;

&lt;p&gt;Sometimes you want to reuse a function from an old program in a new program. The simplest way to do this is to copy and paste the old source code into the new program. However, this is not good programming practice, because you then over
time end up with multiple identical versions of the same function. When you want to improve the function or correct a bug, you need to remember to do the same update in all files with a copy of the function, and in real life most programmers fail to do so. You easily end up with a mess of different versions with different quality of basically the same code. Therefore, a golden rule of programming is to have one and only one version of a piece of code. All programs that want to use this piece of code must access one and only one place where the source code is kept. This principle is easy to implement if we create a module containing the code we want to reuse later in different programs.&lt;/p&gt;

&lt;h3 id=&quot;the-import-statement&quot;&gt;The import statement&lt;/h3&gt;
&lt;p&gt;We have already used the &lt;code&gt;math&lt;/code&gt; module on multiple occasions, using the &lt;code&gt;import&lt;/code&gt; statement. Here is an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: import math

In [12]: value = math.factorial(5)

In [13]: print(value)
120

In [14]: math.pi
Out[14]: 3.141592653589793

In [15]: math.e
Out[15]: 2.718281828459045
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In its simplest form, the import has the following syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import module1[, module2[,... moduleN]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
like,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import math, cmath, numpy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The standard approach for calling the names and definitions (variables, functions, …) inside the module is using the module-name prefix, like the above examples. To call the module names without the prefix, use the following module import statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: from math import *

In [17]: factorial(5)
Out[17]: 120
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To import only specific names, use the format like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import pi,e,factorial,erf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This will import the four math modules names &lt;code&gt;pi,e,factorial,erf&lt;/code&gt;. You could also change the name of the input module, or specific names from it, upon importing the module into your code, using &lt;code&gt;import as&lt;/code&gt; statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: import numpy as np

In [17]: np.double(5)
Out[17]: 5.0

In [20]: from numpy import double as dble

In [21]: dble(13)
Out[21]: 13.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
    A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed &lt;b&gt;only the first time the module name is encountered in an import statement&lt;/b&gt;. &lt;br /&gt;&lt;br /&gt;
    Also, note that in general the practice of &lt;code&gt;from mod_name import *&lt;/code&gt; from a module is discouraged, since it often causes poorly readable code. It is however very useful for saving time and exra typing in interactive sessions like IPython, or Jupyter.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;listing-all-names-in-an-imported-module&quot;&gt;Listing all names in an imported module&lt;/h3&gt;
&lt;p&gt;To get a list of all available names in an imported module, use &lt;code&gt;dir()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: import math

In [13]: dir(math)
Out[13]:
['__doc__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'acos',
 'acosh',
 'asin',
 'asinh',
 'atan',
 'atan2',
 'atanh',
 'ceil',
 'copysign',
 'cos',
 'cosh',
 'degrees',
 'e',
 'erf',
 'erfc',
 'exp',
 'expm1',
 'fabs',
 'factorial',
 'floor',
 'fmod',
 'frexp',
 'fsum',
 'gamma',
 'gcd',
 'hypot',
 'inf',
 'isclose',
 'isfinite',
 'isinf',
 'isnan',
 'ldexp',
 'lgamma',
 'log',
 'log10',
 'log1p',
 'log2',
 'modf',
 'nan',
 'pi',
 'pow',
 'radians',
 'sin',
 'sinh',
 'sqrt',
 'tan',
 'tanh',
 'trunc']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;python-standard-modules&quot;&gt;Python standard Modules&lt;/h3&gt;
&lt;p&gt;Python comes with a set of standard modules as its library, the so-called &lt;a href=&quot;https://docs.python.org/3/library/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Python Standard Library&lt;/strong&gt;&lt;/a&gt;. Some of these modules are built into the Python interpreter; these provide access to operations that are not part of the core of the language but are nevertheless built in, for efficiency and other reasons.&lt;/p&gt;

&lt;h3 id=&quot;creating-modules&quot;&gt;Creating modules&lt;/h3&gt;

&lt;p&gt;To make a Python module, simply collect all the functions that constitute the module in one single file with a given filename, for example, &lt;code&gt;mymodule.py&lt;/code&gt;. This file will be automatically a module, with name &lt;code&gt;mymodule&lt;/code&gt;, from which you can import functions and definitions in the standard way described above.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Why and when do you need to create a module?&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Sometimes you want to reuse a function from an old program in a new program. The simplest way to do this is to copy and paste the old source code into the new program. However, this is not good programming practice, because you then over time end up with multiple identical versions of the same function. When you want to improve the function or correct a bug, you need to remember to do the same update in all files with a copy of the function, and in real life most programmers fail to do so. You easily end up with a mess of different versions with different quality of basically the same code. Therefore, a golden rule of programming is to have one and only one version of a piece of code. All programs that want to use this piece of code must access one and only one place where the source code is kept. This principle is easy to implement if we create a module containing the code we want to reuse later in different programs.
&lt;/blockquote&gt;

&lt;p&gt;Note that modules can import other modules. It is customary but not required to place all import statements at the beginning of a module (or script, for that matter). The imported module names are placed in the importing module’s global &lt;a href=&quot;https://en.wikipedia.org/wiki/Symbol_table&quot; target=&quot;_blank&quot;&gt;symbol table&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;executing-modules-as-scripts&quot;&gt;Executing modules as scripts&lt;/h4&gt;

&lt;p&gt;When a Python module is called from the Bash command prompt like,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python mycode.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the code in the module will be executed, just as if you imported it inside another code. This is good, but can sometimnes become problematic. Let’s explain this with an example from the midterm exam, a &lt;a href=&quot;http:/ECL2017S/lecture/7/find_primes.py&quot; target=&quot;_blank&quot;&gt;script&lt;/a&gt; that finds and reports all prime numbers smaller than a given input number $n$.&lt;/p&gt;

&lt;p&gt;When you execute this code as astandalone Python script, it will ask you for an integer, to give you all integers that are smaller than the input number. Now suppose you wanted to import this script as a Python module into your code. If you do so, the Python interpreter would run all statements in this script and asks you to input an integer, before importing the rest of the functions in this script.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [5]: import find_primes
Enter an integer number:
n = 13

 Here is a list of all prime numbers smaller than 13:
13
11
7
5
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This may not be necessarily what we want to do. For example, we may only want to use the functions &lt;code&gt;get_primes&lt;/code&gt; and &lt;code&gt;is_prime&lt;/code&gt; in this script, without asking the user to input an integer and finding all smaller primes. The solution is to put the part of the code in the script that we don’t want to be executed as module, that is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('Enter an integer number: ')
n = int(input('n = '))
print('\n Here is a list of all prime numbers smaller than {}:'.format(n))
get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
inside the following if-block,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    print('Enter an integer number: ')
    n = int(input('n = '))
    print('Here is a list of all prime numbers smaller than {}:'.format(n))
    get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
When the code is run as a standalone script, the &lt;code&gt;__name__&lt;/code&gt; property of the code is set to &lt;code&gt;__main__&lt;/code&gt;. However, when the script is imported as a module inside another code, the &lt;code&gt;__name__&lt;/code&gt; property is automatically set to the name of the module &lt;code&gt;find_primes&lt;/code&gt;. Thus as a module, the above if-block will not be executed, but the rest of the code (the two functions) will be properly imported. The corrected script is named &lt;code&gt;mod_find_primes.py&lt;/code&gt; and can be downloaded from &lt;a href=&quot;http:/ECL2017S/lecture/7/mod_find_primes.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;In [6]: import mod_find_primes
In [7]: mod_find_primes.__name__
Out[7]: 'mod_find_primes'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You could also import specific names or funcitons from your own module, for example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;In [11]: from mod_find_primes import is_prime
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In summary,&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Add test blocks in your modules&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    It is recommended to only have functions and not any statements outside functions in a module. The reason is that the module file is executed from top to bottom during the import. With function definitions only in the module file, and no main program, there will be no calculations or output from the import, just definitions of functions. But in case you need to write a module that can be run standalone, then put all script statements for the standalone part of the module inside a &lt;b&gt;test block&lt;/b&gt; (the if-block described above).
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;command-line-arguments&quot;&gt;Command line arguments&lt;/h4&gt;

&lt;p&gt;Test blocks are especially useful when your module can be also run as a standalone Python script that takes in &lt;strong&gt;command-line arguments&lt;/strong&gt;. &lt;a href=&quot;http:/ECL2017S/lecture/7/cmd_find_primes.py&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is a modified version of the &lt;code&gt;mod_find_primes&lt;/code&gt; module now named &lt;code&gt;cmd_find_primes&lt;/code&gt; that instead of using &lt;code&gt;input()&lt;/code&gt; function, reads the integer number from the Bash command line. To do so, you need to modify the last part of the original module to the following, using Python’s standard &lt;code&gt;sys&lt;/code&gt; module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        n = int(sys.argv[1])
        print('Here is a list of all prime numbers smaller than {}:'.format(n))
        get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now if you run this code, from the Bash command line, or inside IPython, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [14]: run cmd_find_primes.py

    Error: Exactly two arguments must be given on the command line.
    Usage:
      cmd_find_primes.py &amp;lt;a positive integer number&amp;gt;

An exception has occurred, use %tb to see the full traceback.

SystemExit:      Program stopped.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The code will expect you to enter an integer right after the nbame of the script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [15]: run cmd_find_primes.py 13
Here is a list of all prime numbers smaller than 13:
13
11
7
5
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In general, I recommend you to use the &lt;code&gt;sys&lt;/code&gt; module for input arguments instead of Python’s &lt;code&gt;input()&lt;/code&gt; function.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Modules and main functions&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    If you have some functions and a main program in some program file, just move the main program to the test block. Then the file can act as a module, giving access to all the functions in other files, or the file can be executed from the command line, in the same way as the original program.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;test-blocks-for-module-code-verification&quot;&gt;Test blocks for module code verification&lt;/h4&gt;

&lt;p&gt;It is a good programming habit to let the test block do one or more of three things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;provide information on how the module or program is used,&lt;/li&gt;
  &lt;li&gt;test if the module functions work properly,&lt;/li&gt;
  &lt;li&gt;offer interaction with users such that the module file can be applied as a useful program.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To achieve the second task, we have to write functions that verify the implementation in a module. The general advice is to write test functions that,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;have names starting with &lt;code&gt;test_&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;express the success or failure of a test through a boolean variable, say &lt;code&gt;success&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;run &lt;code&gt;assert success, msg&lt;/code&gt; to raise an &lt;code&gt;AssertionError&lt;/code&gt; with an optional message &lt;code&gt;msg&lt;/code&gt; in case the test fails.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We talk about this later on in this course.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Doc-strings in modules&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    It is a good habit to include a doc-string in the beginning of your module file. This doc string should explain the purpose and use of the module.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;scope-of-definitions-in-your-module&quot;&gt;Scope of definitions in your module&lt;/h4&gt;

&lt;p&gt;Once you have created your module, you can import it just like any other module into our program, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [22]: import cmd_find_primes

In [23]: dir(cmd_find_primes)
Out[23]:
['__builtins__',
 '__cached__',
 '__doc__',
 '__file__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'get_primes',
 'is_prime']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, more often than not, you may want to have variables in your module, that are only to be used inside the module and not be accessed by the user. The convention is to start the names of these variables by an underscore. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;_course = &quot;Python programming&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This however, does not prevent the import of the variable &lt;code&gt;_course&lt;/code&gt; into your code from your the &lt;a href=&quot;http:/ECL2017S/lecture/7/mod_cmd_find_primes_del.py&quot; target=&quot;_blank&quot;&gt;module&lt;/a&gt; containing it. One solution is to delete the variables that we are not interested the user to have access to, at the end of the module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;del _course
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
such that the &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;module&lt;/a&gt; containing the above statement will give,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [28]: import mod_cmd_find_primes_del

In [29]: dir( mod_cmd_find_primes_del )
Out[29]:
['__builtins__',
 '__cached__',
 '__doc__',
 '__file__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'get_primes',
 'is_prime']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;However, note that if you import all definitions in &lt;a href=&quot;http:/ECL2017S/lecture/7/mod_cmd_find_primes_all.py&quot; target=&quot;_blank&quot;&gt;your module&lt;/a&gt; as standalone definitions like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [4]: from mod_cmd_find_primes_all import *

In [5]: dir()
Out[5]:
['In',
 'Out',
 '_',
 '_3',
 '__',
 '___',
 '__builtin__',
 '__builtins__',
 '__doc__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 '_dh',
 '_i',
 '_i1',
 '_i2',
 '_i3',
 '_i4',
 '_i5',
 '_ih',
 '_ii',
 '_iii',
 '_oh',
 '_sh',
 'exit',
 'get_ipython',
 'get_primes',
 'is_prime',
 'quit']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
you see that the variable &lt;code&gt;_course&lt;/code&gt; is not imported. In general, to avoid confusion, it is best to define an &lt;code&gt;__all__&lt;/code&gt; variable in your module, which contains a list of all variable and function names that are to be imported as standalone definitions using &lt;code&gt;from mymodule import *&lt;/code&gt;. For example, add the following to the above module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;__all__ = ['get_primes']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Upong importing this module, now only the function &lt;code&gt;get_prime&lt;/code&gt; will be imported and not &lt;code&gt;_course&lt;/code&gt; or &lt;code&gt;is_prime&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-path-to-your-modules&quot;&gt;The path to your modules&lt;/h4&gt;
&lt;p&gt;When you create a module, if it is in the current directory of your code, then it will be automatcally found by the Python interpreter. This is however, not generally the case if your module lives in another directory than the current working directory of Python interpreter. To add the module’s directory to the path of your Python interpreter, use the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [5]: myModuleFolder = ’the path to your module’

In [6]: import sys

In [7]: sys.path
Out[7]:
['',
 'C:\\Program Files\\Anaconda3\\Scripts',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\lmfit-0.9.5_44_gb2041c3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\python35.zip',
 'C:\\Program Files\\Anaconda3\\DLLs',
 'C:\\Program Files\\Anaconda3\\lib',
 'C:\\Program Files\\Anaconda3',
 'c:\\program files\\anaconda3\\lib\\site-packages\\setuptools-20.3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Sphinx-1.3.5-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32\\lib',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Pythonwin',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\IPython\\extensions',
 'C:\\Users\\Amir\\.ipython']

In [8]: sys.path.insert(0,myModuleFolder)

In [9]: sys.path
Out[9]:
[’the path to your module’,
 '',
 'C:\\Program Files\\Anaconda3\\Scripts',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\lmfit-0.9.5_44_gb2041c3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\python35.zip',
 'C:\\Program Files\\Anaconda3\\DLLs',
 'C:\\Program Files\\Anaconda3\\lib',
 'C:\\Program Files\\Anaconda3',
 'c:\\program files\\anaconda3\\lib\\site-packages\\setuptools-20.3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Sphinx-1.3.5-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32\\lib',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Pythonwin',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\IPython\\extensions',
 'C:\\Users\\Amir\\.ipython']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In the above, we added the path to our module to the list of all paths the Python interpreter will search, in order to find the module requested to be imported (Note that &lt;code&gt;’the path to your module’&lt;/code&gt; is not a real system path, this was just an example).&lt;/p&gt;

&lt;h3 id=&quot;the-collections-module&quot;&gt;The &lt;strong&gt;collections&lt;/strong&gt; module&lt;/h3&gt;

&lt;p&gt;One of the greatest strengths of Python as a scientific programming language is that, for almost everything that you could imagine and want to write a code, someone has already written a code, and so there is &lt;em&gt;no reason to reinvent the wheel if someone has already done it for you&lt;/em&gt;. Throughout your career you will get to know many of the most important modules for your own domain of science. Here I will introduce only a general module, that has some interesting and rather useful functions in it. Specifically, this module contains some new non-standard Python data types that can be very handy at times.&lt;/p&gt;

&lt;h4 id=&quot;the-counter-data-type&quot;&gt;The &lt;strong&gt;Counter&lt;/strong&gt; data type&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Counter&lt;/code&gt; function from module &lt;code&gt;collections&lt;/code&gt; takes in a list and creates a dictionary, whose keys are unique elements in the input list and the values of the keys, are the number of times each key appears in the list. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from collections import Counter
mylist = [1,1,1,2,3,34,45,34,34,7,8,34,3,3,6,4,4,4,0,34,9,0]
c = Counter(mylist)
c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Counter({0: 2, 1: 3, 2: 1, 3: 3, 4: 3, 6: 1, 7: 1, 8: 1, 9: 1, 34: 5, 45: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are basically three methods for generating a Counter dictionary,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;c1 = Counter(['a', 'b', 'c', 'a', 'b', 'b']) # input a list directly into Counter
c2 = Counter({'a':2, 'b':3, 'c':1}) # Give it the Counter dictionary
c3 = Counter(a=2, b=3, c=1) # or simply give it the counts
c1 == c2 == c3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;what-is-counter-useful-for&quot;&gt;What is Counter useful for?&lt;/h5&gt;

&lt;p&gt;Suppose you have a long list of letters, and for some reason you need to count the number of times each letter appears in your string. You can achieve your goal as in the following example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;s = 'amirshahmoradijakelucerotravismike'
c = Counter(s)
for key in c.keys():
    print('The letter {} appears only {} times in the string'.format(key,c[key]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The letter v appears only 1 times in the string
The letter a appears only 5 times in the string
The letter u appears only 1 times in the string
The letter l appears only 1 times in the string
The letter j appears only 1 times in the string
The letter d appears only 1 times in the string
The letter h appears only 2 times in the string
The letter o appears only 2 times in the string
The letter i appears only 4 times in the string
The letter k appears only 2 times in the string
The letter c appears only 1 times in the string
The letter t appears only 1 times in the string
The letter s appears only 2 times in the string
The letter m appears only 3 times in the string
The letter r appears only 4 times in the string
The letter e appears only 3 times in the string   ​
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now suppose you wanted to cound the number of times different words appear in a given text,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;text = &quot;Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. &quot;
c = Counter(text.split())
for word in c.keys():
    print('The word &quot;{}&quot; appears only {} times in the text'.format(word,c[word]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The word &quot;Computation&quot; appears only 1 times in the text
The word &quot;a&quot; appears only 1 times in the text
The word &quot;Engineering&quot; appears only 3 times in the text
The word &quot;the&quot; appears only 2 times in the text
The word &quot;(COE111L)&quot; appears only 1 times in the text
The word &quot;offered&quot; appears only 1 times in the text
The word &quot;is&quot; appears only 2 times in the text
The word &quot;at&quot; appears only 2 times in the text
The word &quot;of&quot; appears only 2 times in the text
The word &quot;Lab&quot; appears only 1 times in the text
The word &quot;course&quot; appears only 1 times in the text
The word &quot;department&quot; appears only 1 times in the text
The word &quot;by&quot; appears only 1 times in the text
The word &quot;and&quot; appears only 1 times in the text
The word &quot;Texas&quot; appears only 1 times in the text
The word &quot;Mechanics&quot; appears only 1 times in the text
The word &quot;2017.&quot; appears only 1 times in the text
The word &quot;new&quot; appears only 1 times in the text
The word &quot;University&quot; appears only 1 times in the text
The word &quot;starting&quot; appears only 1 times in the text
The word &quot;Austin,&quot; appears only 1 times in the text
The word &quot;that&quot; appears only 1 times in the text
The word &quot;Spring&quot; appears only 1 times in the text
The word &quot;Aerospace&quot; appears only 1 times in the text  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you can also apply all different methods that exists for Counter data types on the variable &lt;code&gt;c&lt;/code&gt; in the above case. For example, you could ask for the 3 most common words in in the text,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;c.most_common(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[('Engineering', 3), ('the', 2), ('is', 2)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;the-ordereddict-data-type&quot;&gt;The &lt;strong&gt;OrderedDict&lt;/strong&gt; data type&lt;/h4&gt;
&lt;p&gt;This is also a subclass of dictionary data type, which provides all the methods provided by &lt;code&gt;dict&lt;/code&gt;, but which also retains the order by which elements are added to the dictionary,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, you can define a &lt;code&gt;defaultdict&lt;/code&gt; dictionary which will assign a default value to all keys that do not exist, and automatically adds them to the dictionary. A normal dictionary does not conserve the order by which elements were added to the dictionary,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;d = {5:5,3:3,6:6,1:1}
for i,j in d.items():
    print(i,j)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
    1 1
    3 3
    5 5
    6 6&lt;/p&gt;

&lt;p&gt;To get save order of the elements, you can use &lt;code&gt;OrderedDict&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from collections import OrderedDict as od
d = od([(5,5),(3,3),(6,6),(1,1)])
for i,j in d.items():
    print(i,j)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5 5
3 3
6 6
1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
Keep in mind that, two order dictionary with the same content may not be necessarily equal, since the order of their content also matters.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-timeit-module&quot;&gt;The timeit module&lt;/h3&gt;
&lt;p&gt;This is a module that provides some useful functions for timing the performance and speed of peices of your Python code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import timeit as tt
tt.timeit( &quot;-&quot;.join(str(n) for n in range(100)) , number=10000 )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.03779717059364884
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first input to &lt;code&gt;timeit&lt;/code&gt; function above is the operation which we would like to time, and the second input, tell the function, how many times repeat the task (If the operation takes a tiny amount, you would want to repeat it many many times, in order to get a sensible timing output). Here is the same operation as above, but now using the &lt;a href=&quot;http://book.pythontips.com/en/latest/map_filter.html#map&quot; target=&quot;_blank&quot;&gt;map&lt;/a&gt; function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;tt.timeit( &quot;-&quot;.join( map(str,range(1000))) , number=10000 )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.384857713242468  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In IPython or Jupyter, you can do the timing operation in a smarter way using IPython magic function &lt;a href=&quot;https://ipython.org/ipython-doc/dev/interactive/magics.html#magic-timeit&quot; target=&quot;_blank&quot;&gt;%timeit&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit &quot;-&quot;.join(str(n) for n in range(100))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10000 loops, best of 3: 36.6 µs per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The IPython’s magic function automatically figures how many times it should run the operation to get a sensible timing of the operation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit &quot;-&quot;.join( map(str,range(100)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10000 loops, best of 3: 21 µs per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, as you noticed in the above example, the function &lt;code&gt;map&lt;/code&gt; performs much better and faster than Python’s for-loop.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-time-module&quot;&gt;The time module&lt;/h3&gt;
&lt;p&gt;More generally, if you want to measure the CPU time spent on a specific part of your code, you can use the &lt;code&gt;clock()&lt;/code&gt; method from &lt;code&gt;time&lt;/code&gt; module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import time
# do some work
t0 = time.clock()   # get the initial CPU time
# do some further work wqhich you want to time
t1 = time.clock()   # get the final CPU time
cpu_time = t1 - t0  # This is the time spent on the task being timed.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;time.clock()&lt;/code&gt; function returns the CPU time spent in the program since its start. If the interest is in the total time, also including reading and writing files, &lt;code&gt;time.time()&lt;/code&gt; is the appropriate function to call. Now suppose you had a list of functions that performed the same task, but using different methods, and you wanted to time their performance. Since in Python, functions are ordinary objects, making a list of functions is no more special than making a list of strings or numbers. You can therefore, create a list of function names and call them one by one, inside a loop, and time each one repectively.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import time
functions = [func1, func2, func3, func4,func5, func6, func7, func8,func9, func10]
timings = [] # timings[i] holds CPU time for functions[i]
for function in functions:
    t0 = time.clock()
    function(&amp;lt;input variables&amp;gt;)
    t1 = time.clock()
    cpu_time = t1 - t0
    timings.append(cpu_time)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;loops-in-python&quot;&gt;Loops in Python&lt;/h2&gt;

&lt;p&gt;We have already seen, both in homework and midterm, what a pain it can be if you wanted to repeat a certain number of tasks using recursive functions and if-blocks. Fortunately, Python has loop statements that can highly simplify the task of repeating certain statements for a certain number of times.&lt;/p&gt;

&lt;h3 id=&quot;while-loop&quot;&gt;While loop&lt;/h3&gt;

&lt;p&gt;One such statement is the while-loop:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;while this_logical_statement_holds_true : 
    perform_statements
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, here is a code that prints all positive integers smaller than a given input integer,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
while n &amp;gt; 1:
    n -= 1
    print(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another useful way of writing while-loops is the following (using the example above),&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
while True:
    n -= 1
    print(n)
    if n == 1: break
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the loop will continue forever, unless the condition &lt;code&gt;n==1&lt;/code&gt; is met at some point during the iteration.&lt;/p&gt;

&lt;h3 id=&quot;for-loop&quot;&gt;For loop&lt;/h3&gt;

&lt;p&gt;If you are from a Fortran, C, C++ background you maybe already accustomed to counting loops than while loops. Pyhon does not have a direct method for counting loops, however, there is a for-loop syntax that loops over the elements of a list or tuple. For example, if we wanted to rewrite the above code using for-loop, one solution would be like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
my_range = range(n-1,0,-1)
for n in my_range:
    print(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the Python’s builtin function &lt;code&gt;range([start,] stop [, step])&lt;/code&gt; creates a list of integer that starts from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; &lt;em&gt;but not including &lt;code&gt;end&lt;/code&gt;&lt;/em&gt;, with a distance of size &lt;code&gt;step&lt;/code&gt; between the elements. Here is another way of doing the same thing as in the above example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
mylist = list(range(n-1,0,-1))
for n in mylist:
    print(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how I have used the &lt;code&gt;range&lt;/code&gt; function in order to get the same output as in the previous example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
mylist = list(range(n-1,0,-1))
print(mylist)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7  
[6, 5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;for-loop-with-list-indices&quot;&gt;​For-loop with list indices&lt;/h4&gt;

&lt;p&gt;Instead of iterating over over a list directly, as illustrated above, one could iterate over the indices of a list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = ['amir','jake','lecero','mike','travis']
for i in range(len(mylist)):
    print(mylist[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;amir
jake
lecero
mike
travis
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    Iterating over list indices, instead of list elements, is particularly udseful, when you have to work with multiple lists in a for-loop.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;manipulating-lists-using-for-loop&quot;&gt;Manipulating lists using for-loop&lt;/h4&gt;

&lt;p&gt;Note that when you want to change the elements of a list in a for-loop, you have to change the list itself, and not simply the for-loop variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mydigits = [1,3,5,7,9]
for i in mydigits:
    i -= 1
mydigits
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code won’t change the values in the list, instead only the for-loop variable. If you want to change the list itself, you have to operate on the list elements directly,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mydigits = [1,3,5,7,9]
for i in rnage(len(mydigits)):
    mydigits[i] -= 1
mydigits
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 2, 4, 6, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;list-comprehension&quot;&gt;List comprehension&lt;/h4&gt;

&lt;p&gt;Frequently in Python programming you may need to create long lists of regurlarly ordered item. As a result, Python has a special concise syntax for such tasks, called &lt;strong&gt;list comprehension&lt;/strong&gt; which uses for-loop. For example, supopse you have a list of odd digits as in the example above, and you want to create a list of even digits from it. You could achieve this using the following simple syntax,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;odd_digits = [1,3,5,7,9]
even_digits = [i-1 for i in odd_digits]
even_digits
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 2, 4, 6, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;simultaneous-looping-over-multiple-lists&quot;&gt;Simultaneous looping over multiple lists&lt;/h4&gt;

&lt;p&gt;Suppose you have two or more lists of the same length over the elements of which you want to perform a specific set of tasks simultaneously. To do so, it suffices to create a &lt;strong&gt;list of tuples&lt;/strong&gt; using Python’s builtin function &lt;code&gt;zip&lt;/code&gt; and loop over the tuple elements of this list. For example, let’s assume that you wanted to create a list of the addition of individual elements in the above two lists: &lt;code&gt;odd_digits&lt;/code&gt; and &lt;code&gt;even_digits&lt;/code&gt;. One way to do it would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;sum_even_odd = []
for i,j in zip(odd_digits,even_digits):
    sum_even_odd.append(i+j) 
sum_even_odd
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 5, 9, 13, 17]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/7-python-modules-loops-io&quot;&gt;Lecture 7: Python - modules, loops, and I/O&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 29, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 6: Solutions - Python modules, loops, and I/O]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/6-solutions-python-modules-loops-IO"/>
  <id>http:/ECL2017S/homework/6-solutions-python-modules-loops-IO</id>
  <published>2017-03-29T00:00:00-05:00</published>
  <updated>2017-03-29T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;6-problems-python-modules-loops-IO.html&quot; target=&quot;_blank&quot;&gt;Homework 6: Problems - Python modules, loops, and I/O&lt;/a&gt;.&lt;/p&gt;

&lt;!--
The following figure illustrates the grade distribution for this homework.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/gradeDist/gradeHistHomework6.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.&lt;br&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;
&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;This homework aims at giving you some experience with Python for-loops and while-loops as well as reading user input from the Bash command line.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop&lt;/strong&gt;. Consider the following example code, which converts a list of temperature values from Celcius to Ferenheit, using a for-loop and then prints them on screen.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]
print ('    C     F')
for C in Cdegrees:
    F = (9.0/5)*C + 32
print ('%5d %5.1f' % (C, F))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    C     F
  -20  -4.0
  -15   5.0
  -10  14.0
   -5  23.0
    0  32.0
    5  41.0
   10  50.0
   15  59.0
   20  68.0
   25  77.0
   30  86.0
   35  95.0
   40 104.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write a while-loop implementation of the above code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]
index = 0
print ('    C     F')
while index &amp;lt; len(Cdegrees):
    C = Cdegrees[index]
    F = (9.0/5)*C + 32
    print('%5d %5.1f' % (C, F))
    index += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    C     F
  -20  -4.0
  -15   5.0
  -10  14.0
   -5  23.0
    0  32.0
    5  41.0
   10  50.0
   15  59.0
   20  68.0
   25  77.0
   30  86.0
   35  95.0
   40 104.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Consider the following nested list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;the following nested list:
q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a for-loop that extracts all the letters in the list and finally prints them all as a single string,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;abcdefgh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]
s = ''
for i in q:
    for j in range(len(i)):
        s = s + i[j]
print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;abcdefgh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider the following program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import sqrt
for n in range(1, 60):
    r_org = 2.0
    r = r_org
    for i in range(n):
        r = sqrt(r)
    for i in range(n):
        r = r ** 2
    print ('With {} times sqrt and then {} times **2, the number {} becomes: {:.16f}'.format(n,n,r_org,r))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain what this code does. Then run the code, and explain why do you the behavior observed. In particular, why do you not recover the original value $2$ after many repetitions of the same forward and reverse task?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
This code will yield the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import sqrt
for n in range(1, 60):
    r_org = 2.0
    r = r_org
    for i in range(n):
        r = sqrt(r)
    for i in range(n):
        r = r ** 2
    print ('With {} times sqrt and then {} times **2, the number {} becomes: {:.16f}'.format(n,n,r_org,r))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;With 1 times sqrt and then 1 times **2, the number 2.0 becomes: 2.0000000000000004
With 2 times sqrt and then 2 times **2, the number 2.0 becomes: 1.9999999999999996
With 3 times sqrt and then 3 times **2, the number 2.0 becomes: 1.9999999999999996
With 4 times sqrt and then 4 times **2, the number 2.0 becomes: 1.9999999999999964
With 5 times sqrt and then 5 times **2, the number 2.0 becomes: 1.9999999999999964
With 6 times sqrt and then 6 times **2, the number 2.0 becomes: 1.9999999999999964
With 7 times sqrt and then 7 times **2, the number 2.0 becomes: 1.9999999999999714
With 8 times sqrt and then 8 times **2, the number 2.0 becomes: 2.0000000000000235
With 9 times sqrt and then 9 times **2, the number 2.0 becomes: 2.0000000000000235
With 10 times sqrt and then 10 times **2, the number 2.0 becomes: 2.0000000000000235
With 11 times sqrt and then 11 times **2, the number 2.0 becomes: 2.0000000000000235
With 12 times sqrt and then 12 times **2, the number 2.0 becomes: 1.9999999999991336
With 13 times sqrt and then 13 times **2, the number 2.0 becomes: 1.9999999999973292
With 14 times sqrt and then 14 times **2, the number 2.0 becomes: 1.9999999999973292
With 15 times sqrt and then 15 times **2, the number 2.0 becomes: 1.9999999999973292
With 16 times sqrt and then 16 times **2, the number 2.0 becomes: 2.0000000000117746
With 17 times sqrt and then 17 times **2, the number 2.0 becomes: 2.0000000000408580
With 18 times sqrt and then 18 times **2, the number 2.0 becomes: 2.0000000000408580
With 19 times sqrt and then 19 times **2, the number 2.0 becomes: 2.0000000001573586
With 20 times sqrt and then 20 times **2, the number 2.0 becomes: 2.0000000001573586
With 21 times sqrt and then 21 times **2, the number 2.0 becomes: 2.0000000001573586
With 22 times sqrt and then 22 times **2, the number 2.0 becomes: 2.0000000010885857
With 23 times sqrt and then 23 times **2, the number 2.0 becomes: 2.0000000029511749
With 24 times sqrt and then 24 times **2, the number 2.0 becomes: 2.0000000066771721
With 25 times sqrt and then 25 times **2, the number 2.0 becomes: 2.0000000066771721
With 26 times sqrt and then 26 times **2, the number 2.0 becomes: 1.9999999917775542
With 27 times sqrt and then 27 times **2, the number 2.0 becomes: 1.9999999917775542
With 28 times sqrt and then 28 times **2, the number 2.0 becomes: 1.9999999917775542
With 29 times sqrt and then 29 times **2, the number 2.0 becomes: 1.9999999917775542
With 30 times sqrt and then 30 times **2, the number 2.0 becomes: 1.9999999917775542
With 31 times sqrt and then 31 times **2, the number 2.0 becomes: 1.9999999917775542
With 32 times sqrt and then 32 times **2, the number 2.0 becomes: 1.9999990380770896
With 33 times sqrt and then 33 times **2, the number 2.0 becomes: 1.9999971307544144
With 34 times sqrt and then 34 times **2, the number 2.0 becomes: 1.9999971307544144
With 35 times sqrt and then 35 times **2, the number 2.0 becomes: 1.9999971307544144
With 36 times sqrt and then 36 times **2, the number 2.0 becomes: 1.9999971307544144
With 37 times sqrt and then 37 times **2, the number 2.0 becomes: 1.9999971307544144
With 38 times sqrt and then 38 times **2, the number 2.0 becomes: 1.9999360966436217
With 39 times sqrt and then 39 times **2, the number 2.0 becomes: 1.9999360966436217
With 40 times sqrt and then 40 times **2, the number 2.0 becomes: 1.9999360966436217
With 41 times sqrt and then 41 times **2, the number 2.0 becomes: 1.9994478907329654
With 42 times sqrt and then 42 times **2, the number 2.0 becomes: 1.9984718365144798
With 43 times sqrt and then 43 times **2, the number 2.0 becomes: 1.9965211562778555
With 44 times sqrt and then 44 times **2, the number 2.0 becomes: 1.9965211562778555
With 45 times sqrt and then 45 times **2, the number 2.0 becomes: 1.9887374575497223
With 46 times sqrt and then 46 times **2, the number 2.0 becomes: 1.9887374575497223
With 47 times sqrt and then 47 times **2, the number 2.0 becomes: 1.9887374575497223
With 48 times sqrt and then 48 times **2, the number 2.0 becomes: 1.9887374575497223
With 49 times sqrt and then 49 times **2, the number 2.0 becomes: 1.8682459487159784
With 50 times sqrt and then 50 times **2, the number 2.0 becomes: 1.6487212645509468
With 51 times sqrt and then 51 times **2, the number 2.0 becomes: 1.6487212645509468
With 52 times sqrt and then 52 times **2, the number 2.0 becomes: 1.0000000000000000
With 53 times sqrt and then 53 times **2, the number 2.0 becomes: 1.0000000000000000
With 54 times sqrt and then 54 times **2, the number 2.0 becomes: 1.0000000000000000
With 55 times sqrt and then 55 times **2, the number 2.0 becomes: 1.0000000000000000
With 56 times sqrt and then 56 times **2, the number 2.0 becomes: 1.0000000000000000
With 57 times sqrt and then 57 times **2, the number 2.0 becomes: 1.0000000000000000
With 58 times sqrt and then 58 times **2, the number 2.0 becomes: 1.0000000000000000
With 59 times sqrt and then 59 times **2, the number 2.0 becomes: 1.0000000000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
What is happening is that, 1 is returned for n &amp;gt;= 52 as square root of 2, that is, after 52 times square-root operation, the degree of accuracy required for representing the result goes beyond the degree of accuracy available in a Python float. Consequently, the later squaring operation on 1.00000000000000 will leave the number unchanged and therefore, 2 is not recovered.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;eps = 1.0
while 1.0 != 1.0 + eps:
    print ('...............', eps)
    eps /= 2.0
print ('final eps:', eps)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Explain what the code is doing. Run the code and observe the output. How could &lt;code&gt;1.0 != 1.0 + eps&lt;/code&gt; be False?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is the output of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;............... 1.0
............... 0.5
............... 0.25
............... 0.125
............... 0.0625
............... 0.03125
............... 0.015625
............... 0.0078125
............... 0.00390625
............... 0.001953125
............... 0.0009765625
............... 0.00048828125
............... 0.000244140625
............... 0.0001220703125
............... 6.103515625e-05
............... 3.0517578125e-05
............... 1.52587890625e-05
............... 7.62939453125e-06
............... 3.814697265625e-06
............... 1.9073486328125e-06
............... 9.5367431640625e-07
............... 4.76837158203125e-07
............... 2.384185791015625e-07
............... 1.1920928955078125e-07
............... 5.960464477539063e-08
............... 2.9802322387695312e-08
............... 1.4901161193847656e-08
............... 7.450580596923828e-09
............... 3.725290298461914e-09
............... 1.862645149230957e-09
............... 9.313225746154785e-10
............... 4.656612873077393e-10
............... 2.3283064365386963e-10
............... 1.1641532182693481e-10
............... 5.820766091346741e-11
............... 2.9103830456733704e-11
............... 1.4551915228366852e-11
............... 7.275957614183426e-12
............... 3.637978807091713e-12
............... 1.8189894035458565e-12
............... 9.094947017729282e-13
............... 4.547473508864641e-13
............... 2.2737367544323206e-13
............... 1.1368683772161603e-13
............... 5.684341886080802e-14
............... 2.842170943040401e-14
............... 1.4210854715202004e-14
............... 7.105427357601002e-15
............... 3.552713678800501e-15
............... 1.7763568394002505e-15
............... 8.881784197001252e-16
............... 4.440892098500626e-16
............... 2.220446049250313e-16
final eps: 1.1102230246251565e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is happening is that after a certain number of divisions performed on the value of &lt;code&gt;eps&lt;/code&gt;, the value goes beyond the highest float precision representatble by Python standard ($0.0000000000000001$), and therefore the value of &lt;code&gt;eps&lt;/code&gt; is eventually rounded to exact zero. The nonzero eps value computed above is called &lt;strong&gt;machine epsilon&lt;/strong&gt; or &lt;strong&gt;machine zero&lt;/strong&gt; and is an important parameter to know, since it can lead to disasters in your very important complex calculations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the following list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;numbers = list(range(10))
print(numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the following code, given the above list. Explain the weird behavior that you observe.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;for n in numbers:
    i = len(numbers)//2
    del numbers[i]
    print ('n={}, del {}'.format(n,i), numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;numbers = list(range(10))
for n in numbers:
    i = len(numbers)//2
    del numbers[i]
    print ('n={}, del {}'.format(n,i), numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;n=0, del 5 [0, 1, 2, 3, 4, 6, 7, 8, 9]
n=1, del 4 [0, 1, 2, 3, 6, 7, 8, 9]
n=2, del 4 [0, 1, 2, 3, 7, 8, 9]
n=3, del 3 [0, 1, 2, 7, 8, 9]
n=8, del 3 [0, 1, 2, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is really happening is that the list over which we are looping changes its content because of the modifications during on the list in the for-loop. The message in this exercise is to &lt;strong&gt;never modify a list that you are looping over&lt;/strong&gt;. Modification is indeed technically possible, as shown above, but you really need to know what you are doing. Otherwise you will experience very strange program behavior.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Consider a problem similar to what we had in the midterm exam: Write a Python function that when executed, asks the user to enter an integer number, then the function gives out the number of prime numbers that are smaller than the input integer number. Here is the answer to this question using only the knowledge of recursive functions and if-blocks,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def is_prime(n):
    
    is_prime = True
    
    def is_divisible(n,divisor):
        if n&amp;lt;(divisor-1)*divisor: return False
        if n%divisor==0: return True
        else:
            divisor += 1
            return is_divisible(n,divisor)

    if is_divisible(n,divisor=2): is_prime=False
    return is_prime

def get_primes(n):
    count = 0
    if n == 1:
        return count
    else:
        if is_prime(n):
            count = 1
        n -= 1
        return count + get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_primes(13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(A) Now rewrite &lt;code&gt;get_primes(n)&lt;/code&gt; and the other functions in the above code using for-loop this time. Name the new functions &lt;code&gt;get_prime_for(n)&lt;/code&gt; and &lt;code&gt;is_prime_for(n)&lt;/code&gt;, with &lt;em&gt;for&lt;/em&gt; in the names indicating that the functions now use for-loops.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def is_prime_for(x):
    if x &amp;gt; 1:
        n = x // 2
        for i in range(2, n + 1):
            if x % i == 0:
                return False
        return True
    else:
        return False

def get_primes_for(n):
    count = 0
    for i in range(2,n):
        if is_prime(i):
            count += 1
    return count
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here is a test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_primes_for(13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(B) Now compare the performance of the two functions &lt;code&gt;get_primes(n=500)&lt;/code&gt; and &lt;code&gt;get_primes_for(n500)&lt;/code&gt; using Jupyter’s or IPython’s &lt;code&gt;%timeit&lt;/code&gt; magic function. Which one is faster?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit get_primes(500)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1000 loops, best of 3: 1.32 ms per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit get_primes_for(500)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1000 loops, best of 3: 1.69 ms per loop  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interesting, recursive functions seem to be faster than Python for-loops!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/6-solutions-python-modules-loops-IO&quot;&gt;Homework 6: Solutions - Python modules, loops, and I/O&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 29, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 6: Problems - Python modules, loops, and I/O]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/6-problems-python-modules-loops-IO"/>
  <id>http:/ECL2017S/homework/6-problems-python-modules-loops-IO</id>
  <published>2017-03-29T00:00:00-05:00</published>
  <updated>2017-03-29T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This homework aims at giving you some experience with Python for-loops and while-loops as well as reading user input from the Bash command line.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop&lt;/strong&gt;. Consider the following example code, which converts a list of temperature values from Celcius to Ferenheit, using a for-loop and then prints them on screen.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]
print ('    C     F')
for C in Cdegrees:
    F = (9.0/5)*C + 32
print ('%5d %5.1f' % (C, F))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    C     F
  -20  -4.0
  -15   5.0
  -10  14.0
   -5  23.0
    0  32.0
    5  41.0
   10  50.0
   15  59.0
   20  68.0
   25  77.0
   30  86.0
   35  95.0
   40 104.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write a while-loop implementation of the above code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Consider the following nested list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;the following nested list:
q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a for-loop that extracts all the letters in the list and finally prints them all as a single string,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;abcdefgh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider the following program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import sqrt
for n in range(1, 60):
    r_org = 2.0
    r = r_org
    for i in range(n):
        r = sqrt(r)
    for i in range(n):
        r = r ** 2
    print ('With {} times sqrt and then {} times **2, the number {} becomes: {:.16f}'.format(n,n,r_org,r))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain what this code does. Then run the code, and explain why do you the behavior observed. In particular, why do you not recover the original value $2$ after many repetitions of the same forward and reverse task?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;eps = 1.0
while 1.0 != 1.0 + eps:
    print ('...............', eps)
    eps /= 2.0
print ('final eps:', eps)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Explain what the code is doing. Run the code and observe the output. How could &lt;code&gt;1.0 != 1.0 + eps&lt;/code&gt; be False?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the following list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;numbers = list(range(10))
print(numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the following code, given the above list. Explain the weird behavior that you observe.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;for n in numbers:
    i = len(numbers)//2
    del numbers[i]
    print ('n={}, del {}'.format(n,i), numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Consider a problem similar to what we had in the midterm exam: Write a Python function that when executed, asks the user to enter an integer number, then the function gives out the number of prime numbers that are smaller than the input integer number. Here is the answer to this question using only the knowledge of recursive functions and if-blocks,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def is_prime(n):
    
    is_prime = True
    
    def is_divisible(n,divisor):
        if n&amp;lt;(divisor-1)*divisor: return False
        if n%divisor==0: return True
        else:
            divisor += 1
            return is_divisible(n,divisor)

    if is_divisible(n,divisor=2): is_prime=False
    return is_prime

def get_primes(n):
    count = 0
    if n == 1:
        return count
    else:
        if is_prime(n):
            count = 1
        n -= 1
        return count + get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_primes(13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(A) Now rewrite &lt;code&gt;get_primes(n)&lt;/code&gt; and the other functions in the above code using for-loop this time. Name the new functions &lt;code&gt;get_prime_for(n)&lt;/code&gt; and &lt;code&gt;is_prime_for(n)&lt;/code&gt;, with &lt;em&gt;for&lt;/em&gt; in the names indicating that the functions now use for-loops.&lt;/p&gt;

&lt;p&gt;(B) Now compare the performance of the two functions &lt;code&gt;get_primes(n=500)&lt;/code&gt; and &lt;code&gt;get_primes_for(n500)&lt;/code&gt; using Jupyter’s or IPython’s &lt;code&gt;%timeit&lt;/code&gt; magic function. Which one is faster?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/6-problems-python-modules-loops-IO&quot;&gt;Homework 6: Problems - Python modules, loops, and I/O&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 29, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Exam 1: Solutions]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/exam/1-solutions-midterm-exam"/>
  <id>http:/ECL2017S/exam/1-solutions-midterm-exam</id>
  <published>2017-03-22T00:00:00-05:00</published>
  <updated>2017-03-22T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;1-problems-midterm-exam.html&quot; target=&quot;_blank&quot;&gt;Exam 1: Problems&lt;/a&gt;.&lt;/p&gt;

&lt;!--
--&gt;
&lt;p&gt;The following figure illustrates the grade distribution for the midterm exam.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/gradeDist/gradeHistMidtermExam.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This is the first (and last) midterm exam of this course, covering lectures 1-6. Please submit your answers to each of the following questions in a single &lt;code&gt;readme.md&lt;/code&gt; file, in &lt;code&gt;ECL2017S/exams/1/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by the end of the exam.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Name the closest programming language to machine code, and the oldest high-level programming language in history, respectively.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;
Assembly, Fortran.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Name a programming language ancestor of Python.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;
C.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Name the three different generations (not different software) of Version Control Systems ever developed. If you don’t remember the exact names, you can instead briefly explain how each VCS paradigm works.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Local VCS, Centralized VCS, Distributed VCS. For details of each VCS paradigm see &lt;a href=&quot;http:/ECL2017S/lecture/1-version-control-system&quot; target=&quot;_blank&quot;&gt;this lecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; What is the Git command that lists ALL tags in the project?&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt;  Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that applies the relevant Python string manipulator methods to this string,&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Python Is Great For String Manipulation.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and transforms it to the following string and and prints it on screen,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.noitalupinam-gnirts-rof-taerg-si-nohtyp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print( &quot;Python Is Great For String Manipulation.&quot;.lower().replace(' ','-')[::-1] )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.noitalupinam-gnirts-rof-taerg-si-nohtyp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Name the three major types of programming errors.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
syntax, runtime, and semantic errors.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Are tuples mutable objects? Can they be redefined?&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
No. Yes.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Download &lt;a href=&quot;http:/ECL2017S/homework/4/script_full_of_errors.py&quot; target=&quot;_blank&quot;&gt;this code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_corrected.py&lt;/code&gt; in your &lt;code&gt;exams/1/&lt;/code&gt; folder of your project. Explain in front of each corrected Python statement, why the error occurred.  On the last line of the script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;true = fox is rev in Persian
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the statement runs without error. But can you explain what it does?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The corrected file can be downloaded from &lt;a href=&quot;http:/ECL2017S/homework/4/solutions/script_full_of_errors_corrected.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
The last line of the script, first compares the identity of &lt;code&gt;fox&lt;/code&gt; with &lt;code&gt;rev&lt;/code&gt;, the result of which is either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, then checks if this result is in the list &lt;code&gt;Persian&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; (A) In the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [26]: a = [1,2,3,4,5]

In [27]: b = a

In [28]: b
Out[28]: [1, 2, 3, 5]

In [29]: b.append(6)

In [30]: a
Out[30]: [1, 2, 3, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
explain the relationship between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; (why does &lt;code&gt;a&lt;/code&gt; change from line 25 to line 30?).&lt;/p&gt;

&lt;p&gt;(B) Continuing with the above code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [31]: b = a + a

In [32]: a
Out[32]: [1, 2, 3, 5, 6]

In [33]: b
Out[33]: [1, 2, 3, 5, 6, 1, 2, 3, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
explain why the values of &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; are different?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Simple.&lt;br /&gt;
(A) &lt;code&gt;b&lt;/code&gt; is an alias for the content of &lt;code&gt;a&lt;/code&gt;.&lt;br /&gt;
(B) When &lt;code&gt;b&lt;/code&gt; is redefined in line 31, the alias between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is automatically broken.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. &lt;/strong&gt; Are the following variable assignments considered an alias for the same value (list), or independent copies of the list?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = b = c = [1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If they constitute an alias, how can you assign independent copy of the values of one variable (e.g., &lt;code&gt;c&lt;/code&gt;) to another variable (e.g., &lt;code&gt;a&lt;/code&gt;)? Otherwise, if the above assignment, creates independent copies, how would you change the assignment, such that they becomes aliases for the same value?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Multiple assignment statements result in aliases for &lt;em&gt;list&lt;/em&gt; values. To make hard copies, use the following &lt;code&gt;copy()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [45]: a = b = c = [1,2,3,4]

In [46]: a is b
Out[46]: True

In [47]: a = b.copy()

In [48]: a is b
Out[48]: False

In [49]: a
Out[49]: [1, 2, 3, 4]

In [50]: b
Out[50]: [1, 2, 3, 4]

In [51]: a == b
Out[51]: True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. &lt;/strong&gt; Write a Python program, &lt;code&gt;find_primes.py&lt;/code&gt;, that when executed, asks the user to enter an integer number, then the program prints on screen all the prime numbers smaller than the input integer number.&lt;br /&gt;
(&lt;strong&gt;Hint:&lt;/strong&gt; Start with writing a function that finds whether an input integer number is prime or not, then write another function that repeatedly calls this function to find all the prime numbers smaller than the initial input number.)&lt;/p&gt;

&lt;p&gt;Here is a sample output from the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Enter an integer number: 50
Here is a list of all prime numbers smaller than 50:
47
43
41
37
31
29
23
19
17
13
11
7
5
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
A sample answer can be downloaded from &lt;a href=&quot;http:/ECL2017S/exam/1/find_primes.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. &lt;/strong&gt; (A) Rewrite the following statement in two different but equivalent ways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A &lt;strong&gt;one-line&lt;/strong&gt; if-expression.&lt;/li&gt;
  &lt;li&gt;Using only tuple notation, instead of if-block or if-expression syntax.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)

answer_status = 'wrong'
if abbr == 'ECL':
    answer_status = 'correct'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B) Which one of the above two methods, would also be applicable to the following if-block + print statements. Rewrite it in whichever format that is suitable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if answer_status=='correct':
    print('You answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
(A)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)
answer_status = 'correct' if abbr == 'ECL' else 'wrong'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)
answer_status = ('wrong','correct')[abbr=='ECL']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)
print( ('wrong buddy...try again','You answer is correct!')[answer_status=='correct'] )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)
print( 'You answer is correct!' if answer_status=='correct' else 'wrong buddy...try again' )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. &lt;/strong&gt; Consider the following two Python expressions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1,1) is (1,1)
(1,1) == (1,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Are these two the same? Explain your answer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The keyword &lt;code&gt;is&lt;/code&gt; checks for the same identity of the objects that are compared. The operator &lt;code&gt;==&lt;/code&gt; checks for the same value of the objects.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. &lt;/strong&gt; Consider the following function which takes another function as input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r

x = 2
diff2nd_g = diff2nd(g, x)
print ( &quot;g’’(x=%f)=%f&quot; % (x, diff2nd_g) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a lambda function as an input to this function, that calculates the function value &lt;script type=&quot;math/tex&quot;&gt;x^2 + 4x + 1&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;g = lambda x: x**2 + 4.0*x + 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. &lt;/strong&gt; The traditional way of swapping values of two variables in most programming languages is like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [68]: a = 5

In [69]: b = 7

In [70]: _ = a

In [71]: a = b

In [72]: b = _

In [73]: a
Out[73]: 7

In [74]: b
Out[74]: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Rewrite the swapping above, in a more abbreviated Pythonic way, once using lists, and another using tuples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [75]: (a,b) = (b,a)

In [76]: a
Out[76]: 5

In [77]: b
Out[77]: 7

In [78]: [a,b] = [b,a]

In [79]: a
Out[79]: 7

In [80]: b
Out[80]: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/exam/1-solutions-midterm-exam&quot;&gt;Exam 1: Solutions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 22, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Exam 1: Problems]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/exam/1-problems-midterm-exam"/>
  <id>http:/ECL2017S/exam/1-problems-midterm-exam</id>
  <published>2017-03-22T00:00:00-05:00</published>
  <updated>2017-03-22T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the first (and last) midterm exam of this course, covering lectures 1-6. Please submit your answers to each of the following questions in a single &lt;code&gt;readme.md&lt;/code&gt; file, in &lt;code&gt;ECL2017S/exams/1/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by the end of the exam.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Name the closest programming language to machine code, and the oldest high-level programming language in history, respectively.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Name a programming language ancestor of Python.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Name the three different generations (not different software) of Version Control Systems ever developed. If you don’t remember the exact names, you can instead briefly explain how each VCS paradigm works.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; What is the Git command that lists ALL tags in the project?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt;  Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that applies the relevant Python string manipulator methods to this string,&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Python Is Great For String Manipulation.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and transforms it to the following string and and prints it on screen,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.noitalupinam-gnirts-rof-taerg-si-nohtyp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Name the three major types of programming errors.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Are tuples mutable objects? Can they be redefined?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Download &lt;a href=&quot;http:/ECL2017S/homework/4/script_full_of_errors.py&quot; target=&quot;_blank&quot;&gt;this code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_corrected.py&lt;/code&gt; in your &lt;code&gt;exams/1/&lt;/code&gt; folder of your project. Explain in front of each corrected Python statement, why the error occurred.  On the last line of the script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;true = fox is rev in Persian
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the statement runs without error. But can you explain what it does?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; (A) In the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [26]: a = [1,2,3,4,5]

In [27]: b = a

In [28]: b
Out[28]: [1, 2, 3, 5]

In [29]: b.append(6)

In [30]: a
Out[30]: [1, 2, 3, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
explain the relationship between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; (why does &lt;code&gt;a&lt;/code&gt; change from line 25 to line 30?).&lt;/p&gt;

&lt;p&gt;(B) Continuing with the above code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [31]: b = a + a

In [32]: a
Out[32]: [1, 2, 3, 5, 6]

In [33]: b
Out[33]: [1, 2, 3, 5, 6, 1, 2, 3, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
explain why the values of &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; are different?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. &lt;/strong&gt; Are the following variable assignments considered an alias for the same value (list), or independent copies of the list?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = b = c = [1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If they constitute an alias, how can you assign independent copy of the values of one variable (e.g., &lt;code&gt;c&lt;/code&gt;) to another variable (e.g., &lt;code&gt;a&lt;/code&gt;)? Otherwise, if the above assignment, creates independent copies, how would you change the assignment, such that they becomes aliases for the same value?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. &lt;/strong&gt; Write a Python program, &lt;code&gt;find_primes.py&lt;/code&gt;, that when executed, asks the user to enter an integer number, then the program prints on screen all the prime numbers smaller than the input integer number.&lt;br /&gt;
(&lt;strong&gt;Hint:&lt;/strong&gt; Start with writing a function that finds whether an input integer number is prime or not, then write another function that repeatedly calls this function to find all the prime numbers smaller than the initial input number.)&lt;/p&gt;

&lt;p&gt;Here is a sample output from the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Enter an integer number: 50
Here is a list of all prime numbers smaller than 50:
47
43
41
37
31
29
23
19
17
13
11
7
5
3
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. &lt;/strong&gt; (A) Rewrite the following statement in two different but equivalent ways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A &lt;strong&gt;one-line&lt;/strong&gt; if-expression.&lt;/li&gt;
  &lt;li&gt;Using only tuple notation, instead of if-block or if-expression syntax.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)

answer_status = 'wrong'
if abbr == 'ECL':
    answer_status = 'correct'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B) Which one of the above two methods, would also be applicable to the following if-block + print statements. Rewrite it in whichever format that is suitable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if answer_status=='correct':
    print('You answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. &lt;/strong&gt; Consider the following two Python expressions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1,1) is (1,1)
(1,1) == (1,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Are these two the same? Explain your answer.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. &lt;/strong&gt; Consider the following function which takes another function as input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r

x = 2
diff2nd_g = diff2nd(g, x)
print ( &quot;g’’(x=%f)=%f&quot; % (x, diff2nd_g) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a lambda function as an input to this function, that calculates the function value &lt;script type=&quot;math/tex&quot;&gt;x^2 + 4x + 1&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. &lt;/strong&gt; The traditional way of swapping values of two variables in most programming languages is like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [68]: a = 5

In [69]: b = 7

In [70]: _ = a

In [71]: a = b

In [72]: b = _

In [73]: a
Out[73]: 7

In [74]: b
Out[74]: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Rewrite the swapping above, in a more abbreviated Pythonic way, once using lists, and another using tuples.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/exam/1-problems-midterm-exam&quot;&gt;Exam 1: Problems&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 22, 2017.&lt;/p&gt;</content>
</entry>

</feed>
