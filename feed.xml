<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">COE 111L - Spring 2017</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/ECL2017S/feed.xml" />
<link rel="alternate" type="text/html" href="http:/ECL2017S/" />
<updated>2017-04-09T22:43:19-05:00</updated>
<id>http:/ECL2017S/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/ECL2017S/</uri>
  <email>amir@ices.utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Lecture 9: Python - array computing and plotting]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/9-python-array-computing-plotting"/>
  <id>http:/ECL2017S/lecture/9-python-array-computing-plotting</id>
  <published>2017-04-12T00:00:00-05:00</published>
  <updated>2017-04-12T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture focuses on array computating and code vectorization, as well as methods of plotting data in Python.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;vectorization-and-array-computing&quot;&gt;Vectorization and array computing&lt;/h2&gt;

&lt;p&gt;With regards to capabilities of Python for scientific calculations, there are conflicting opinions. On the scientific side of the opnion spectrum, some people think that Python is not good enough for number crunching (as a result which, new progamming languages such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Julia_(programming_language)&quot; target=&quot;_blank&quot;&gt;Julia&lt;/a&gt; have been developed). However, there are people at the other extreme who believe that Python is too much oriented towards scientific computation (as result of which, new programming languages have emerged, such as Google’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_(programming_language)&quot; target=&quot;_blank&quot;&gt;Go language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far in this course, you may have noticed that all numerical vector calculations were either performed with lists, tuples, or dictionaries. Sadly, Python standard does not have an intrinsic special way of defining and manipulating numerical vectors and arrays, unlike most High Performance Computing (HPC) languages for scientific computations (such as Fortran, Ada, or C). However, there are powerful Python modules that enable a Python programmer to use Python efficiently for numerical analysis as well.&lt;/p&gt;

&lt;blockquote&gt;
If you expect to use Python heavility and mostly for scientific computation in future, you should keep in mind that Python's builtin list, tuple and dictionary types can be very slow for number crunching. 
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vectors-arrays-and-the-numerical-python-numpy-package&quot;&gt;Vectors, arrays and the Numerical Python (numpy) package&lt;/h3&gt;

&lt;p&gt;In Python, a list can be &lt;strong&gt;heterogeneous&lt;/strong&gt; meaning that not all its elements are of the same type. An &lt;strong&gt;array object&lt;/strong&gt; in Python can be viewed as a variant of a list, but with the following assumptions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;All elements must be of the same type, preferably integer, real, or complex numbers, for efficient numerical computing and storage.&lt;/li&gt;
  &lt;li&gt;The number of elements must be known when the array is created.&lt;/li&gt;
  &lt;li&gt;Arrays are not part of standard Python – one needs an additional package called &lt;strong&gt;Numerical Python&lt;/strong&gt;, often abbreviated as &lt;strong&gt;NumPy&lt;/strong&gt;. The Python name of the package, to be used in import statements, is &lt;code&gt;numpy&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;With numpy, a wide range of mathematical operations can be done directly on complete arrays, thereby removing the need for loops over array elements. This is commonly called &lt;strong&gt;vectorization&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Arrays with one index are often called &lt;strong&gt;vectors&lt;/strong&gt;. Arrays with two indices are used as an efficient data structure for tables, instead of lists of lists. Arrays can also have three or more indices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The number of elements of an array can be changed, but keep in mind that this can cause significant computational cost. Creating an array of a given length is frequently referred to as &lt;strong&gt;allocating the
array&lt;/strong&gt;. It means that a part of the computer’s memory is marked for being occupied by this array.&lt;/p&gt;

&lt;p&gt;To create a numpy array, you will have to first import it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The tradition is to import &lt;code&gt;numpy&lt;/code&gt; as &lt;code&gt;np&lt;/code&gt;. To convert a list to a numpy array,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [3]: import numpy as np

In [4]: a = [1,2,3,4,5]

In [5]: a = np.array(a)

In [6]: type(a)
Out[6]: numpy.ndarray

In [7]: a
Out[7]: array([1, 2, 3, 4, 5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To create a new &lt;strong&gt;array of length n, filled with zeros&lt;/strong&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = np.zeros(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that numpy automatically identifies the appropriate type for all array elements, whether &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, or etc.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [10]: a[1]
Out[10]: 2

In [11]: type(a[1])
Out[11]: numpy.int32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Even if there is a single &lt;code&gt;float&lt;/code&gt; element in the list, then all elements in the list will be converted to float in the numpy array by default,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: type(a[1])
Out[11]: numpy.int32

In [12]: a = [1,2,3,4,5.0]

In [13]: a = np.array(a)

In [14]: type(a[1])
Out[14]: numpy.float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you want to get the desired element type, then you will have to ask numpy for it explicitly,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [17]: a = [1,2,3.5,4.9,5.0]

In [18]: a = np.array(a, int)   # convert all elements in the list to integer

In [19]: a
Out[19]: array([1, 2, 3, 4, 5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can see the full list of input arguments to np.array function &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A similar function &lt;code&gt;np.zeros_like()&lt;/code&gt; generates an array of zeros where the length is that of the array c and the element type is the same as those in c.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [33]: b = [1,2,3,4,5,6,7]

In [34]: a = np.zeros_like(b)

In [35]: a
Out[35]: array([0, 0, 0, 0, 0, 0, 0])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Often one wants an array to have $n$ elements with uniformly distributed values in an interval $[p,q]$. The numpy function &lt;code&gt;linspace&lt;/code&gt; creates such arrays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [36]: a = np.linspace(1, 100, 53)

In [37]: a
Out[37]:
array([   1.        ,    2.90384615,    4.80769231,    6.71153846,
          8.61538462,   10.51923077,   12.42307692,   14.32692308,
         16.23076923,   18.13461538,   20.03846154,   21.94230769,
         23.84615385,   25.75      ,   27.65384615,   29.55769231,
         31.46153846,   33.36538462,   35.26923077,   37.17307692,
         39.07692308,   40.98076923,   42.88461538,   44.78846154,
         46.69230769,   48.59615385,   50.5       ,   52.40384615,
         54.30769231,   56.21153846,   58.11538462,   60.01923077,
         61.92307692,   63.82692308,   65.73076923,   67.63461538,
         69.53846154,   71.44230769,   73.34615385,   75.25      ,
         77.15384615,   79.05769231,   80.96153846,   82.86538462,
         84.76923077,   86.67307692,   88.57692308,   90.48076923,
         92.38461538,   94.28846154,   96.19230769,   98.09615385,  100.        ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vectorization&quot;&gt;Vectorization&lt;/h3&gt;
&lt;p&gt;Loops over very long arrays may run slowly. An advantage of arrays is that, with arrays, loops can be avoided the whole array be manipulated directly and simultaneously. If you are a Fortran programmer, you are likely already quite familiar with the powerful idea of array computing and vectorization. If not, then consider the following example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;x = np.linspace(0, 2, 201)
In [39]: x
Out[39]:
array([ 0.  ,  0.02,  0.04,  0.06,  0.08,  0.1 ,  0.12,  0.14,  0.16,
        0.18,  0.2 ,  0.22,  0.24,  0.26,  0.28,  0.3 ,  0.32,  0.34,
        0.36,  0.38,  0.4 ,  0.42,  0.44,  0.46,  0.48,  0.5 ,  0.52,
        0.54,  0.56,  0.58,  0.6 ,  0.62,  0.64,  0.66,  0.68,  0.7 ,
        0.72,  0.74,  0.76,  0.78,  0.8 ,  0.82,  0.84,  0.86,  0.88,
        0.9 ,  0.92,  0.94,  0.96,  0.98,  1.  ,  1.02,  1.04,  1.06,
        1.08,  1.1 ,  1.12,  1.14,  1.16,  1.18,  1.2 ,  1.22,  1.24,
        1.26,  1.28,  1.3 ,  1.32,  1.34,  1.36,  1.38,  1.4 ,  1.42,
        1.44,  1.46,  1.48,  1.5 ,  1.52,  1.54,  1.56,  1.58,  1.6 ,
        1.62,  1.64,  1.66,  1.68,  1.7 ,  1.72,  1.74,  1.76,  1.78,
        1.8 ,  1.82,  1.84,  1.86,  1.88,  1.9 ,  1.92,  1.94,  1.96,
        1.98,  2.  ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, if you wanted to calculate the &lt;code&gt;sin&lt;/code&gt; of the elements of &lt;code&gt;x&lt;/code&gt; in the traditional way, you would do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [41]: from math import sin

In [42]: sinX = [sin(i) for i in x]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This approach however, can be quite time consuming and computationally costly, because &lt;strong&gt;for-loops are very slow in Python&lt;/strong&gt;, up to a few hundred times than what you get in Fortran or C.&lt;/p&gt;

&lt;p&gt;A more appropriate solution to the above problem is use the &lt;code&gt;sin&lt;/code&gt; function from numpy module, which enables vectorization,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;sinX = np.sin(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You see, with the above numpy call, there is no need for a for-loop. The above Python code is an example of a &lt;strong&gt;vectorized code&lt;/strong&gt; and the previous code which contained for-loop is an example &lt;strong&gt;scalar code&lt;/strong&gt;. The numpy functions are capable of handling arrays as input. Compare the performance of the two codes in the above example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [45]: %timeit np.sin(x)
The slowest run took 11.73 times longer than the fastest. This could mean that an intermediate result is being cached.
100000 loops, best of 3: 2.21 µs per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [46]: %timeit [sin(i) for i in x]
10000 loops, best of 3: 23.1 µs per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The vectorized code in this example appears to be more than one order of magnitude (more than 10 times) faster than faster than the scalar version of the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is the vectorized code faster in Python?&lt;/strong&gt;&lt;br /&gt;
The reason is that numpy uses precompiled Fortran and C loops to loop over the elements of the input array. loops in Fortran and C have far less overhead than loops in Python. Similar to the above example, you can define your own functions that are also vectorized, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def f(x):
    return x**2*np.exp(-x**2)
x = np.linspace(-3, 3, 101)
y = f(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The numpy package also has a method for &lt;strong&gt;Automatic vectorization&lt;/strong&gt; of scalar functions (function that only take scalar arguments), for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;func_vec = np.vectorize(func_scalar)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, for serious programming, I do not recommend you to use this numpy functionality as it can be slow and inefficient.&lt;/p&gt;

&lt;h4 id=&quot;vectorization-of-if-blocks&quot;&gt;vectorization of if-blocks&lt;/h4&gt;
&lt;p&gt;For vectorization of calculations involving boleans and if conditions, the solution can be problem dependent, but one common easy way of addrressing simple boolean problems could be &lt;code&gt;where&lt;/code&gt; method in numpy package. For example, suppose you have an list of numbers and you would like to perform a task on all negative numbers in the array, say set them all to zero, and leave the positive numbers intact. One solution would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [57]: x = np.array([1,-1,3,-5,-6,8,7,4,10])

In [58]: np.where(x&amp;lt;0,0,x)
Out[58]: array([ 1,  0,  3,  0,  0,  8,  7,  4, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aliasing-vs-copying-arrays&quot;&gt;Aliasing vs. copying arrays&lt;/h4&gt;
&lt;p&gt;If you recall from &lt;a href=&quot;http:/ECL2017S/lecture/5-python-variables-assignments#aliasing-vs-copying&quot; target=&quot;_blank&quot;&gt;lecture &lt;/a&gt;, there is a difference between aliasing and copying sequence objects in Python. The same rules also hold for numpy arrays, meaning that if you need an independent copy of an existing array, then you have to use &lt;code&gt;copy&lt;/code&gt; method to generate it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [63]: a = np.array([1,2,3,4,5])

In [64]: b = a.copy()

In [65]: b[0] = -1

In [66]: a
Out[66]: array([1, 2, 3, 4, 5])

In [67]: b
Out[67]: array([-1,  2,  3,  4,  5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
otherwise a simple equality assignment like &lt;code&gt;b = a&lt;/code&gt; will only create an alias for numpy array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [68]: a = np.array([1,2,3,4,5])

In [69]: b = a

In [70]: b[0] = -1

In [71]: a
Out[71]: array([-1,  2,  3,  4,  5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;in-place-arithmetic-in-python&quot;&gt;In-place arithmetic in Python&lt;/h4&gt;
&lt;p&gt;Consider to arrays &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; of the same shape. The expression &lt;code&gt;a += b&lt;/code&gt; means &lt;code&gt;a = a + b&lt;/code&gt;. There are however hidden differences between the two. In the statement &lt;code&gt;a = a + b&lt;/code&gt;, the sum &lt;code&gt;a + b&lt;/code&gt; is first computed, yielding a new array, and then the name &lt;code&gt;a&lt;/code&gt; is bound to this new array. The old array a is lost unless there are other names assigned to this array. In the statement &lt;code&gt;a += b&lt;/code&gt;, elements of &lt;code&gt;b&lt;/code&gt; are added directly into the elements of &lt;code&gt;a&lt;/code&gt; (in memory). There is no hidden intermediate array as in &lt;code&gt;a = a + b&lt;/code&gt;. This implies that &lt;strong&gt;&lt;code&gt;a += b&lt;/code&gt; is more efficient than &lt;code&gt;a = a + b&lt;/code&gt; since Python avoids making an extra array&lt;/strong&gt;. In other words, the operators +=, *=, and similar operators, perform &lt;strong&gt;in-place arithmetics&lt;/strong&gt; in arrays.&lt;/p&gt;

&lt;h4 id=&quot;allocating-arrays-in-python&quot;&gt;Allocating arrays in Python&lt;/h4&gt;
&lt;p&gt;We have already seen in the above that the &lt;code&gt;np.zeros&lt;/code&gt; function is useful for making a new array of a given size. Very often the size and the type of array elements are known a priori or has to match another existing array’s shape and type &lt;code&gt;b&lt;/code&gt;. There are two ways of achieving this goal,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [66]: a
Out[66]: array([1, 2, 3, 4, 5])

In [67]: b
Out[67]: array([-1,  2,  3,  4,  5])

In [68]: a
Out[68]: array([1, 2, 3, 4, 5])

In [69]: b = a.copy()

In [70]: c = np.zeros(a.shape, a.dtype)

In [71]: a.shape
Out[71]: (5,)

In [72]: a.
a.T            a.argsort      a.compress     a.cumsum       a.dumps        a.imag         a.min          a.prod         a.reshape      a.shape        a.sum          a.tostring
a.all          a.astype       a.conj         a.data         a.fill         a.item         a.nbytes       a.ptp          a.resize       a.size         a.swapaxes     a.trace
a.any          a.base         a.conjugate    a.diagonal     a.flags        a.itemset      a.ndim         a.put          a.round        a.sort         a.take         a.transpose
a.argmax       a.byteswap     a.copy         a.dot          a.flat         a.itemsize     a.newbyteorder a.ravel        a.searchsorted a.squeeze      a.tobytes      a.var
a.argmin       a.choose       a.ctypes       a.dtype        a.flatten      a.max          a.nonzero      a.real         a.setfield     a.std          a.tofile       a.view
a.argpartition a.clip         a.cumprod      a.dump         a.getfield     a.mean         a.partition    a.repeat       a.setflags     a.strides      a.tolist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Notice how the attribute &lt;code&gt;a.dtype&lt;/code&gt; (dtype standing for data type), and &lt;code&gt;x.shape&lt;/code&gt; (a tuple) were used in the above example. The shape attribute in array objects holds the shape, i.e., the size of each dimension. The method &lt;code&gt;size&lt;/code&gt; returns the total number of elements in the array.&lt;/p&gt;

&lt;p&gt;Sometimes one may also want to ensure that an object is an array, and if not, turn it into an array. The &lt;code&gt;np.asarray&lt;/code&gt; function is useful in such cases,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = np.asarray(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that one could have also use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = np.array(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There is no difference in the output, but note that the second approach does one redundant step, because in the first approach, if the input object is already an array, then there is no need in converting it to an array.&lt;/p&gt;

&lt;h4 id=&quot;multidimensional-numpy-arrays&quot;&gt;Multidimensional NumPy arrays&lt;/h4&gt;
&lt;p&gt;Creating multidimensional arrays is very much the same as vectors in numpy. The only thing to keep in mind is that the shape of the array is given as a tuple to &lt;code&gt;np.array()&lt;/code&gt;. For example, to initialize a 3D array of size (0:3,0:5,0:2), you would do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [86]: a = np.zeros((3,5,2))

In [87]: a
Out[87]:
array([[[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]],

       [[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]],

       [[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The arrays created so far have been of type &lt;code&gt;ndarray&lt;/code&gt;. NumPy also has a matrix type called &lt;code&gt;matrix&lt;/code&gt; or &lt;code&gt;mat&lt;/code&gt; for one- and two-dimensional arrays. One-dimensional arrays are then extended with one extra dimension such that they become matrices, i.e., either a row vector or a column vector,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [99]: x1 = np.array([1, 2, 3], float)

In [100]: x2 = np.matrix(x1) # or np.mat(x1)

In [102]: x3 = np.mat(x1).T # transpose = column vector

In [103]: x3
Out[103]:
matrix([[ 1.],
        [ 2.],
        [ 3.]])

In [104]: type(x3)
Out[104]: numpy.matrixlib.defmatrix.matrix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A special feature of matrix objects in NumPy is that the multiplication operator represents the matrix-matrix, vector-matrix, or matrix-vector product as we know from linear algebra. However, keep in mind that &lt;strong&gt;the multiplication operator between standard ndarray objects is different from multiplication between numpy matrices&lt;/strong&gt;. The &lt;code&gt;ndarray&lt;/code&gt; multiplication is simply a vectorized version of scalar multiplication,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [105]: a = np.array([1,2,3])

In [106]: b = np.array([1,2,3])

In [107]: a*b
Out[107]: array([1, 4, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
whereas, the matrix multiplication would yield,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [108]: aMat = np.mat(a)

In [109]: bMat = np.mat(b)

In [110]: aMat*bMat.T
Out[110]: matrix([[14]])

In [111]: aMat.T*bMat
Out[111]:
matrix([[1, 2, 3],
        [2, 4, 6],
        [3, 6, 9]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you intend to use Python and MATLAB together for your projects, then I recommend you to consider programming with matrices in Python instead of &lt;code&gt;ndarray&lt;/code&gt; objects, because the matrix type in Python behaves quite similar to matrices in MATLAB.
Numpy has a lot more to offer for linear algebra operation, that far beyond the scope of this lecture. More information about algebraic operations in NumPy can be found &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/routines.linalg.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;symbolic-linear-algebra&quot;&gt;Symbolic linear algebra&lt;/h4&gt;
&lt;p&gt;There also a package &lt;a href=&quot;http://www.sympy.org/en/index.html&quot; target=&quot;_blank&quot;&gt;SymPy&lt;/a&gt; that supports symbolic computations for linear algebra operations as well,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [116]: import sympy as sym

In [117]: a = sym.Matrix([[2, 0], [0, 5]])

In [118]: a**-1     # inverse of matrix a
Out[118]:
Matrix([
[1/2,   0],
[  0, 1/5]])

In [119]: a.inv()   # same as above, inverse of a
Out[119]:
Matrix([
[1/2,   0],
[  0, 1/5]])

In [120]: a.det()   # determinant of a
Out[120]: 10

In [121]: a.eigenvals() # eigenvalues of a
Out[121]: {2: 1, 5: 1}

In [122]: a.eigenvects()    # eigenvectors of a
Out[122]:
[(2, 1, [Matrix([
   [1],
   [0]])]), (5, 1, [Matrix([
   [0],
   [1]])])]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A tutorial on &lt;code&gt;sympy&lt;/code&gt; can be found &lt;a href=&quot;http://docs.sympy.org/dev/tutorial/matrices.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;curve-plotting-in-python&quot;&gt;Curve plotting in Python&lt;/h2&gt;
&lt;p&gt;The workhorse of plotting in Python is &lt;a href=&quot;https://matplotlib.org/&quot; target=&quot;_blank&quot;&gt;Matplotlib&lt;/a&gt; which is a Python 2D plotting library capable of producing publication quality figures. The usage of matplotlib is very similar to MATLAB.&lt;/p&gt;

&lt;h3 id=&quot;matplotlib-the-workhorse-of-plotting-in-python&quot;&gt;Matplotlib, the workhorse of plotting in Python&lt;/h3&gt;
&lt;p&gt;To see how plotting with Matplotlib works, let’s start with a simple example of 2D curve plotting,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
import matplotlib.pyplot as plt
def f(x):
    return x**2*np.exp(-x**2)
x = np.linspace(0, 3, 51) # 51 points between 0 and 3
y = np.zeros(len(x)) # allocate y with float elements
for i in range(len(x)):
    y[i] = f(x[i])
plt.plot(x, y)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you try the above code in IPython, the out on screen would be something like the following,&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/simple_curve_screen.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;You can also save the figure output as a file by,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [8]: plt.plot(x, y)
Out[8]: [&amp;lt;matplotlib.lines.Line2D at 0x1bff2e479e8&amp;gt;]

In [9]: plt.savefig('simple_curve.pdf') # produces PDF file.

In [10]: plt.savefig('simple_curve.png') # produces PNG file.

In [11]: pwd
Out[11]: 'C:\\Users\\Amir'  # files are saved here
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Just like MATLAB, the figures could be also decorated with axis labels, plot title, legend and a lot more, in a syntax very much like MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['x^2*exp(-x^2)'])
plt.axis([0, 3, -0.05, 0.6]) # [xmin, xmax, ymin, ymax]
plt.title('A simple Matplotlib decorated plot')
plt.savefig('simple_curve_decorated.png')
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which outputs &lt;a href=&quot;http:/ECL2017S/lecture/9/simple_curve_decorated.png&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt; in your current directory,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/simple_curve_decorated.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;plotting-multiple-curves-in-one-figure&quot;&gt;Plotting multiple curves in one figure&lt;/h4&gt;
&lt;p&gt;Again, similar to MATLAB, this can be achieved by the statement &lt;code&gt;hold('on')&lt;/code&gt; like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def f(x):
    return x**2*np.exp(-x**2)
def g(x):
    return x*np.exp(-x)
x = np.linspace(0, 3, 51) # 51 points between 0 and 3
yf = np.zeros(len(x)) # allocate y with float elements
yg = np.zeros(len(x)) # allocate y with float elements
for i in range(len(x)):
    yf[i] = f(x[i])
    yg[i] = g(x[i])
plt.plot(x, yf, 'r-')   # plot with color red, as line
plt.hold('on')
plt.plot(x, yg, 'bo')   # # plot with color blue, as points
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['x^2*exp(-x^2)' , 'x*exp(-x)'])
plt.axis([0, 3, -0.05, 0.6]) # [xmin, xmax, ymin, ymax]
plt.title('multiple Matplotlib curves in a decorated plot')
plt.savefig('multiple_curves_decorated.png')
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of the code is a PNG figure &lt;a href=&quot;http:/ECL2017S/lecture/9/multiple_curves_decorated.png&quot; target=&quot;_blank&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/multiple_curves_decorated.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;If you need to discontinue multiple plots on the same figure, again, as in MATLAB, you use &lt;code&gt;hold('off')&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;subplots-in-matplotlib&quot;&gt;Subplots in Matplotlib&lt;/h4&gt;
&lt;p&gt;Suppose you wanted to generate the same curves as in the above example, but each in a different plot, but in the same figure. One way to do this would be like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.figure()            # generates a new figure as in MATLAB
plt.subplot(2,1,1)      # create a 2-row, 1-column subplot, and this is the 1st subplot.
plt.plot(x, yf, 'r-')   # plot with color red, as line
plt.subplot(2,1,2)      # this is the 2nd subplot.
plt.plot(x, yg, 'bo')   # plot with color blue, as points
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['x*exp(-x)'])
plt.axis([0, 3, -0.05, 0.6]) # [xmin, xmax, ymin, ymax]
plt.title('an example Matplotlib subplot')
plt.savefig('two_by_one_subplot.png')
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of the code is a PNG figure &lt;a href=&quot;http:/ECL2017S/lecture/9/two_by_one_subplot.png&quot; target=&quot;_blank&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/lecture/9/two_by_one_subplot.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Note that since the decorations appeared only for the second subplot, only the second one in the figure above is decorated with plot title, legend, etc. Also, note that the &lt;code&gt;figure()&lt;/code&gt; method creates a new plot window on the screen.&lt;/p&gt;

&lt;h3 id=&quot;other-plotting-packages&quot;&gt;Other plotting packages&lt;/h3&gt;
&lt;p&gt;For more complicated 2D/3D or vector field plotting, you may find Matplotlib inadequate. To address these inadequacies, other packages have been developed which provide interface to more advanced plotting software such as, MATLAB, Gnuplot, Grace, OpenDX, VTK, and others.&lt;/p&gt;

&lt;h4 id=&quot;easyviz-from-scitools&quot;&gt;Easyviz from SciTools&lt;/h4&gt;
&lt;p&gt;Because each of the above mentioned visualization software has its own plotting syntax, a Python module &lt;code&gt;easyviz&lt;/code&gt; has been developed which provides a universal interface for any of the above mentioned back-end plotting software. In other words, the user can request eazyvis to use one of the above-mentioned software as the plotting engine in Python, while the syntax of the Python code is universal and the same for all of them, and this is achieved by using &lt;code&gt;eazyvis&lt;/code&gt;. Just like Matplotlib, the syntax of &lt;code&gt;eazyvis&lt;/code&gt; has been also purposfully made very similar to MATLAB.&lt;/p&gt;

&lt;p&gt;The Easyviz module is part of the &lt;a href=&quot;https://github.com/hplgit/scitools&quot; target=&quot;_blank&quot;&gt;SciTools package&lt;/a&gt;, which consists of a set of Python tools building on Numerical Python, ScientificPython, the comprehensive SciPy environment, and other packages for scientific computing with Python. However, keep in mind that &lt;strong&gt;SciTools strictly requires &lt;a href=&quot;http://python.org&quot; target=&quot;_blank&quot;&gt;Python v2.7&lt;/a&gt; and &lt;a href=&quot;http://numpy.org&quot; target=&quot;_blank&quot;&gt;Numerical Python&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;mayavi-visualization-package&quot;&gt;Mayavi visualization package&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.enthought.com/mayavi/mayavi/&quot; target=&quot;_blank&quot;&gt;Mayavi&lt;/a&gt; is another advanced, free, scientific data visualizer for Python, with emphasis on &lt;strong&gt;three-dimensional visualization techniques&lt;/strong&gt;. The package is written in Python, and uses the &lt;a href=&quot;http://www.vtk.org/&quot; target=&quot;_blank&quot;&gt;Visualization Toolkit (VTK)&lt;/a&gt; in C++ for rendering graphics. Since VTK can be configured with different backends, so can Mayavi. Mayavi is cross
platform and runs on most platforms like Mac OS X, Windows, and Linux.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/9-python-array-computing-plotting&quot;&gt;Lecture 9: Python - array computing and plotting&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 12, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 8: Solutions - Python array computing and plotting]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/8-solutions-python-array-computing-plotting"/>
  <id>http:/ECL2017S/homework/8-solutions-python-array-computing-plotting</id>
  <published>2017-04-12T00:00:00-05:00</published>
  <updated>2017-04-12T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;8-problems-python-array-computing-plotting.html&quot; target=&quot;_blank&quot;&gt;Homework 8: Problems - Python array computing and plotting&lt;/a&gt;.&lt;/p&gt;

&lt;!--
The following figure illustrates the grade distribution for this homework.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/gradeDist/gradeHistHomework8.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.&lt;br&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;This homework aims at giving you some experience with Python’s array computing and plotting features.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop&lt;/strong&gt;. Consider the following mathematical function resembling a Hat function,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
f(x) = 
\begin{cases}
    0 ~,    &amp; \text{if}~~ x&lt;0 \\
    x ~,    &amp; \text{if}~~ 0\leq x &lt;1 \\
    2-x ~,  &amp; \text{if}~~ 1\leq x &lt;2 \\
    0 ~,    &amp; \text{if}~~ x \geq 2 \\
\end{cases} %]]&gt;&lt;/script&gt;

&lt;p&gt;A scalar implementation of this function would be,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def hatFunc(x):
    if x &amp;lt; 0:
        return 0.0
    elif 0 &amp;lt;= x &amp;lt; 1:
        return x
    elif 1 &amp;lt;= x &amp;lt; 2:
        return 2 - x
    elif x &amp;gt;= 2:
        return 0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a vectorized version of this function. (Hint: you may need numpy’s &lt;code&gt;logical_and&lt;/code&gt; method for building the vectorized version of this function.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def hatFunc(x):
    condition1 = x &amp;lt; 0
    condition2 = np.logical_and(0 &amp;lt;= x, x &amp;lt; 1)
    condition3 = np.logical_and(1 &amp;lt;= x, x &amp;lt; 2)
    condition4 = x &amp;gt;= 2
    r = np.zeros(len(x))
    r[condition1] = 0.0
    r[condition2] = x[condition2]
    r[condition3] = 2-x[condition3]
    r[condition4] = 0.0
    return r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; The vertical position $y(t)$ of a ball thrown upward is given by $y(t)=v_0t-\frac{1}{2}gt^2$, where $g$ is the acceleration of gravity and $v_0$ is the initial vertical velocity at $t=0$. Two important physical quantities in this context are the potential energy, obtained by doing work against gravity, and the kinetic energy, arising from motion. The potential energy is defined as $P=mgy$, where $m$ is the mass of the ball. The kinetic energy is defined as $K=\frac{1}{2}mv^2$, where $v$ is the velocity of the ball, related to $y$ by $v(t)=y’(t)$.&lt;/p&gt;

&lt;p&gt;Write a program that can plot $P(t)$ and $K(t)$ in the same plot, along with their sum $E = P + K$. Let $t\in[0,2v_0/g]$. Write your program such that $m$ and $v_0$ are read from the command line. Run the program with various choices of $m$ and $v_0$ and observe that $P+K$ always remains constant in this motion, regardless of initial conditions. This is in fact, the fundamental principle of conservation of energy in Physics.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
A sample code can be downloaded from &lt;a href=&quot;http:/ECL2017S/homework/8/ball_energy.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Here is an example output figure of the code:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/8/ball_energy.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Integration by midpoint rule&lt;/strong&gt;: The idea of the Midpoint rule for integration is to divide the area under a curve $f(x)$ into $n$ equal-sized rectangles. The height of the rectangle is determined by the value of $f$ at the midpoint of the rectangle. The figure below illustrates the idea,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/8/midpnt.gif&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;To implement the midpointrule, one has to compute the area of each rectangle, sum them up, just as in the formula for the Midpoint rule,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int^b_a f(x) dx \approx h\sum^{n-1}_{i=0} f(a+ih+0.5h) ~,&lt;/script&gt;

&lt;p&gt;where $h=(b-a)/n$ is the width of each rectangle. Implement this formula as a Python function midpoint(f, a, b, n) and test the integrator with the following example input mathematical functions.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    f_1(x) &amp;= exp(x) ~,~ \text{for integration range } ~ [0, \log(3)] \\\\
    f_2(x) &amp;= cos(x) ~,~ \text{for integration range } ~ [0, \pi]     \\\\
    f_3(x) &amp;= sin(x) ~,~ \text{for integration range } ~ [0, \pi]     \\\\
    f_4(x) &amp;= sin(x) ~,~ \text{for integration range } ~ [0, \pi / 2] \\\\
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
An example code can be downloaded from &lt;a href=&quot;http:/ECL2017S/homework/8/midpoint.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Here is the output of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [38]: run midpoint.py
The exact integral of exp(x) between 0.00000 and 1.09861 is 2.00000.            The approximate answer is 1.99899 giving an error of 0.00101
The exact integral of cos(x) between 0.00000 and 3.14159 is 0.00000.            The approximate answer is 0.00000 giving an error of 0.00000
The exact integral of sin(x) between 0.00000 and 3.14159 is 2.00000.            The approximate answer is 2.00825 giving an error of 0.00825
The exact integral of sin(x) between 0.00000 and 1.57080 is 1.00000.            The approximate answer is 1.00103 giving an error of 0.00103
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Visualize approximations in the Midpoint integration rule&lt;/strong&gt; Now consider the following function,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = x(12-x)+\sin(\pi x) ~~,~~ x\in[0,10] ~,&lt;/script&gt;

&lt;p&gt;which we wish to integrate using the midpoint integrator that you wrote in the previous example. Now write a new code that visualizes the midpoint rule, similar to in the following figure. (Hint: you will need to use the Matplotlib function &lt;code&gt;fill_between&lt;/code&gt; and use this function to create the filled areas between f(x) and the approximating rectangles)&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/8/midpoint_visualization.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
An example code can be downloaded from &lt;a href=&quot;http:/ECL2017S/homework/8/visualize_midpoint.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/8-solutions-python-array-computing-plotting&quot;&gt;Homework 8: Solutions - Python array computing and plotting&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 12, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 8: Problems - Python array computing and plotting]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/8-problems-python-array-computing-plotting"/>
  <id>http:/ECL2017S/homework/8-problems-python-array-computing-plotting</id>
  <published>2017-04-12T00:00:00-05:00</published>
  <updated>2017-04-12T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This homework aims at giving you some experience with Python’s array computing and plotting features.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop&lt;/strong&gt;. Consider the following mathematical function resembling a Hat function,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
f(x) = 
\begin{cases}
    0 ~,    &amp; \text{if}~~ x&lt;0 \\
    x ~,    &amp; \text{if}~~ 0\leq x &lt;1 \\
    2-x ~,  &amp; \text{if}~~ 1\leq x &lt;2 \\
    0 ~,    &amp; \text{if}~~ x \geq 2 \\
\end{cases} %]]&gt;&lt;/script&gt;

&lt;p&gt;A scalar implementation of this function would be,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def hatFunc(x):
    if x &amp;lt; 0:
        return 0.0
    elif 0 &amp;lt;= x &amp;lt; 1:
        return x
    elif 1 &amp;lt;= x &amp;lt; 2:
        return 2 - x
    elif x &amp;gt;= 2:
        return 0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a vectorized version of this function. (Hint: you may need numpy’s &lt;code&gt;logical_and&lt;/code&gt; method for building the vectorized version of this function.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; The vertical position $y(t)$ of a ball thrown upward is given by $y(t)=v_0t-\frac{1}{2}gt^2$, where $g$ is the acceleration of gravity and $v_0$ is the initial vertical velocity at $t=0$. Two important physical quantities in this context are the potential energy, obtained by doing work against gravity, and the kinetic energy, arising from motion. The potential energy is defined as $P=mgy$, where $m$ is the mass of the ball. The kinetic energy is defined as $K=\frac{1}{2}mv^2$, where $v$ is the velocity of the ball, related to $y$ by $v(t)=y’(t)$.&lt;/p&gt;

&lt;p&gt;Write a program that can plot $P(t)$ and $K(t)$ in the same plot, along with their sum $E = P + K$. Let $t\in[0,2v_0/g]$. Write your program such that $m$ and $v_0$ are read from the command line. Run the program with various choices of $m$ and $v_0$ and observe that $P+K$ always remains constant in this motion, regardless of initial conditions. This is in fact, the fundamental principle of conservation of energy in Physics.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Integration by midpoint rule&lt;/strong&gt;: The idea of the Midpoint rule for integration is to divide the area under a curve $f(x)$ into $n$ equal-sized rectangles. The height of the rectangle is determined by the value of $f$ at the midpoint of the rectangle. The figure below illustrates the idea,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/8/midpnt.gif&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;To implement the midpointrule, one has to compute the area of each rectangle, sum them up, just as in the formula for the Midpoint rule,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int^b_a f(x) dx \approx h\sum^{n-1}_{i=0} f(a+ih+0.5h) ~,&lt;/script&gt;

&lt;p&gt;where $h=(b-a)/n$ is the width of each rectangle. Implement this formula as a Python function midpoint(f, a, b, n) and test the integrator with the following example input mathematical functions.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    f_1(x) &amp;= exp(x) ~,~ \text{for integration range } ~ [0, \log(3)] \\\\
    f_2(x) &amp;= cos(x) ~,~ \text{for integration range } ~ [0, \pi]     \\\\
    f_3(x) &amp;= sin(x) ~,~ \text{for integration range } ~ [0, \pi]     \\\\
    f_4(x) &amp;= sin(x) ~,~ \text{for integration range } ~ [0, \pi / 2] \\\\
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Visualize approximations in the Midpoint integration rule&lt;/strong&gt; Now consider the following function,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = x(12-x)+\sin(\pi x) ~~,~~ x\in[0,10] ~,&lt;/script&gt;

&lt;p&gt;which we wish to integrate using the midpoint integrator that you wrote in the previous example. Now write a new code that visualizes the midpoint rule, similar to in the following figure. (Hint: you will need to use the Matplotlib function &lt;code&gt;fill_between&lt;/code&gt; and use this function to create the filled areas between f(x) and the approximating rectangles)&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/8/midpoint_visualization.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/8-problems-python-array-computing-plotting&quot;&gt;Homework 8: Problems - Python array computing and plotting&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 12, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 6: Solutions - Python modules, loops, and IO]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/quiz/6-solutions-python-modules-loops-io"/>
  <id>http:/ECL2017S/quiz/6-solutions-python-modules-loops-io</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;6-problems-python-modules-loops-io&quot; target=&quot;_blank&quot;&gt;Quiz 6: Problems - Python modules, loops, and IO&lt;/a&gt;.&lt;/p&gt;

&lt;!--
The following figure illustrates the grade distribution for this quiz.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/quiz/gradeDist/gradeHistQuiz6.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Python’s modules, loops and simple I/O. Don’t forget to push your answers to your remote repository by the end of quiz time. Push your quiz-6 &lt;em&gt;readme.md&lt;/em&gt; file to quiz/6/ folder in your Github project.  If you write your answers in Python scripts, put the script files in the same folder as well. If you feel uncertain about your answer, you can test your final codes on Jupyter or IPython command lines.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Suppose you write a Python module, which you would also like to run it as a standalone Python code. If you wanted to make sure that some specific Python statements are executed only when the code is run a Python code (and not a module), you may recall from the lecture, that we had to use and if block like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    &amp;lt;Python statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Briefly explain what this if block does and mean.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Each Python module has an attribute &lt;code&gt;__name__&lt;/code&gt;. When the code is used as a Python module, the &lt;code&gt;__name__&lt;/code&gt; is set to the name of the module, otherwise it is set to &lt;code&gt;__main__&lt;/code&gt;. Therefore, this if block makes sure that the code is running as a standalone code or not.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Suppose you write a module named &lt;code&gt;myModule&lt;/code&gt;, which contains the function &lt;code&gt;myfunc&lt;/code&gt;. Now you import this module to another code.&lt;/p&gt;

&lt;p&gt;(A) Write down the import statement that would enable you to use &lt;code&gt;myfunc&lt;/code&gt; with name &lt;code&gt;f&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;(B) What would be the output of the following Python print statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import myModule as mm
print(mm.__name__)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
(A)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [27]: from math import sqrt as f

In [28]: f(4.0)
Out[28]: 2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [25]: import math as m

In [26]: print(m.__name__)
math
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Suppose there are two lists of numbers,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;even = [0,2,4,6,8]
odd = [1,3,5,7,9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a &lt;strong&gt;one-line&lt;/strong&gt; Python statement (list comprehension) that gives a list &lt;code&gt;summ&lt;/code&gt; whose elements are the sum of the respective elements in the above two lists &lt;code&gt;odd&lt;/code&gt; and &lt;code&gt;even&lt;/code&gt;, that is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [37]: summ
Out[37]: [1, 5, 9, 13, 17]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(Hint: You can use &lt;code&gt;zip&lt;/code&gt; function inside the list comprehension.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [39]: even = [0,2,4,6,8]

In [40]: odd = [1,3,5,7,9]

In [41]: summ = [i+j for i,j in zip(odd,even)]

In [42]: summ
Out[42]: [1, 5, 9, 13, 17]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the following for-loop,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
How many iterations does this for-loop perform before ending? Explain briefly why.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
This for-loop never ends! Because at each iteration, a new element is added to the end of the list. You can check if this is indeed the case by adding a print statement inside the loop,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
    print(item)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
2
4
6
8
1
3
5
7
9
2
4
6
8
10
3
5
7
9
11
4
6
8
10
12
5
7
9
11
13
6
8
10
12
14
7
9
11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the loop keeps printing forever!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/quiz/6-solutions-python-modules-loops-io&quot;&gt;Quiz 6: Solutions - Python modules, loops, and IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 6: Problems - Python modules, loops, and IO]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/quiz/6-problems-python-modules-loops-io"/>
  <id>http:/ECL2017S/quiz/6-problems-python-modules-loops-io</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims at testing your basic knowledge of Python’s modules, loops and simple I/O. Don’t forget to push your answers to your remote repository by the end of quiz time. Push your quiz-6 &lt;em&gt;readme.md&lt;/em&gt; file to quiz/6/ folder in your Github project.  If you write your answers in Python scripts, put the script files in the same folder as well. If you feel uncertain about your answer, you can test your final codes on Jupyter or IPython command lines.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Suppose you write a Python module, which you would also like to run it as a standalone Python code. If you wanted to make sure that some specific Python statements are executed only when the code is run a Python code (and not a module), you may recall from the lecture, that we had to use and if block like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    &amp;lt;Python statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Briefly explain what this if block does and mean.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Suppose you write a module named &lt;code&gt;myModule&lt;/code&gt;, which contains the function &lt;code&gt;myfunc&lt;/code&gt;. Now you import this module to another code.&lt;/p&gt;

&lt;p&gt;(A) Write down the import statement that would enable you to use &lt;code&gt;myfunc&lt;/code&gt; with name &lt;code&gt;f&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;(B) What would be the output of the following Python print statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import myModule as mm
print(mm.__name__)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Suppose there are two lists of numbers,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;even = [0,2,4,6,8]
odd = [1,3,5,7,9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a &lt;strong&gt;one-line&lt;/strong&gt; Python statement (list comprehension) that gives a list &lt;code&gt;summ&lt;/code&gt; whose elements are the sum of the respective elements in the above two lists &lt;code&gt;odd&lt;/code&gt; and &lt;code&gt;even&lt;/code&gt;, that is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [37]: summ
Out[37]: [1, 5, 9, 13, 17]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(Hint: You can use &lt;code&gt;zip&lt;/code&gt; function inside the list comprehension.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the following for-loop,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
How many iterations does this for-loop perform before ending? Explain briefly why.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/quiz/6-problems-python-modules-loops-io&quot;&gt;Quiz 6: Problems - Python modules, loops, and IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 8: Python - I/O, error handling, and tesing frameworks]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing-Copy"/>
  <id>http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing - Copy</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture further explains topics on Input/Output processes and error handling in Python, as well as methods of testing the accuracy and robustness of your code.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;io-continued&quot;&gt;I/o (continued)&lt;/h2&gt;
&lt;p&gt;So far in this course, we have indirectly discussed several methods of getting input information from the user, and several methods of outputting the result in a Python program. This lecture, attempts at formalizing all the previous discussions and introduce more general efficient methods of the code interaction with users.&lt;/p&gt;

&lt;h3 id=&quot;methods-of-inputting-data&quot;&gt;Methods of inputting data&lt;/h3&gt;
&lt;p&gt;Let’s begin with an example code, explaining the meaning of input/output (I/O) in Python,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import exp
a = 0.1
b = 1
x = 0.6
y = a*exp(b*x)
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.1822118800390509
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code, $a,b,x$ are examples of input data to a code, and $y$ is an example of code output. In such case as in the above, the input data is said to be &lt;strong&gt;hardcoded&lt;/strong&gt; in the program.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;In general, in any programming language, including Python you should always avoid hardcoding input information into your program.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    If data is hardcoded, then everytime it has to change, the user has to change the content of the code, and this is not considered good programming style for software development.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
In general, input data can be fed to a program in four different ways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;let the user answer questions in a dialog in the &lt;strong&gt;terminal window&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user provide input on the &lt;strong&gt;command line&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user provide input data in a &lt;strong&gt;file&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user write input data in a &lt;strong&gt;graphical interface&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;input-data-from-terminal-window&quot;&gt;Input data from terminal window&lt;/h4&gt;
&lt;p&gt;We have already introduced and used this method frequently in previous lectures, via the Python’s builtin function &lt;code&gt;input()&lt;/code&gt;. If we were to get the input data for the above example code via the terminal window, an example would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import exp
a,b,x = input('input the values for a,b,x (comma separated): ').split(&quot;,&quot;)
y = float(a)*exp(float(b)*float(x))
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input the values for a,b,x (comma separated): 0.1,1,0.6
0.1822118800390509
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;input-data-from-command-line&quot;&gt;Input data from command line&lt;/h4&gt;

&lt;p&gt;This approach, which we discussed in previous lecture, is most popular in Unix-like environments, where most users are accustomed to using Bash command line. However, it can be readily used in Windows environment as well. For this approach, there is a Python module &lt;code&gt;sys&lt;/code&gt; that can accomplish what we desire,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import exp
import sys
a,b,x = sys.argv[1],sys.argv[2],sys.argv[3]
y = float(a)*exp(float(b)*float(x))
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now if you save this code in a &lt;a href=&quot;http:/ECL2017S/lecture/8/input_via_sys.py&quot; target=&quot;_blank&quot;&gt;file&lt;/a&gt;, and run it on the Bash command line, the program expects you the enter 3 float numbers following the name of the program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python input_via_sys.py 0.1 1 0.6
0.1822118800390509
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;ATTENTION: Notice the convention for command-line arguements&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    
    &lt;b&gt;1.&lt;/b&gt; As you see in the above example, the name of the program is considered as the first command line argument (&lt;code&gt;sys.argv[0]&lt;/code&gt;). Also the arguments must be separated by a white space, and should appear in the proper order.&lt;br /&gt;&lt;br /&gt;
    
    &lt;b&gt;2.&lt;/b&gt; If one value has a white space (e.g., a string value with white space character in it), then it has to be contained in quotation marks &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;&quot;&quot;&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;
    
    &lt;b&gt;3.&lt;/b&gt; Also note that all input command-line arguments are taken as string values. Therefore, you will have to convert them to the proper type (e.g., float, int, ...) once they are read from the command line.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;variable-number-of-command-line-arguments&quot;&gt;Variable number of command line arguments&lt;/h5&gt;
&lt;p&gt;If the number of input arguments on the command line is not known a priori, then you can get a list of all input arguments using &lt;code&gt;sys.argv[1:]&lt;/code&gt; and then use a for-loop to loop over individual elements of it, or use &lt;code&gt;len()&lt;/code&gt; function to find the total number of input arguments.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;option-value-pairs-as-command-line-input&quot;&gt;Option-value pairs as command-line input&lt;/h5&gt;
&lt;p&gt;Once the number of input arguments to your code increases, the process of inputting data as command line arguments can get complicated. Ideally, the user should be able to enter data in any arbitrary order. This can be done by indicating the meaning of each input by a flag before the input value. For example, suppose you were to find the location $y(t)$ of an object thrown up in the air vertically, given that the object started at $y=y_0$, at $t=0$ with an initial velocity $v_0$, and thereafter was subject to a constant acceleration $a$,
&lt;script type=&quot;math/tex&quot;&gt;y(t) = y_0 + v_0t + \frac{1}{2}at^2 ~.&lt;/script&gt;
Obviously, this formula requires four input variables: $y_0$, $v_0$, $a$, and $t$, and we don’t the program user to memorize their order of entry on the command line. The solution is to identify the type of each input using a flag preceding the input value. This can be done using &lt;code&gt;argparse&lt;/code&gt; Python module. Deatails of the usage of this module goes beyond the limited time of our class. However, I recommend you to have a look at the &lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot; target=&quot;_blank&quot;&gt;syntax and usage of &lt;em&gt;argparse&lt;/em&gt; module&lt;/a&gt;, as you will find it very handy in your Python codes, projects, and software development.&lt;/p&gt;

&lt;h4 id=&quot;input-data-from-file&quot;&gt;Input data from file&lt;/h4&gt;
&lt;p&gt;In cases where the input data is large, the command-line arguments and input from terminal window are not efficient anymore. In such cases, the most common approach is to let the code read input data from a file, the path to which is most often given to the code from the command line or the terminal window.&lt;/p&gt;

&lt;h5 id=&quot;reading-a-file-line-by-line&quot;&gt;Reading a file line by line&lt;/h5&gt;
&lt;p&gt;To read a file, say &lt;a href=&quot;http:/ECL2017S/lecture/8/data.in&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;, one first needs to open it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: myfile = open('data.in', 'r')

In [2]: type(myfile)
Out[2]: _io.TextIOWrapper

In [5]: myfile.
     myfile.buffer         myfile.detach         myfile.fileno         myfile.line_buffering myfile.newlines       myfile.readline       myfile.seekable       myfile.writable
     myfile.close          myfile.encoding       myfile.flush          myfile.mode           myfile.read           myfile.readlines      myfile.tell           myfile.write
     myfile.closed         myfile.errors         myfile.isatty         myfile.name           myfile.readable       myfile.seek           myfile.truncate       myfile.writelines

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The function &lt;code&gt;open&lt;/code&gt; creates a file object, stored in the variable myfile. The second input argument to &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;'r'&lt;/code&gt; tells the function that the purpose of this file opening is to read data (as opposed to, for example, writing data, or both reading and writing).&lt;/p&gt;

&lt;p&gt;Now you can use a for loop to read the data in this file line by line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;for line in myfile:
    print(line)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is printed here, is actually the content of &lt;code&gt;data.in&lt;/code&gt; file, line by line.&lt;/p&gt;

&lt;h5 id=&quot;alternative-method-of-reading-file-data&quot;&gt;Alternative method of reading file data&lt;/h5&gt;
&lt;p&gt;Instead of reading one line at a time, as in the above, we can load all lines into a single list of strings,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [9]: myfile = open('data.in', 'r')
In [10]: lines = myfile.readlines()

In [11]: type(lines)
Out[11]: list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that each element of &lt;code&gt;line&lt;/code&gt; contains one line of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [15]: lines
Out[15]: ['1\n', '3\n', '4\n', '5\n', '6\n', '7\n', '88\n', '65\n']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The action of the method &lt;code&gt;readlines()&lt;/code&gt; is equivalent to a for-loop like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: myfile = open('data.in', 'r')
    ...: lines = []
    ...: for line in myfile:
    ...:     lines.append(line)
    ...: lines
    ...:
Out[16]: ['1\n', '3\n', '4\n', '5\n', '6\n', '7\n', '88\n', '65\n']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or this &lt;em&gt;list comprehension&lt;/em&gt; format,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [19]: myfile = open('data.in', 'r')
    ...: lines = [line for line in myfile]
    ...: lines
    ...:
Out[19]: ['1\n', '3\n', '4\n', '5\n', '6\n', '7\n', '88\n', '65\n']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose you were to calculate the mean of the numbers in &lt;a href=&quot;http:/ECL2017S/lecture/8/data.in&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;. You could simply use the following list comprehension code to do so,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [22]: mean = sum([float(line) for line in lines])/len(lines)
    ...: print(mean)
22.375
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that once you read the file, you can close it using,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;myfile.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-with-statement&quot;&gt;The &lt;em&gt;with&lt;/em&gt; statement&lt;/h5&gt;
&lt;p&gt;More often in modern Python code you may see the &lt;code&gt;with&lt;/code&gt; statement for reading a file, like the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [34]: with open('data.in', 'r') as myfile:
    ...:     for line in myfile:
    ...:         print(line)
    ...:
1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This is technically equivalent to,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [35]: myfile = open('data.in', 'r')
    ...: for line in myfile:
    ...:     print(line)
    ...: myfile.close()
    ...:
1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The difference here is that with the modern &lt;code&gt;with&lt;/code&gt; statement, there is no need to close the file in the end.&lt;/p&gt;

&lt;h5 id=&quot;the-old-while-true-construction&quot;&gt;The old &lt;em&gt;while True&lt;/em&gt; construction&lt;/h5&gt;
&lt;p&gt;The call &lt;code&gt;myfile.readline()&lt;/code&gt; returns a string containing the text at the current line. A new &lt;code&gt;myfile.readline()&lt;/code&gt; statement will read the next line. If the file reaches the end, then &lt;code&gt;myfile.readline()&lt;/code&gt; returns an empty string, the end of the file has
reached and the code must stop further reading of the file. The traditional way of telling the code to stop at the end of the file is a &lt;code&gt;while&lt;/code&gt; loop like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [36]: myfile = open('data.in', 'r')
    ...: while True:
    ...:     line = myfile.readline()
    ...:     if not line:
    ...:         break
    ...:     print(line)
1

3

4

5

6

7

88

65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;reading-an-entire-file-as-a-single-string&quot;&gt;Reading an entire file as a single string&lt;/h5&gt;
&lt;p&gt;While the &lt;code&gt;readlines()&lt;/code&gt; method returns a list of lines in the file, the &lt;code&gt;read()&lt;/code&gt; method returns a string containing the entire content of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
In [37]: myfile = open('data.in', 'r')
    ...: s = myfile.read()

In [38]: s
Out[38]: '1\n3\n4\n5\n6\n7\n88\n65\n'

In [39]: print(s)
1
3
4
5
6
7
88
65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The major advanatge of this method of reading file content is that you can then immediately apply string methods directly on the file content.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [48]: myfile = open('data.in', 'r')
    ...: numbers = [float(x) for x in myfile.read().split()]
    ...: mean = sum(numbers)/len(numbers)
    ...:

In [49]: print(mean)
22.375
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;converting-user-input-to-live-python-objects&quot;&gt;Converting user input to live Python objects&lt;/h3&gt;
&lt;p&gt;One of the cool features in Python I/O is that you can provide text containing valid Python code as input to a program and then
turn that text into &lt;em&gt;live Python objects&lt;/em&gt; as if the text were lines of code written directly into the program beforehand. This is a very powerful tool for letting users specify function formulas, for instance, as input to a program. The program code itself has no knowledge about the kind of function the user wants to work with, yet at run time the user’s desired
formula enters the computations. To achieve the goal, one can use Python’s &lt;strong&gt;magic functions&lt;/strong&gt;, a.k.a &lt;strong&gt;special methods&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-magic-eval-function&quot;&gt;The magic &lt;em&gt;eval&lt;/em&gt; function&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;eval&lt;/code&gt; function takes a &lt;strong&gt;string as argument&lt;/strong&gt; and &lt;strong&gt;evaluates&lt;/strong&gt; this string as a &lt;strong&gt;Python expression&lt;/strong&gt;. The result of an expression is an &lt;strong&gt;object&lt;/strong&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [10]: eval('1+2')
Out[10]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This is equivalent to typing,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: 1+2
Out[11]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or another example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [12]: a = 1

In [13]: b = 2

In [14]: c = eval('a+b')

In [15]: c
Out[15]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [19]: from math import sqrt

In [20]: eval('sqrt(4)')
Out[20]: 2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But, note that in all of the above examples, the &lt;code&gt;eval&lt;/code&gt; function &lt;strong&gt;evaluates&lt;/strong&gt; a Python expression, that is, this function &lt;strong&gt;cannot execute&lt;/strong&gt; a Python statement.&lt;/p&gt;

&lt;p&gt;Now the cool thing about this function is that, you can directly apply it to the user input. For example, suppose the user is asked to input a Python expression and then the code is supposed to evaluate the input just like a simple calculator,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;eval(input('Input an arithmetic expression to evaluate: '))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Input an arithmetic expression to evaluate: 2 + 3.0/5 + exp(7)
1099.2331584284584
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;the-magic-exec-function&quot;&gt;The magic &lt;em&gt;exec&lt;/em&gt; function&lt;/h4&gt;
&lt;p&gt;Similar to the &lt;code&gt;eval&lt;/code&gt; function, there is also an &lt;code&gt;exec&lt;/code&gt; magic function that executes a string containing an arbitrary
Python code, not just a Python expression. This is a powerful idea since it now enables the user to write a formula as input to the program, available to the program in the form of a string object. The program can then convert this formula to a callable Python code, or function, using the magic &lt;code&gt;exec&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [21]: exec('import math')

In [22]: exec('a=1; b=2; c=a+b')

In [23]: a,b,c
Out[23]: (1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One could even input a full function definition to the exec function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;myFuncString = input('Input a Python function definition of interest: ')
f = exec(myFuncString)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Input a Python function definition of interest, named func: def func(x): return 2*x + 1  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;func(x=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, since this is such a useful functionality in Python, there is already a package written &lt;code&gt;scitools&lt;/code&gt;, that converts an input expression to a Python function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from scitools.StringFunction import StringFunction
myfuncString = input('Input a Python expression to build your requested Python function: ')
myfunc = StringFunction(myfuncString)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The only major caveat with this module is that, at the moment, it only works with Python 2.x, and not Python 3. So, the above code will not work on your Python 3 platform.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;methods-of-outputting-data&quot;&gt;Methods of outputting data&lt;/h3&gt;
&lt;p&gt;Two major methods of data output are,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;writing to the terminal window, as previdously done using &lt;code&gt;print()&lt;/code&gt; function, or,&lt;/li&gt;
  &lt;li&gt;writing to an output file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have already extensively discussed printing output to the terminal window. Writing data to file is also easy.&lt;/p&gt;

&lt;h4 id=&quot;writing-to-a-file&quot;&gt;Writing to a file&lt;/h4&gt;
&lt;p&gt;Similar to reading from a file, in order to write to a file, one has to first open the file, this time for the purpose of writing, which is indicated by &lt;code&gt;'w'&lt;/code&gt; or &lt;code&gt;'a'&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;outfile = open(filename, 'w') # write to a new file, or overwrite file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One could also &lt;strong&gt;append&lt;/strong&gt; some output to an &lt;strong&gt;existing file&lt;/strong&gt; using the &lt;code&gt;'a'&lt;/code&gt; indicator as input to &lt;code&gt;open()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;outfile = open(filename, 'a') # append to the end of an existing file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In both cases, the string valued variable &lt;code&gt;filename&lt;/code&gt; contains the path to the file that should be created or manipulated. Suppose we want to write the output of the above code in previous section to a new file. All you would need to do is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;myfile = open('data.in', 'r')
numbers = [float(x) for x in myfile.read().split()]
mean = sum(numbers)/len(numbers)
outfile = open('data.out','w')
outfile.write(str(mean) + '\n')
myfile.close()
outfile.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will result in the creation of &lt;a href=&quot;http:/ECL2017S/lecture/8/data.out&quot; target=&quot;_blank&quot;&gt;a new file&lt;/a&gt; named &lt;code&gt;data.out&lt;/code&gt; which contains the value of &lt;code&gt;mean&lt;/code&gt; variable. Note that the addition of the character &lt;code&gt;'\n'&lt;/code&gt; at the end of the &lt;code&gt;write&lt;/code&gt; statement is necessary, otherwise the next write to the file will not appear on a new line.&lt;/p&gt;

&lt;h5 id=&quot;writing-a-table-of-data-to-a-file&quot;&gt;Writing a table of data to a file&lt;/h5&gt;
&lt;p&gt;Now suppose you were to write the following list to an output file,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data = [[ 0.75, 0.29619813, -0.29619813, -0.75 ],
[ 0.29619813, 0.11697778, -0.11697778, -0.29619813],
[-0.29619813, -0.11697778, 0.11697778, 0.29619813],
[-0.75, -0.29619813, 0.29619813, 0.75 ]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One solution would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;outfile = open('table.out', 'w')
for row in data:
    for column in row:
        outfile.write( '{:14.8f}'.format(column) )
    outfile.write('\n')
outfile.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This code would result in the creation of an &lt;a href=&quot;http:/ECL2017S/lecture/8/table.out&quot; target=&quot;_blank&quot;&gt;output file&lt;/a&gt; named &lt;code&gt;table.out&lt;/code&gt; which contain the content of &lt;code&gt;data&lt;/code&gt; variable, in a nice formatted style as the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;    0.75000000    0.29619813   -0.29619813   -0.75000000
    0.29619813    0.11697778   -0.11697778   -0.29619813
   -0.29619813   -0.11697778    0.11697778    0.29619813
   -0.75000000   -0.29619813    0.29619813    0.75000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;error-handling-in-python&quot;&gt;Error handling in Python&lt;/h2&gt;
&lt;p&gt;A good code has to be able to handle exceptional situations that may occur during the code execution. These exceptions may occur during data input from either command line, terminal window, or an input file. They may also occur as a result of repeated operations on the input data, inside the code. For example, in &lt;a href=&quot;http:/ECL2017S/lecture/7-python-modules-loops-io#command-line-arguments&quot; target=&quot;_blank&quot;&gt;lecture 7&lt;/a&gt;, we explained a way of handling the wrong number of input command line arguments. This and similar measures to handle nicely the unexpected runtime errors is what’s called &lt;strong&gt;error and exception handling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A simple way of error handling is to write multiple if-blocks each of which handle a special exceptional situation. That is, to let the code execute some statements, and if something goes wrong, write the program in such a way that can detect this and jump to a set of statements that handle the erroneous situation as desired.&lt;/p&gt;

&lt;p&gt;A more modern and flexible way of handling such potential errors in Python is through the following Python construction,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;try:
    &amp;lt;Python statements&amp;gt;
except &amp;lt;error type&amp;gt;:
    &amp;lt;Python statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, if we were to rewrite the command line argument section in &lt;a href=&quot;http:/ECL2017S/lecture/7/cmd_find_primes.py&quot; target=&quot;_blank&quot;&gt;this code&lt;/a&gt; in &lt;a href=&quot;http:/ECL2017S/lecture/7-python-modules-loops-io#command-line-arguments&quot; target=&quot;_blank&quot;&gt;lecture 7&lt;/a&gt;, to handle exceptions that arise due to &lt;code&gt;ValueError&lt;/code&gt; (e.g., not an integer input), it would look something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        try:
            n = int(sys.argv[1])
            print('Here is a list of all prime numbers smaller than {}:'.format(n))
            get_primes(n)
        except ValueError:
            print('The input you entered is not an integer!\n Try again...')
            sys.exit(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The statement &lt;code&gt;sys.exit(1)&lt;/code&gt; aborts the program. The whole code can be found &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_modern.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Now if we run the &lt;a href=&quot;http:/ECL2017S/lecture/7/cmd_find_primes.py&quot; target=&quot;_blank&quot;&gt;original code&lt;/a&gt; with a non-integer input, we would get the following Python error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ../7/cmd_find_primes.py amir
Traceback (most recent call last):
  File &quot;../7/cmd_find_primes.py&quot;, line 34, in &amp;lt;module&amp;gt;
    n = int(sys.argv[1])
ValueError: invalid literal for int() with base 10: 'amir'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
whereas, if we run the &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_modern.py&quot; target=&quot;_blank&quot;&gt;newly written code&lt;/a&gt;, the non-integer error is noicely handled by outputting a gentle error message to the user and exiting the program gracefully.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cmd_find_primes_modern.py amir
The input you entered is not an integer!
 Try again...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The type of error ocurring in the above example was &lt;code&gt;ValueError&lt;/code&gt;. There can be however, many other types of errors and exceptions. For this reason, Python has a &lt;a href=&quot;https://docs.python.org/2/library/exceptions.html&quot; target=&quot;_blank&quot;&gt;builtin list of exceptions&lt;/a&gt; that frequently occur in programming.&lt;/p&gt;

&lt;h3 id=&quot;the-raise-statement&quot;&gt;The &lt;em&gt;raise&lt;/em&gt; statement&lt;/h3&gt;
&lt;p&gt;Instead of the print statement in the above &lt;code&gt;except&lt;/code&gt; block, Python has a builtin function to handle the error together with an input message from the programmer. For example, the previous code, could be modified to the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        try:
            n = int(sys.argv[1])
            print('Here is a list of all prime numbers smaller than {}:'.format(n))
            get_primes(n)
        except ValueError:
            raise ValueError('The input you entered is not an integer!\n Try again...')
            sys.exit(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Executing the &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_raise.py&quot; target=&quot;_blank&quot;&gt;code&lt;/a&gt; with wrong input would give,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cmd_find_primes_raise.py amir
Traceback (most recent call last):
  File &quot;./cmd_find_primes_raise.py&quot;, line 35, in &amp;lt;module&amp;gt;
    n = int(sys.argv[1])
ValueError: invalid literal for int() with base 10: 'amir'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;./cmd_find_primes_raise.py&quot;, line 39, in &amp;lt;module&amp;gt;
    raise ValueError('The input you entered is not an integer!\n Try again...')
ValueError: The input you entered is not an integer!
 Try again...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A more elegant and cleaner way of handling and outputing the error would be use the following syntax, in &lt;a href=&quot;http:/ECL2017S/lecture/8/cmd_find_primes_raise_as_err.py&quot; target=&quot;_blank&quot;&gt;this modified code&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        try:
            n = int(sys.argv[1])
            print('Here is a list of all prime numbers smaller than {}:'.format(n))
            get_primes(n)
        except ValueError as err:
            print(err)
            sys.exit(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
With the following output,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./cmd_find_primes_raise_as_err.py amir
invalid literal for int() with base 10: 'amir'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In the statement &lt;code&gt;except ValueError as err:&lt;/code&gt; one could use &lt;code&gt;Exception&lt;/code&gt; for all types of errors instead of only &lt;code&gt;ValueError&lt;/code&gt; exceptions, or use a tuple syntax such as &lt;code&gt;except (ValueError, IndexError) as err:&lt;/code&gt; to cover these two exceptions.&lt;/p&gt;

&lt;h2 id=&quot;code-verification-and-unit-testing&quot;&gt;Code verification and unit testing&lt;/h2&gt;
&lt;p&gt;In the previous lecture we discussed the process of creating modules and collecting functions in one file as a personal module to be used later. As soon as the list of your codes and functions grow, you will need to have a unified way of ensuring all your functions work appropriately, regardless of the potential future internal changes that are made to the functions. This is what the &lt;strong&gt;unit testing&lt;/strong&gt; exists for. Unit testing is a software development process in which the smallest testable parts of an application, called &lt;strong&gt;units&lt;/strong&gt;, are individually and independently scrutinized for proper operation. Unit testing can be done manually, but if you have a long list of functions (which you most often have), you’d want to automate the testing process.&lt;/p&gt;

&lt;p&gt;The grand goal in unit testing is to reduce the risk of encountering potential problems when running the code in the smallest possible units of the code. This means,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ensuring the code has the &lt;strong&gt;correct behavior&lt;/strong&gt; when given the proper input data.&lt;/li&gt;
  &lt;li&gt;ensuring the &lt;strong&gt;code robustness&lt;/strong&gt; to exceptions and invalid input data, meaning that it does not crash when it reaches unexpected situations during the code execution and gracefully handles the error, without interruption.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because of the goals for which the unit tests are desgined, they are mosly written and used by the developers of the code.&lt;/p&gt;

&lt;h3 id=&quot;unit-test-frameworks&quot;&gt;Unit test frameworks&lt;/h3&gt;
&lt;p&gt;There are many ways to write tests for codes. Now, if you asked each software developer to write a unit test for a specific software, each would likely come up with their own set of rules and tests of the software. You will end up with many tests, that will generally only be usable by the developer that wrote the tests. That is why you should select a unit test framework. A unit test framework provides consistency for how the unit tests for your project are written. There are many test frameworks to choose from for just about any language you want to program with, including Python. Just like programming language, almost every programmer has a strong opinion which test framework is the best. Research what’s out there and use the one that meets the needs of your organization (For example, there is one experienced Python programmer in our ECL class who does not like any of the existing unit tests for Python, and wants to write his own unit test as the project of this course!).&lt;/p&gt;

&lt;p&gt;The framework will provide a consistent testing structure to create maintainable tests with reproducible results. From a product quality and business point of view, those are the most valuable reasons to use a unit test framework. When you write a code, you should also think of a quick and simple way to develop and verify your logic in isolation. Once you make sure you have it working solidly by itself, then you can proceed to integrate it into the larger project solutions with great confidence.&lt;/p&gt;

&lt;p&gt;Python offers three unit testing frameworks,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;unittest&lt;/strong&gt;&lt;/a&gt; (Python’s standard unit testing framework)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nose.readthedocs.io/en/latest/index.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;nose&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.pytest.org/en/latest/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;pytest&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;which automate as much as possible the process of testing all of your codes, whenever required. The last, &lt;code&gt;pytest&lt;/code&gt; appears to be the most popular unit testing framework as of today.&lt;/p&gt;

&lt;h4 id=&quot;conventions-for-test-functions&quot;&gt;Conventions for test functions&lt;/h4&gt;
&lt;p&gt;The simplest way of using the testing frameworks (e.g., pytest or nose) is to write a set of test functions, scattered around in files, such that pytest or nose can automatically find and run all of these test functions. To achieve the goal, the test functions need to follow certain conventions:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The name of a test function starts with &lt;code&gt;test_&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A test function cannot take any arguments.&lt;/li&gt;
  &lt;li&gt;Any test must be formulated as a boolean condition.&lt;/li&gt;
  &lt;li&gt;An &lt;code&gt;AssertionError&lt;/code&gt; exception is raised if the boolean condition is &lt;code&gt;False&lt;/code&gt; (i.e., when the test fails).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;testing-function-accuracy&quot;&gt;Testing function accuracy&lt;/h4&gt;
&lt;p&gt;Suppose we have written the following function which runs the Newton’s method for solving an algebraic equation of the form $f(x)=0$, and we would like to write a test function that ensures its correct behavior.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def newton(f, dfdx, x, eps=1E-7):
    n = 0 # iteration counter
    while abs(f(x)) &amp;gt; eps:
        x = x - f(x)/dfdx(x)
        n += 1
    return x, f(x), n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Our goal is to write a function that tests the validity of the output of the function for a special case for which we know the results a priori. In the case of the above code, the function output is a not a fixed result, but an approximate float number $x_0$ which satifies the condition $f(x_0)&amp;lt;\epsilon$ where $\epsilon$ is a prescribed number close to zero. Therefore, we have to first come up with a mathematical test input function to the function &lt;code&gt;newton&lt;/code&gt;, for which we have calculated the correct answer a priori, and we want to make sure if the above code gives the same answer. Since the output of the function &lt;code&gt;newton&lt;/code&gt; is a float that depends on the machine precision, we cannot expect the function to output the exact same result everytime the code is run on any computer. Therefore we have to define our test such that the function passes the test even if the result is not exactly what we expect, but still close enought to the correct answer. Here is an example test function for the above code using the &lt;code&gt;sin(x)&lt;/code&gt; function as the test input function to &lt;code&gt;newton()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def test_newton_sin():
    
    from math import sin, cos, pi

    def f(x):
        return sin(x)
    
    def dfdx(x):
        return cos(x)
    
    x_ref = 0.000769691024206
    f_x_ref = 0.000769690948209
    n_ref = 3
    x, f_x, n = newton(f, dfdx, x=-pi/3, eps=1E-2)
    tol = 1E-15 # tolerance for comparing real numbers
    assert abs(x_ref - x) &amp;lt; tol , &quot;The test for the value of x_0 failed&quot; # is x correct?
    assert abs(f_x_ref - f_x) &amp;lt; tol , &quot;The test for the function value failed&quot; # is f_x correct?
    assert n == 3 , &quot;The test for the number of iterations failed&quot; # is f_x correct? # is n correct?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that in the above test function, the function name begins with &lt;code&gt;test_&lt;/code&gt;, takes no arguments, and raises an &lt;code&gt;assertionError&lt;/code&gt; at the end. Now if you run the test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;test_newton_sin()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
you will notice that the function passed the test. However, if in the above test, we set &lt;code&gt;eps=1E-10&lt;/code&gt;, and run the test again, you will get an assertion error like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&amp;lt;ipython-input-20-8be9faac8d8e&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 test_newton_sin()

&amp;lt;ipython-input-18-263651ba410f&amp;gt; in test_newton_sin()
     14     x, f_x, n = newton(f, dfdx, x=-pi/3, eps=1E-10)
     15     tol = 1E-15 # tolerance for comparing real numbers
---&amp;gt; 16     assert abs(x_ref - x) &amp;lt; tol , &quot;The test for the value of x_0 failed&quot; # is x correct?
     17     assert abs(f_x_ref - f_x) &amp;lt; tol , &quot;The test for the function value failed&quot; # is f_x correct?
     18     assert n == 3 , &quot;The test for the number of iterations failed&quot; # is f_x correct? # is n correct?

AssertionError: The test for the value of x_0 failed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One could also write exact tests for the function &lt;code&gt;newton&lt;/code&gt; which test for an exact result which is known a priori, for example a mathematical linear input function to &lt;code&gt;newton&lt;/code&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;testing-function-robustness&quot;&gt;Testing function robustness&lt;/h4&gt;
&lt;p&gt;The above &lt;code&gt;newton&lt;/code&gt; function is very basic and suffers from several problems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;for divergent iterations it will iterate forever,&lt;/li&gt;
  &lt;li&gt;it can divide by zero in f(x)/dfdx(x),&lt;/li&gt;
  &lt;li&gt;it can perform integer division in f(x)/dfdx(x),&lt;/li&gt;
  &lt;li&gt;it does not test whether the arguments have acceptable types and values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A more robust implementation dealing with these potential problems would look like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def Newton(f, dfdx, x, eps=1E-7, maxit=100):
    if not callable(f): raise TypeError( 'f is %s, should be function or class with __call__' % type(f) )
    if not callable(dfdx): raise TypeError( 'dfdx is %s, should be function or class with __call__' % type(dfdx) )
    if not isinstance(maxit, int): raise TypeError( 'maxit is %s, must be int' % type(maxit) )
    if maxit &amp;lt;= 0: raise ValueError( 'maxit=%d &amp;lt;= 0, must be &amp;gt; 0' % maxit )
    n = 0 # iteration counter
    while abs(f(x)) &amp;gt; eps and n &amp;lt; maxit:
        try:
            x = x - f(x)/float(dfdx(x))
        except ZeroDivisionError:
            raise ZeroDivisionError( 'dfdx(%g)=%g - cannot divide by zero' % (x, dfdx(x)) )
        n += 1
    return x, f(x), n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, for this more robust code (than the earlier version: &lt;code&gt;newton&lt;/code&gt;), we have to also write a set of tests, examining the robustenss of the code, subject to potential exceptions. For example, one can write a test function that examines the behavior of &lt;code&gt;Newton&lt;/code&gt; subject to an input mathematical function that is known to lead to divergent (infinite) iterations, if the initial starting point $x$ is not sufficiently close to the root of the function. One such example is $f(x)=tanh(x)$, for which a starting search value of $x=20$ would lead to infinite iterations in the Newton’s method. So we can set &lt;code&gt;maxit=12&lt;/code&gt; in our robust &lt;code&gt;Newton&lt;/code&gt; code, and test that the actual number of iterations reaches this limit. Given our prior knowledge for this function, that the value of $x$ will also diverge after 12 iterations, we could also add a test for the value of $x$, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def test_Newton_divergence():
    from math import tanh
    f = tanh
    dfdx = lambda x: 10./(1 + x**2)
    
    x, f_x, n = Newton(f, dfdx, 20, eps=1E-4, maxit=12)
    assert n == 12
    assert x &amp;gt; 1E+50
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;test_Newton_divergence()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The example given here, only tests for the robustenss of &lt;code&gt;Newton()&lt;/code&gt; in handling divergent situations. For other potential problems, one has to write other test functions, some which will be given as exercise.&lt;/p&gt;

&lt;h3 id=&quot;summary-unit-testing&quot;&gt;Summary: unit testing&lt;/h3&gt;
&lt;p&gt;Unit testing is a component of &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot; target=&quot;_blank&quot;&gt;test-driven development (TDD)&lt;/a&gt;, a pragmatic methodology that takes a meticulous approach to building a product by means of &lt;em&gt;continual testing and revision&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Unit testing has a steep learning curve. The development team needs to learn what unit testing is, how to unit test, what to unit test and how to use automated software tools to facilitate the process on an on-going basis.  The great benefit to unit testing is that the earlier a problem is identified, the fewer compound errors occur. A compound error is one that doesn’t seem to break anything at first, but eventually conflicts with something down the line and results in a problem.&lt;/p&gt;

&lt;p&gt;There is a lot more to unit testing and the existing Python frameworks for it than we discussed here. However, covering all those topics would require a dedicated course for unit testing, which is certainly beyond the capacity of this course. But if you are interested to know more, I recommend you to refer to one of the three unit testing frameworks mentioned &lt;a href=&quot;#unit-test-frameworks&quot;&gt;above&lt;/a&gt;. There are also books already written on this topic an example of which is available &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000000754/pr01.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing-Copy&quot;&gt;Lecture 8: Python - I/O, error handling, and tesing frameworks&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 7: Problems - Python I/O, error handling, and unit testing]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/7-problems-python-IO-error-handling-unit-testing"/>
  <id>http:/ECL2017S/homework/7-problems-python-IO-error-handling-unit-testing</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This homework aims at giving you some experience with Python I/O, error handling in your code, and testing you code for accuracy and robustness.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Write a simple program named &lt;code&gt;sum.py&lt;/code&gt;, that takes in an arbitrary-size list of input floats from the command-line, and prints out the sum of them on the terminal with the following message,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python sum.py 1 2 1 23
The sum of 1 2 1 23 is 27.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that you will need to use the Python’s builtin function &lt;code&gt;sum()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Similar to the previous probelm, write a simple program named &lt;code&gt;sum_via_eval.py&lt;/code&gt;, that takes in an arbitrary-size list of input numbers from the command-line, and prints out the sum of them on the terminal, this time using Python’s &lt;code&gt;eval&lt;/code&gt; function. The program output should look like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python sum.py 1 2 1 23
The sum of 1 2 1 23 is 27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider &lt;a href=&quot;http:/ECL2017S/homework/7/1A2T_A.dssp&quot; target=&quot;_blank&quot;&gt;this data file&lt;/a&gt;. It contains information about the amino acids in &lt;a href=&quot;http://www.rcsb.org/pdb/explore.do?structureId=1a2t&quot; target=&quot;_blank&quot;&gt;a protein&lt;/a&gt; called &lt;code&gt;1A2T&lt;/code&gt;. Each amino acid in protein is labeled by a single letter. There are 20 amin acid molecules in nature, and each has a total surface area (in units of Angstroms squared) that is given by the following table,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'A': 129.0
'R': 274.0
'N': 195.0
'D': 193.0
'C': 167.0
'Q': 225.0
'E': 223.0
'G': 104.0
'H': 224.0
'I': 197.0
'L': 201.0
'K': 236.0
'M': 224.0
'F': 240.0
'P': 159.0
'S': 155.0
'T': 172.0
'W': 285.0
'Y': 263.0
'V': 174.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, when these amino acids sit next to each other to form a chain protein, they cover parts of each other, such that only parts of their surfaces is exposed, while the rest is hidden from the outside world by other neighboring amino acids. Therefore, one would expect an amino acid that is at the core of a spherical protein would have almost zero exposed surface area.&lt;/p&gt;

&lt;p&gt;Now given the above information, write a Python program that takes in two command-line input arguments, one of which is a string containing the path to the above &lt;a href=&quot;http:/ECL2017S/homework/7/1A2T_A.dssp&quot; target=&quot;_blank&quot;&gt;input file&lt;/a&gt; &lt;code&gt;1A2T_A.dssp&lt;/code&gt; which contains the partially exposed surface areas of amino acids in protein &lt;code&gt;1A2T&lt;/code&gt; for each of its amino acids, and a second command-line argument which is the path to the file containing output of the code (e.g., it could be &lt;code&gt;./readDSSP.out&lt;/code&gt;). Then,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;the code reads the content of this file, and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;extracts the names of the amino acids in this protein from the data column inside the file which has the header &lt;code&gt;AA&lt;/code&gt; (look at the line number 25 inside the input data file, below &lt;code&gt;AA&lt;/code&gt; is the column containing the one-letter names of amino acids in this protein), and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;also extracts the partially exposed surface area information for each of these amino acids which appear in the column with header &lt;code&gt;ACC&lt;/code&gt;, and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;then uses the above table of maximum surface area values to calculate the fractional exposed surface area of each amino acid in this protein (i.e., for each amino acid, fraction_of_exposed_surface = ACC / maximum_surface_area_from_table), and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;finally for each amino acid in this protein, it prints the one-letter name of the amino acid, its corresponding partially exposed surface area (ACC from the input file), and its corresponding fractional exposed surface area (name it RSA) to the output file given by the user on the command line.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;On the first column of the output file, the code should also write the name of the protein (which is basically the name of the input file &lt;code&gt;1A2T_A&lt;/code&gt;) on each line of the output file. &lt;strong&gt;Note that your code should extract the protein name from the input filename&lt;/strong&gt; (by removing the file extension and other unnecessary information from the input command line string). &lt;a href=&quot;http:/ECL2017S/homework/7/readDSSP.out&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is an example output of the code.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Your code should also be able to handle an error resulting from less or more than 2 input command line arguments. That is, if the number of input arguments is 3 or 1, then it should input the following message on screen and stop.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./readDSSP.py ./1A2T_A.dssp


Usage:
      ./readDSSP.py &amp;lt;input dssp file&amp;gt; &amp;lt;output summary file&amp;gt;

Program aborted.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./readDSSP.py ./1A2T_A.dssp ./readDSSP.out amir


Usage:
      ./readDSSP.py &amp;lt;input dssp file&amp;gt; &amp;lt;output summary file&amp;gt;

Program aborted.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To achieve the above goal, you will have to create a dictionary from the above table, with amino acid names as the keys, and the maximum surface areas as the corresponding values. Name your code &lt;code&gt;readDSSP.py&lt;/code&gt; and submit it to your repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write your code in such a way that it checks for the existence of the output file&lt;/strong&gt;. If it already exists, then it does not remove the content of the file, whereas, it appends new data to the existing file. therwise, if the file does not exist, then it creates a new output file as requested by the user. To do so, you will need to use &lt;code&gt;os.path.isfile&lt;/code&gt; function from module &lt;code&gt;os&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;: Note that in some rows instead of a one-letter amino acid name, there is &lt;code&gt;!&lt;/code&gt;. In such cases, your code should be able to detect the abnormality and skip that row, because that row does not contain amino acid information.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the simplest program for evaluating the formula $y(t) = v_0t-\frac{1}{2}gt^2$,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v0 = 3; g = 9.81; t = 0.6
y = v0*t - 0.5*g*t**2
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(A) Write a program that takes in the above necessary input data ($t$,$v_0$) as command line arguments.&lt;br /&gt;
&lt;br /&gt;
(B) Extend your program from part (A) with exception handling such that missing command-line arguments are detected. For example, if the user has entered enough input arguments, then the code should raise &lt;code&gt;IndexError&lt;/code&gt; exception. In the &lt;code&gt;except IndexError&lt;/code&gt; block, the code should use the &lt;code&gt;input&lt;/code&gt; function to ask the user for the missing input data.&lt;br /&gt;
&lt;br /&gt;
(C) Add another exception handling block that tests if the $t$ value read from the command line, lies between $0$ and $2v_0/g$. If not, then it raises a &lt;code&gt;ValueError&lt;/code&gt; exception in the if block on the legal values of $t$, and notifes the user about the legal interval for $t$ in the exception message.&lt;/p&gt;

&lt;p&gt;Here are some example runs of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py
Both v0 and t must be supplied on the command line
v0 = ?
5
t = ?
4
Traceback (most recent call last):
  File &quot;./projectile.py&quot;, line 17, in &amp;lt;module&amp;gt;
    'must be between 0 and 2v0/g = {}'.format(t,2.0*v0/g))
ValueError: t = 4.0 is a non-physical value.
must be between 0 and 2v0/g = 1.019367991845056
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py
Both v0 and t must be supplied on the command line
v0 = ?
5
t = ?
0.5
y = 1.27375
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py 5 0.4
y = 1.2151999999999998
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py 5 0.4 3
y = 1.2151999999999998
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the function &lt;code&gt;Newton&lt;/code&gt; that we discussed in &lt;a href=&quot;http:/ECL2017S/lecture/8-python-io-error-handling-unit-testing&quot; target=&quot;_blank&quot;&gt;lecture 8&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def Newton(f, dfdx, x, eps=1E-7, maxit=100):
    if not callable(f): raise TypeError( 'f is %s, should be function or class with __call__' % type(f) )
    if not callable(dfdx): raise TypeError( 'dfdx is %s, should be function or class with __call__' % type(dfdx) )
    if not isinstance(maxit, int): raise TypeError( 'maxit is %s, must be int' % type(maxit) )
    if maxit &amp;lt;= 0: raise ValueError( 'maxit=%d &amp;lt;= 0, must be &amp;gt; 0' % maxit )
    n = 0 # iteration counter
    while abs(f(x)) &amp;gt; eps and n &amp;lt; maxit:
        try:
            x = x - f(x)/float(dfdx(x))
        except ZeroDivisionError:
            raise ZeroDivisionError( 'dfdx(%g)=%g - cannot divide by zero' % (x, dfdx(x)) )
        n += 1
    return x, f(x), n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This function is supposed to be able to handle exceptions such as divergent iterations (which we discussed in the lecture), and division-by-zero. The latter error happens when &lt;code&gt;dfdx(x)=0&lt;/code&gt; in the above code. Write a test code that ensures the above code is able to correctly identify a division-by-zero exception and raise the correct assertionError.&lt;br /&gt;
(&lt;em&gt;Hint: To do so, you need to consider a test mathematical function as input to &lt;code&gt;Newton&lt;/code&gt;. One example could be $f(x)=\cos(x)$ with a starting search value $x=0$. This would result in derivative value $f’(x=0)=-\sin(x=0)=0$, which should lead to a &lt;code&gt;ZeroDivisionError&lt;/code&gt; exception. Now, write a test function &lt;code&gt;test_Newton_div_by_zero&lt;/code&gt; that can explicitly handle this exception by introducing a boolean variable &lt;code&gt;success&lt;/code&gt; that is &lt;code&gt;True&lt;/code&gt; if the exception is raised and otherwise &lt;code&gt;False&lt;/code&gt;&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/7-problems-python-IO-error-handling-unit-testing&quot;&gt;Homework 7: Problems - Python I/O, error handling, and unit testing&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Exam final: semester project]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/exam/2-semester-project"/>
  <id>http:/ECL2017S/exam/2-semester-project</id>
  <published>2017-04-05T00:00:00-05:00</published>
  <updated>2017-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is page describes the course project that will serve as the final exam for this course. Please submit all your efforts for this project (all files and data and results) in &lt;code&gt;ECL2017S/exams/final/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by the end of the semester.&lt;/p&gt;

&lt;p&gt;Inside the directory for the project (&lt;code&gt;ECL2017S/exams/final/&lt;/code&gt;) create three other folders: &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; folder contains the &lt;a href=&quot;http:/ECL2017S/exam/2/cells.mat&quot; target=&quot;_blank&quot;&gt;input data&lt;/a&gt; for this project. The &lt;code&gt;src&lt;/code&gt; folder should contain all your codes that you write for this project, and the &lt;code&gt;results&lt;/code&gt; folder should contain all the results generated by your code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Our goal in this project is to fit a mathemtical model of the growth to living cells to data for the growth of a tumor mass in the brain of a rat. You can download the MATLAB data file for this project from &lt;a href=&quot;http:/ECL2017S/exam/2/cells.mat&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Write a Python code, set of separate codes that performs the following tasks one after the other, and output all the results to the &lt;code&gt;results&lt;/code&gt; folder described above. If you have multiple Python codes each in a separate file, then write a &lt;code&gt;main.py&lt;/code&gt; Python code, such that if the user runs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./main.py ../data/cells.mat ../results/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
then all the necessary Python codes to generate all the results will be called by this &lt;code&gt;main.py&lt;/code&gt; code. The first command line argument to this code is the path to the input &lt;a href=&quot;http:/ECL2017S/exam/2/cells.mat&quot; target=&quot;_blank&quot;&gt;MATLAB data file&lt;/a&gt; containing data for this project, and the second command line tells the code where to write all the output and results of the project.&lt;/p&gt;

&lt;h3 id=&quot;data-structure-of-the-input-matlab-file&quot;&gt;Data structure of the input MATLAB file&lt;/h3&gt;
&lt;p&gt;The input file, is a 4-dimensional double-precision MATLAB matrix &lt;code&gt;cells(:,:,:,:)&lt;/code&gt;, corresponding to dimensions &lt;code&gt;cells(y,x,z,time)&lt;/code&gt;. This data is collected from MRI imaging of the rat’s brain almost every other day for a period of two weeks. For example, &lt;code&gt;cells(:,:,:,1)&lt;/code&gt; contains the number of cells at each point in space (y,x,z) at the first time point, or, &lt;code&gt;cells(:,:,10,1)&lt;/code&gt; represents a (XY) slice of MRI at $z=1$ and $t=1$.&lt;/p&gt;

&lt;p&gt;Now write a set of Python codes that perform the following tasks.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;data-reduction-and-visualization&quot;&gt;Data reduction and visualization&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; First write a code that reads the input MATLAB file and converts the data to a 4-D NumPy array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write Python codes that generate figures as similar as possible to the following figures (specific color-codes of the curves and figures do not matter, focus more on the format of the plots and its parts).&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_1_t10.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_2_t12.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_3_t14.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_5_t16.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_6_t18.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/tvccZSliceSubplotWithXYlab_rad_00gy_7_t20.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;and finally, a plot that shows the time evolution of the total number of tumor cells at all time points available in the input data. The time points are  $T=[10, 12, 14, 15, 16, 18, 20]$ in units of days.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/2/figures/growthCurve_CellCount_rad_00gy.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-mathematical-model-of-tumor-growth&quot;&gt;The mathematical model of tumor growth&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Now our goal is to fit the time evolution of the growth of this tumor, using a mathematical model, and use the maximum likelihood approach and Markov Chain Monte Carlo Technique to find the best-fit parameters of the model. The model we use is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gompertz_function&quot; target=&quot;_blank&quot;&gt;Gompertizan growth model&lt;/a&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;N(t,a,b,c) = a\exp\big( -b\exp(-ct) \big) ~,&lt;/script&gt;

&lt;p&gt;where $N(t)$ is the number of tumor cells at time $t$, and $a$, $b$, and $c$ are the parameters that we would like to find their best values given the input tumor cell data.&lt;/p&gt;

&lt;h4 id=&quot;combining-the-mathematical-model-with-a-regression-model&quot;&gt;Combining the mathematical model with a regression model&lt;/h4&gt;

&lt;p&gt;Now, if the model was ideally perfect in describing the data, the curve of the model predicion would pass through all the points in the growth curve plot in the above, providing a prefect description of data. This is however, never the case, as it is famously said &lt;strong&gt;all models are wrong, but some are useful&lt;/strong&gt;. In other words, the model prediction never matches observation perfectly. Therefore, we have to seek for the parameter values of the model that can get us closet possible to data. To do so, we define a statistical regression model (the renowned least-squares method) that gives us the probability $\pi(N_{obs}|N(t))$ of observing individual data points at each of the given times,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi(N_{obs}|N(t),a,b,c) = \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ N_{obs}(t)-N(t) \big]^2}{2\sigma^2} \bigg) ~,&lt;/script&gt;

&lt;p&gt;We have seven data points, so the overall probability of observing all of data $\mathcal{D}$ together given the parameters of the model, $\mathcal{L}(D|a,b,c,\sigma)$, is the product of their invidiual probabilities of observation given by the above equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}(D|a,b,c,\sigma) = \prod_{i=1}^{n=7} \pi(N_{obs}(t_i)|N(t_i),a,b,c) = \prod_{i=1}^{n=7} \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ N_{obs}(t_i)-N(t_i) \big]^2}{2\sigma^2} \bigg) ~,&lt;/script&gt;

&lt;p&gt;More often, you would want to work with $\log\mathcal{L}$ instead of $\mathcal{L}$, so the above equation becomes,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    \log\mathcal{L}(D|a,b,c,\sigma)
    &amp;= \sum_{i=1}^{n=7} \log\pi(N_{obs}(t_i)|N(t_i),a,b,c) \\\\
    &amp;= -\frac{n}{2}\bigg( \ln(2\pi) + \ln\sigma^2 \bigg) - \frac{1}{2\sigma^2} \sum_{i=1}^{n=7} \bigg[ N_{obs}(t_i)-N(t_i) \bigg]^2 ~,
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt;  Now the goal is to use an optimization algorithm, such as Markov Chain Monte Carlo available in Python via &lt;a href=&quot;https://pymc-devs.github.io/pymc/README.html&quot; target=&quot;_blank&quot;&gt;PyMc package&lt;/a&gt;, to find the most likely set of parameters of the model $a,b,c,\sigma$ that give the best prediction of the available data. Use the pymc package, or any other method you wish to obtein the best parameters, then redraw the above tumor evolution curve and show the result from the model as well. You can also alternatively use my own package for MCMC sampling, if which case, please inform me and I will instruct how to use it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/exam/2-semester-project&quot;&gt;Exam final: semester project&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on April 05, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 7: Python - modules, loops, and I/O]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/7-python-modules-loops-io"/>
  <id>http:/ECL2017S/lecture/7-python-modules-loops-io</id>
  <published>2017-03-29T00:00:00-05:00</published>
  <updated>2017-03-29T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains modules, loops, with a brief introduction to Input/Output processes in Python. Ideally, modules should have been part of the previous lecture (with Python functions). The split was however necessary to reduce the size of lecture 6 to a managable size.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;python-modules&quot;&gt;Python modules&lt;/h2&gt;
&lt;p&gt;We have already used Python modules extensively in the past lectures, homework, and quizzes. although we never discussed them. To put it simply, Python modules are a collection of Python definitions, variables, functions, … that can be reused as a library in future.&lt;/p&gt;

&lt;p&gt;Sometimes you want to reuse a function from an old program in a new program. The simplest way to do this is to copy and paste the old source code into the new program. However, this is not good programming practice, because you then over
time end up with multiple identical versions of the same function. When you want to improve the function or correct a bug, you need to remember to do the same update in all files with a copy of the function, and in real life most programmers fail to do so. You easily end up with a mess of different versions with different quality of basically the same code. Therefore, a golden rule of programming is to have one and only one version of a piece of code. All programs that want to use this piece of code must access one and only one place where the source code is kept. This principle is easy to implement if we create a module containing the code we want to reuse later in different programs.&lt;/p&gt;

&lt;h3 id=&quot;the-import-statement&quot;&gt;The import statement&lt;/h3&gt;
&lt;p&gt;We have already used the &lt;code&gt;math&lt;/code&gt; module on multiple occasions, using the &lt;code&gt;import&lt;/code&gt; statement. Here is an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: import math

In [12]: value = math.factorial(5)

In [13]: print(value)
120

In [14]: math.pi
Out[14]: 3.141592653589793

In [15]: math.e
Out[15]: 2.718281828459045
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In its simplest form, the import has the following syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import module1[, module2[,... moduleN]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
like,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import math, cmath, numpy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The standard approach for calling the names and definitions (variables, functions, …) inside the module is using the module-name prefix, like the above examples. To call the module names without the prefix, use the following module import statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: from math import *

In [17]: factorial(5)
Out[17]: 120
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To import only specific names, use the format like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import pi,e,factorial,erf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This will import the four math modules names &lt;code&gt;pi,e,factorial,erf&lt;/code&gt;. You could also change the name of the input module, or specific names from it, upon importing the module into your code, using &lt;code&gt;import as&lt;/code&gt; statement,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: import numpy as np

In [17]: np.double(5)
Out[17]: 5.0

In [20]: from numpy import double as dble

In [21]: dble(13)
Out[21]: 13.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
    A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed &lt;b&gt;only the first time the module name is encountered in an import statement&lt;/b&gt;. &lt;br /&gt;&lt;br /&gt;
    Also, note that in general the practice of &lt;code&gt;from mod_name import *&lt;/code&gt; from a module is discouraged, since it often causes poorly readable code. It is however very useful for saving time and exra typing in interactive sessions like IPython, or Jupyter.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;listing-all-names-in-an-imported-module&quot;&gt;Listing all names in an imported module&lt;/h3&gt;
&lt;p&gt;To get a list of all available names in an imported module, use &lt;code&gt;dir()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: import math

In [13]: dir(math)
Out[13]:
['__doc__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'acos',
 'acosh',
 'asin',
 'asinh',
 'atan',
 'atan2',
 'atanh',
 'ceil',
 'copysign',
 'cos',
 'cosh',
 'degrees',
 'e',
 'erf',
 'erfc',
 'exp',
 'expm1',
 'fabs',
 'factorial',
 'floor',
 'fmod',
 'frexp',
 'fsum',
 'gamma',
 'gcd',
 'hypot',
 'inf',
 'isclose',
 'isfinite',
 'isinf',
 'isnan',
 'ldexp',
 'lgamma',
 'log',
 'log10',
 'log1p',
 'log2',
 'modf',
 'nan',
 'pi',
 'pow',
 'radians',
 'sin',
 'sinh',
 'sqrt',
 'tan',
 'tanh',
 'trunc']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;python-standard-modules&quot;&gt;Python standard Modules&lt;/h3&gt;
&lt;p&gt;Python comes with a set of standard modules as its library, the so-called &lt;a href=&quot;https://docs.python.org/3/library/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Python Standard Library&lt;/strong&gt;&lt;/a&gt;. Some of these modules are built into the Python interpreter; these provide access to operations that are not part of the core of the language but are nevertheless built in, for efficiency and other reasons.&lt;/p&gt;

&lt;h3 id=&quot;creating-modules&quot;&gt;Creating modules&lt;/h3&gt;

&lt;p&gt;To make a Python module, simply collect all the functions that constitute the module in one single file with a given filename, for example, &lt;code&gt;mymodule.py&lt;/code&gt;. This file will be automatically a module, with name &lt;code&gt;mymodule&lt;/code&gt;, from which you can import functions and definitions in the standard way described above.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Why and when do you need to create a module?&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Sometimes you want to reuse a function from an old program in a new program. The simplest way to do this is to copy and paste the old source code into the new program. However, this is not good programming practice, because you then over time end up with multiple identical versions of the same function. When you want to improve the function or correct a bug, you need to remember to do the same update in all files with a copy of the function, and in real life most programmers fail to do so. You easily end up with a mess of different versions with different quality of basically the same code. Therefore, a golden rule of programming is to have one and only one version of a piece of code. All programs that want to use this piece of code must access one and only one place where the source code is kept. This principle is easy to implement if we create a module containing the code we want to reuse later in different programs.
&lt;/blockquote&gt;

&lt;p&gt;Note that modules can import other modules. It is customary but not required to place all import statements at the beginning of a module (or script, for that matter). The imported module names are placed in the importing module’s global &lt;a href=&quot;https://en.wikipedia.org/wiki/Symbol_table&quot; target=&quot;_blank&quot;&gt;symbol table&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;executing-modules-as-scripts&quot;&gt;Executing modules as scripts&lt;/h4&gt;

&lt;p&gt;When a Python module is called from the Bash command prompt like,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python mycode.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the code in the module will be executed, just as if you imported it inside another code. This is good, but can sometimnes become problematic. Let’s explain this with an example from the midterm exam, a &lt;a href=&quot;http:/ECL2017S/lecture/7/find_primes.py&quot; target=&quot;_blank&quot;&gt;script&lt;/a&gt; that finds and reports all prime numbers smaller than a given input number $n$.&lt;/p&gt;

&lt;p&gt;When you execute this code as astandalone Python script, it will ask you for an integer, to give you all integers that are smaller than the input number. Now suppose you wanted to import this script as a Python module into your code. If you do so, the Python interpreter would run all statements in this script and asks you to input an integer, before importing the rest of the functions in this script.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [5]: import find_primes
Enter an integer number:
n = 13

 Here is a list of all prime numbers smaller than 13:
13
11
7
5
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This may not be necessarily what we want to do. For example, we may only want to use the functions &lt;code&gt;get_primes&lt;/code&gt; and &lt;code&gt;is_prime&lt;/code&gt; in this script, without asking the user to input an integer and finding all smaller primes. The solution is to put the part of the code in the script that we don’t want to be executed as module, that is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('Enter an integer number: ')
n = int(input('n = '))
print('\n Here is a list of all prime numbers smaller than {}:'.format(n))
get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
inside the following if-block,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    print('Enter an integer number: ')
    n = int(input('n = '))
    print('Here is a list of all prime numbers smaller than {}:'.format(n))
    get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
When the code is run as a standalone script, the &lt;code&gt;__name__&lt;/code&gt; property of the code is set to &lt;code&gt;__main__&lt;/code&gt;. However, when the script is imported as a module inside another code, the &lt;code&gt;__name__&lt;/code&gt; property is automatically set to the name of the module &lt;code&gt;find_primes&lt;/code&gt;. Thus as a module, the above if-block will not be executed, but the rest of the code (the two functions) will be properly imported. The corrected script is named &lt;code&gt;mod_find_primes.py&lt;/code&gt; and can be downloaded from &lt;a href=&quot;http:/ECL2017S/lecture/7/mod_find_primes.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;In [6]: import mod_find_primes
In [7]: mod_find_primes.__name__
Out[7]: 'mod_find_primes'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You could also import specific names or funcitons from your own module, for example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;In [11]: from mod_find_primes import is_prime
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In summary,&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Add test blocks in your modules&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    It is recommended to only have functions and not any statements outside functions in a module. The reason is that the module file is executed from top to bottom during the import. With function definitions only in the module file, and no main program, there will be no calculations or output from the import, just definitions of functions. But in case you need to write a module that can be run standalone, then put all script statements for the standalone part of the module inside a &lt;b&gt;test block&lt;/b&gt; (the if-block described above).
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;command-line-arguments&quot;&gt;Command line arguments&lt;/h4&gt;

&lt;p&gt;Test blocks are especially useful when your module can be also run as a standalone Python script that takes in &lt;strong&gt;command-line arguments&lt;/strong&gt;. &lt;a href=&quot;http:/ECL2017S/lecture/7/cmd_find_primes.py&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is a modified version of the &lt;code&gt;mod_find_primes&lt;/code&gt; module now named &lt;code&gt;cmd_find_primes&lt;/code&gt; that instead of using &lt;code&gt;input()&lt;/code&gt; function, reads the integer number from the Bash command line. To do so, you need to modify the last part of the original module to the following, using Python’s standard &lt;code&gt;sys&lt;/code&gt; module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    import sys
    if len( sys.argv ) != 2: # check the number of arguments to be exactly 2.
        print('''
    Error: Exactly two arguments must be given on the command line.
    Usage:''')
        print(&quot;     &quot;, sys.argv[0], &quot;&amp;lt;a positive integer number&amp;gt;&quot;, '\n')
        sys.exit('     Program stopped.\n')
    else:
        n = int(sys.argv[1])
        print('Here is a list of all prime numbers smaller than {}:'.format(n))
        get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now if you run this code, from the Bash command line, or inside IPython, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [14]: run cmd_find_primes.py

    Error: Exactly two arguments must be given on the command line.
    Usage:
      cmd_find_primes.py &amp;lt;a positive integer number&amp;gt;

An exception has occurred, use %tb to see the full traceback.

SystemExit:      Program stopped.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The code will expect you to enter an integer right after the nbame of the script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [15]: run cmd_find_primes.py 13
Here is a list of all prime numbers smaller than 13:
13
11
7
5
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In general, I recommend you to use the &lt;code&gt;sys&lt;/code&gt; module for input arguments instead of Python’s &lt;code&gt;input()&lt;/code&gt; function.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Modules and main functions&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    If you have some functions and a main program in some program file, just move the main program to the test block. Then the file can act as a module, giving access to all the functions in other files, or the file can be executed from the command line, in the same way as the original program.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;test-blocks-for-module-code-verification&quot;&gt;Test blocks for module code verification&lt;/h4&gt;

&lt;p&gt;It is a good programming habit to let the test block do one or more of three things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;provide information on how the module or program is used,&lt;/li&gt;
  &lt;li&gt;test if the module functions work properly,&lt;/li&gt;
  &lt;li&gt;offer interaction with users such that the module file can be applied as a useful program.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To achieve the second task, we have to write functions that verify the implementation in a module. The general advice is to write test functions that,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;have names starting with &lt;code&gt;test_&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;express the success or failure of a test through a boolean variable, say &lt;code&gt;success&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;run &lt;code&gt;assert success, msg&lt;/code&gt; to raise an &lt;code&gt;AssertionError&lt;/code&gt; with an optional message &lt;code&gt;msg&lt;/code&gt; in case the test fails.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We talk about this later on in this course.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Doc-strings in modules&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    It is a good habit to include a doc-string in the beginning of your module file. This doc string should explain the purpose and use of the module.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;scope-of-definitions-in-your-module&quot;&gt;Scope of definitions in your module&lt;/h4&gt;

&lt;p&gt;Once you have created your module, you can import it just like any other module into our program, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [22]: import cmd_find_primes

In [23]: dir(cmd_find_primes)
Out[23]:
['__builtins__',
 '__cached__',
 '__doc__',
 '__file__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'get_primes',
 'is_prime']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, more often than not, you may want to have variables in your module, that are only to be used inside the module and not be accessed by the user. The convention is to start the names of these variables by an underscore. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;_course = &quot;Python programming&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This however, does not prevent the import of the variable &lt;code&gt;_course&lt;/code&gt; into your code from your the &lt;a href=&quot;http:/ECL2017S/lecture/7/mod_cmd_find_primes_del.py&quot; target=&quot;_blank&quot;&gt;module&lt;/a&gt; containing it. One solution is to delete the variables that we are not interested the user to have access to, at the end of the module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;del _course
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
such that the &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;module&lt;/a&gt; containing the above statement will give,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [28]: import mod_cmd_find_primes_del

In [29]: dir( mod_cmd_find_primes_del )
Out[29]:
['__builtins__',
 '__cached__',
 '__doc__',
 '__file__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'get_primes',
 'is_prime']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;However, note that if you import all definitions in &lt;a href=&quot;http:/ECL2017S/lecture/7/mod_cmd_find_primes_all.py&quot; target=&quot;_blank&quot;&gt;your module&lt;/a&gt; as standalone definitions like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [4]: from mod_cmd_find_primes_all import *

In [5]: dir()
Out[5]:
['In',
 'Out',
 '_',
 '_3',
 '__',
 '___',
 '__builtin__',
 '__builtins__',
 '__doc__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 '_dh',
 '_i',
 '_i1',
 '_i2',
 '_i3',
 '_i4',
 '_i5',
 '_ih',
 '_ii',
 '_iii',
 '_oh',
 '_sh',
 'exit',
 'get_ipython',
 'get_primes',
 'is_prime',
 'quit']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
you see that the variable &lt;code&gt;_course&lt;/code&gt; is not imported. In general, to avoid confusion, it is best to define an &lt;code&gt;__all__&lt;/code&gt; variable in your module, which contains a list of all variable and function names that are to be imported as standalone definitions using &lt;code&gt;from mymodule import *&lt;/code&gt;. For example, add the following to the above module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;__all__ = ['get_primes']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Upong importing this module, now only the function &lt;code&gt;get_prime&lt;/code&gt; will be imported and not &lt;code&gt;_course&lt;/code&gt; or &lt;code&gt;is_prime&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-path-to-your-modules&quot;&gt;The path to your modules&lt;/h4&gt;
&lt;p&gt;When you create a module, if it is in the current directory of your code, then it will be automatcally found by the Python interpreter. This is however, not generally the case if your module lives in another directory than the current working directory of Python interpreter. To add the module’s directory to the path of your Python interpreter, use the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [5]: myModuleFolder = ’the path to your module’

In [6]: import sys

In [7]: sys.path
Out[7]:
['',
 'C:\\Program Files\\Anaconda3\\Scripts',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\lmfit-0.9.5_44_gb2041c3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\python35.zip',
 'C:\\Program Files\\Anaconda3\\DLLs',
 'C:\\Program Files\\Anaconda3\\lib',
 'C:\\Program Files\\Anaconda3',
 'c:\\program files\\anaconda3\\lib\\site-packages\\setuptools-20.3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Sphinx-1.3.5-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32\\lib',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Pythonwin',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\IPython\\extensions',
 'C:\\Users\\Amir\\.ipython']

In [8]: sys.path.insert(0,myModuleFolder)

In [9]: sys.path
Out[9]:
[’the path to your module’,
 '',
 'C:\\Program Files\\Anaconda3\\Scripts',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\lmfit-0.9.5_44_gb2041c3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\python35.zip',
 'C:\\Program Files\\Anaconda3\\DLLs',
 'C:\\Program Files\\Anaconda3\\lib',
 'C:\\Program Files\\Anaconda3',
 'c:\\program files\\anaconda3\\lib\\site-packages\\setuptools-20.3-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Sphinx-1.3.5-py3.5.egg',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\win32\\lib',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\Pythonwin',
 'C:\\Program Files\\Anaconda3\\lib\\site-packages\\IPython\\extensions',
 'C:\\Users\\Amir\\.ipython']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In the above, we added the path to our module to the list of all paths the Python interpreter will search, in order to find the module requested to be imported (Note that &lt;code&gt;’the path to your module’&lt;/code&gt; is not a real system path, this was just an example).&lt;/p&gt;

&lt;h3 id=&quot;the-collections-module&quot;&gt;The &lt;strong&gt;collections&lt;/strong&gt; module&lt;/h3&gt;

&lt;p&gt;One of the greatest strengths of Python as a scientific programming language is that, for almost everything that you could imagine and want to write a code, someone has already written a code, and so there is &lt;em&gt;no reason to reinvent the wheel if someone has already done it for you&lt;/em&gt;. Throughout your career you will get to know many of the most important modules for your own domain of science. Here I will introduce only a general module, that has some interesting and rather useful functions in it. Specifically, this module contains some new non-standard Python data types that can be very handy at times.&lt;/p&gt;

&lt;h4 id=&quot;the-counter-data-type&quot;&gt;The &lt;strong&gt;Counter&lt;/strong&gt; data type&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Counter&lt;/code&gt; function from module &lt;code&gt;collections&lt;/code&gt; takes in a list and creates a dictionary, whose keys are unique elements in the input list and the values of the keys, are the number of times each key appears in the list. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from collections import Counter
mylist = [1,1,1,2,3,34,45,34,34,7,8,34,3,3,6,4,4,4,0,34,9,0]
c = Counter(mylist)
c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Counter({0: 2, 1: 3, 2: 1, 3: 3, 4: 3, 6: 1, 7: 1, 8: 1, 9: 1, 34: 5, 45: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are basically three methods for generating a Counter dictionary,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;c1 = Counter(['a', 'b', 'c', 'a', 'b', 'b']) # input a list directly into Counter
c2 = Counter({'a':2, 'b':3, 'c':1}) # Give it the Counter dictionary
c3 = Counter(a=2, b=3, c=1) # or simply give it the counts
c1 == c2 == c3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;what-is-counter-useful-for&quot;&gt;What is Counter useful for?&lt;/h5&gt;

&lt;p&gt;Suppose you have a long list of letters, and for some reason you need to count the number of times each letter appears in your string. You can achieve your goal as in the following example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;s = 'amirshahmoradijakelucerotravismike'
c = Counter(s)
for key in c.keys():
    print('The letter {} appears only {} times in the string'.format(key,c[key]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The letter v appears only 1 times in the string
The letter a appears only 5 times in the string
The letter u appears only 1 times in the string
The letter l appears only 1 times in the string
The letter j appears only 1 times in the string
The letter d appears only 1 times in the string
The letter h appears only 2 times in the string
The letter o appears only 2 times in the string
The letter i appears only 4 times in the string
The letter k appears only 2 times in the string
The letter c appears only 1 times in the string
The letter t appears only 1 times in the string
The letter s appears only 2 times in the string
The letter m appears only 3 times in the string
The letter r appears only 4 times in the string
The letter e appears only 3 times in the string   ​
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now suppose you wanted to cound the number of times different words appear in a given text,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;text = &quot;Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. &quot;
c = Counter(text.split())
for word in c.keys():
    print('The word &quot;{}&quot; appears only {} times in the text'.format(word,c[word]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The word &quot;Computation&quot; appears only 1 times in the text
The word &quot;a&quot; appears only 1 times in the text
The word &quot;Engineering&quot; appears only 3 times in the text
The word &quot;the&quot; appears only 2 times in the text
The word &quot;(COE111L)&quot; appears only 1 times in the text
The word &quot;offered&quot; appears only 1 times in the text
The word &quot;is&quot; appears only 2 times in the text
The word &quot;at&quot; appears only 2 times in the text
The word &quot;of&quot; appears only 2 times in the text
The word &quot;Lab&quot; appears only 1 times in the text
The word &quot;course&quot; appears only 1 times in the text
The word &quot;department&quot; appears only 1 times in the text
The word &quot;by&quot; appears only 1 times in the text
The word &quot;and&quot; appears only 1 times in the text
The word &quot;Texas&quot; appears only 1 times in the text
The word &quot;Mechanics&quot; appears only 1 times in the text
The word &quot;2017.&quot; appears only 1 times in the text
The word &quot;new&quot; appears only 1 times in the text
The word &quot;University&quot; appears only 1 times in the text
The word &quot;starting&quot; appears only 1 times in the text
The word &quot;Austin,&quot; appears only 1 times in the text
The word &quot;that&quot; appears only 1 times in the text
The word &quot;Spring&quot; appears only 1 times in the text
The word &quot;Aerospace&quot; appears only 1 times in the text  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you can also apply all different methods that exists for Counter data types on the variable &lt;code&gt;c&lt;/code&gt; in the above case. For example, you could ask for the 3 most common words in in the text,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;c.most_common(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[('Engineering', 3), ('the', 2), ('is', 2)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;the-ordereddict-data-type&quot;&gt;The &lt;strong&gt;OrderedDict&lt;/strong&gt; data type&lt;/h4&gt;
&lt;p&gt;This is also a subclass of dictionary data type, which provides all the methods provided by &lt;code&gt;dict&lt;/code&gt;, but which also retains the order by which elements are added to the dictionary,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, you can define a &lt;code&gt;defaultdict&lt;/code&gt; dictionary which will assign a default value to all keys that do not exist, and automatically adds them to the dictionary. A normal dictionary does not conserve the order by which elements were added to the dictionary,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;d = {5:5,3:3,6:6,1:1}
for i,j in d.items():
    print(i,j)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
    1 1
    3 3
    5 5
    6 6&lt;/p&gt;

&lt;p&gt;To get save order of the elements, you can use &lt;code&gt;OrderedDict&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from collections import OrderedDict as od
d = od([(5,5),(3,3),(6,6),(1,1)])
for i,j in d.items():
    print(i,j)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5 5
3 3
6 6
1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
Keep in mind that, two order dictionary with the same content may not be necessarily equal, since the order of their content also matters.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-timeit-module&quot;&gt;The timeit module&lt;/h3&gt;
&lt;p&gt;This is a module that provides some useful functions for timing the performance and speed of peices of your Python code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import timeit as tt
tt.timeit( &quot;-&quot;.join(str(n) for n in range(100)) , number=10000 )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.03779717059364884
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first input to &lt;code&gt;timeit&lt;/code&gt; function above is the operation which we would like to time, and the second input, tell the function, how many times repeat the task (If the operation takes a tiny amount, you would want to repeat it many many times, in order to get a sensible timing output). Here is the same operation as above, but now using the &lt;a href=&quot;http://book.pythontips.com/en/latest/map_filter.html#map&quot; target=&quot;_blank&quot;&gt;map&lt;/a&gt; function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;tt.timeit( &quot;-&quot;.join( map(str,range(1000))) , number=10000 )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.384857713242468  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In IPython or Jupyter, you can do the timing operation in a smarter way using IPython magic function &lt;a href=&quot;https://ipython.org/ipython-doc/dev/interactive/magics.html#magic-timeit&quot; target=&quot;_blank&quot;&gt;%timeit&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit &quot;-&quot;.join(str(n) for n in range(100))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10000 loops, best of 3: 36.6 µs per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The IPython’s magic function automatically figures how many times it should run the operation to get a sensible timing of the operation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit &quot;-&quot;.join( map(str,range(100)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10000 loops, best of 3: 21 µs per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, as you noticed in the above example, the function &lt;code&gt;map&lt;/code&gt; performs much better and faster than Python’s for-loop.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-time-module&quot;&gt;The time module&lt;/h3&gt;
&lt;p&gt;More generally, if you want to measure the CPU time spent on a specific part of your code, you can use the &lt;code&gt;clock()&lt;/code&gt; method from &lt;code&gt;time&lt;/code&gt; module,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import time
# do some work
t0 = time.clock()   # get the initial CPU time
# do some further work wqhich you want to time
t1 = time.clock()   # get the final CPU time
cpu_time = t1 - t0  # This is the time spent on the task being timed.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;time.clock()&lt;/code&gt; function returns the CPU time spent in the program since its start. If the interest is in the total time, also including reading and writing files, &lt;code&gt;time.time()&lt;/code&gt; is the appropriate function to call. Now suppose you had a list of functions that performed the same task, but using different methods, and you wanted to time their performance. Since in Python, functions are ordinary objects, making a list of functions is no more special than making a list of strings or numbers. You can therefore, create a list of function names and call them one by one, inside a loop, and time each one repectively.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import time
functions = [func1, func2, func3, func4,func5, func6, func7, func8,func9, func10]
timings = [] # timings[i] holds CPU time for functions[i]
for function in functions:
    t0 = time.clock()
    function(&amp;lt;input variables&amp;gt;)
    t1 = time.clock()
    cpu_time = t1 - t0
    timings.append(cpu_time)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;loops-in-python&quot;&gt;Loops in Python&lt;/h2&gt;

&lt;p&gt;We have already seen, both in homework and midterm, what a pain it can be if you wanted to repeat a certain number of tasks using recursive functions and if-blocks. Fortunately, Python has loop statements that can highly simplify the task of repeating certain statements for a certain number of times.&lt;/p&gt;

&lt;h3 id=&quot;while-loop&quot;&gt;While loop&lt;/h3&gt;

&lt;p&gt;One such statement is the while-loop:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;while this_logical_statement_holds_true : 
    perform_statements
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, here is a code that prints all positive integers smaller than a given input integer,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
while n &amp;gt; 1:
    n -= 1
    print(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another useful way of writing while-loops is the following (using the example above),&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
while True:
    n -= 1
    print(n)
    if n == 1: break
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the loop will continue forever, unless the condition &lt;code&gt;n==1&lt;/code&gt; is met at some point during the iteration.&lt;/p&gt;

&lt;h3 id=&quot;for-loop&quot;&gt;For loop&lt;/h3&gt;

&lt;p&gt;If you are from a Fortran, C, C++ background you maybe already accustomed to counting loops than while loops. Pyhon does not have a direct method for counting loops, however, there is a for-loop syntax that loops over the elements of a list or tuple. For example, if we wanted to rewrite the above code using for-loop, one solution would be like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
my_range = range(n-1,0,-1)
for n in my_range:
    print(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the Python’s builtin function &lt;code&gt;range([start,] stop [, step])&lt;/code&gt; creates a list of integer that starts from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; &lt;em&gt;but not including &lt;code&gt;end&lt;/code&gt;&lt;/em&gt;, with a distance of size &lt;code&gt;step&lt;/code&gt; between the elements. Here is another way of doing the same thing as in the above example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
print( 'Here are all positive integers smaller than {}'.format(n) )
mylist = list(range(n-1,0,-1))
for n in mylist:
    print(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7
Here are all positive integers smaller than 7
6
5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how I have used the &lt;code&gt;range&lt;/code&gt; function in order to get the same output as in the previous example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = int(input('input a positive integer: '))
mylist = list(range(n-1,0,-1))
print(mylist)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a positive integer: 7  
[6, 5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;for-loop-with-list-indices&quot;&gt;​For-loop with list indices&lt;/h4&gt;

&lt;p&gt;Instead of iterating over over a list directly, as illustrated above, one could iterate over the indices of a list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = ['amir','jake','lecero','mike','travis']
for i in range(len(mylist)):
    print(mylist[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;amir
jake
lecero
mike
travis
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    Iterating over list indices, instead of list elements, is particularly udseful, when you have to work with multiple lists in a for-loop.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;manipulating-lists-using-for-loop&quot;&gt;Manipulating lists using for-loop&lt;/h4&gt;

&lt;p&gt;Note that when you want to change the elements of a list in a for-loop, you have to change the list itself, and not simply the for-loop variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mydigits = [1,3,5,7,9]
for i in mydigits:
    i -= 1
mydigits
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code won’t change the values in the list, instead only the for-loop variable. If you want to change the list itself, you have to operate on the list elements directly,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mydigits = [1,3,5,7,9]
for i in rnage(len(mydigits)):
    mydigits[i] -= 1
mydigits
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 2, 4, 6, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;list-comprehension&quot;&gt;List comprehension&lt;/h4&gt;

&lt;p&gt;Frequently in Python programming you may need to create long lists of regurlarly ordered item. As a result, Python has a special concise syntax for such tasks, called &lt;strong&gt;list comprehension&lt;/strong&gt; which uses for-loop. For example, supopse you have a list of odd digits as in the example above, and you want to create a list of even digits from it. You could achieve this using the following simple syntax,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;odd_digits = [1,3,5,7,9]
even_digits = [i-1 for i in odd_digits]
even_digits
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 2, 4, 6, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;simultaneous-looping-over-multiple-lists&quot;&gt;Simultaneous looping over multiple lists&lt;/h4&gt;

&lt;p&gt;Suppose you have two or more lists of the same length over the elements of which you want to perform a specific set of tasks simultaneously. To do so, it suffices to create a &lt;strong&gt;list of tuples&lt;/strong&gt; using Python’s builtin function &lt;code&gt;zip&lt;/code&gt; and loop over the tuple elements of this list. For example, let’s assume that you wanted to create a list of the addition of individual elements in the above two lists: &lt;code&gt;odd_digits&lt;/code&gt; and &lt;code&gt;even_digits&lt;/code&gt;. One way to do it would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;sum_even_odd = []
for i,j in zip(odd_digits,even_digits):
    sum_even_odd.append(i+j) 
sum_even_odd
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 5, 9, 13, 17]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/7-python-modules-loops-io&quot;&gt;Lecture 7: Python - modules, loops, and I/O&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 29, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 6: Solutions - Python modules, loops, and I/O]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/6-solutions-python-modules-loops-IO"/>
  <id>http:/ECL2017S/homework/6-solutions-python-modules-loops-IO</id>
  <published>2017-03-29T00:00:00-05:00</published>
  <updated>2017-03-29T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;6-problems-python-modules-loops-IO.html&quot; target=&quot;_blank&quot;&gt;Homework 6: Problems - Python modules, loops, and I/O&lt;/a&gt;.&lt;/p&gt;

&lt;!--
The following figure illustrates the grade distribution for this homework.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/gradeDist/gradeHistHomework6.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.&lt;br&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;
&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;This homework aims at giving you some experience with Python for-loops and while-loops as well as reading user input from the Bash command line.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop&lt;/strong&gt;. Consider the following example code, which converts a list of temperature values from Celcius to Ferenheit, using a for-loop and then prints them on screen.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]
print ('    C     F')
for C in Cdegrees:
    F = (9.0/5)*C + 32
print ('%5d %5.1f' % (C, F))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    C     F
  -20  -4.0
  -15   5.0
  -10  14.0
   -5  23.0
    0  32.0
    5  41.0
   10  50.0
   15  59.0
   20  68.0
   25  77.0
   30  86.0
   35  95.0
   40 104.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write a while-loop implementation of the above code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]
index = 0
print ('    C     F')
while index &amp;lt; len(Cdegrees):
    C = Cdegrees[index]
    F = (9.0/5)*C + 32
    print('%5d %5.1f' % (C, F))
    index += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    C     F
  -20  -4.0
  -15   5.0
  -10  14.0
   -5  23.0
    0  32.0
    5  41.0
   10  50.0
   15  59.0
   20  68.0
   25  77.0
   30  86.0
   35  95.0
   40 104.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Consider the following nested list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;the following nested list:
q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a for-loop that extracts all the letters in the list and finally prints them all as a single string,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;abcdefgh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]
s = ''
for i in q:
    for j in range(len(i)):
        s = s + i[j]
print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;abcdefgh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider the following program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import sqrt
for n in range(1, 60):
    r_org = 2.0
    r = r_org
    for i in range(n):
        r = sqrt(r)
    for i in range(n):
        r = r ** 2
    print ('With {} times sqrt and then {} times **2, the number {} becomes: {:.16f}'.format(n,n,r_org,r))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain what this code does. Then run the code, and explain why do you the behavior observed. In particular, why do you not recover the original value $2$ after many repetitions of the same forward and reverse task?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
This code will yield the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import sqrt
for n in range(1, 60):
    r_org = 2.0
    r = r_org
    for i in range(n):
        r = sqrt(r)
    for i in range(n):
        r = r ** 2
    print ('With {} times sqrt and then {} times **2, the number {} becomes: {:.16f}'.format(n,n,r_org,r))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;With 1 times sqrt and then 1 times **2, the number 2.0 becomes: 2.0000000000000004
With 2 times sqrt and then 2 times **2, the number 2.0 becomes: 1.9999999999999996
With 3 times sqrt and then 3 times **2, the number 2.0 becomes: 1.9999999999999996
With 4 times sqrt and then 4 times **2, the number 2.0 becomes: 1.9999999999999964
With 5 times sqrt and then 5 times **2, the number 2.0 becomes: 1.9999999999999964
With 6 times sqrt and then 6 times **2, the number 2.0 becomes: 1.9999999999999964
With 7 times sqrt and then 7 times **2, the number 2.0 becomes: 1.9999999999999714
With 8 times sqrt and then 8 times **2, the number 2.0 becomes: 2.0000000000000235
With 9 times sqrt and then 9 times **2, the number 2.0 becomes: 2.0000000000000235
With 10 times sqrt and then 10 times **2, the number 2.0 becomes: 2.0000000000000235
With 11 times sqrt and then 11 times **2, the number 2.0 becomes: 2.0000000000000235
With 12 times sqrt and then 12 times **2, the number 2.0 becomes: 1.9999999999991336
With 13 times sqrt and then 13 times **2, the number 2.0 becomes: 1.9999999999973292
With 14 times sqrt and then 14 times **2, the number 2.0 becomes: 1.9999999999973292
With 15 times sqrt and then 15 times **2, the number 2.0 becomes: 1.9999999999973292
With 16 times sqrt and then 16 times **2, the number 2.0 becomes: 2.0000000000117746
With 17 times sqrt and then 17 times **2, the number 2.0 becomes: 2.0000000000408580
With 18 times sqrt and then 18 times **2, the number 2.0 becomes: 2.0000000000408580
With 19 times sqrt and then 19 times **2, the number 2.0 becomes: 2.0000000001573586
With 20 times sqrt and then 20 times **2, the number 2.0 becomes: 2.0000000001573586
With 21 times sqrt and then 21 times **2, the number 2.0 becomes: 2.0000000001573586
With 22 times sqrt and then 22 times **2, the number 2.0 becomes: 2.0000000010885857
With 23 times sqrt and then 23 times **2, the number 2.0 becomes: 2.0000000029511749
With 24 times sqrt and then 24 times **2, the number 2.0 becomes: 2.0000000066771721
With 25 times sqrt and then 25 times **2, the number 2.0 becomes: 2.0000000066771721
With 26 times sqrt and then 26 times **2, the number 2.0 becomes: 1.9999999917775542
With 27 times sqrt and then 27 times **2, the number 2.0 becomes: 1.9999999917775542
With 28 times sqrt and then 28 times **2, the number 2.0 becomes: 1.9999999917775542
With 29 times sqrt and then 29 times **2, the number 2.0 becomes: 1.9999999917775542
With 30 times sqrt and then 30 times **2, the number 2.0 becomes: 1.9999999917775542
With 31 times sqrt and then 31 times **2, the number 2.0 becomes: 1.9999999917775542
With 32 times sqrt and then 32 times **2, the number 2.0 becomes: 1.9999990380770896
With 33 times sqrt and then 33 times **2, the number 2.0 becomes: 1.9999971307544144
With 34 times sqrt and then 34 times **2, the number 2.0 becomes: 1.9999971307544144
With 35 times sqrt and then 35 times **2, the number 2.0 becomes: 1.9999971307544144
With 36 times sqrt and then 36 times **2, the number 2.0 becomes: 1.9999971307544144
With 37 times sqrt and then 37 times **2, the number 2.0 becomes: 1.9999971307544144
With 38 times sqrt and then 38 times **2, the number 2.0 becomes: 1.9999360966436217
With 39 times sqrt and then 39 times **2, the number 2.0 becomes: 1.9999360966436217
With 40 times sqrt and then 40 times **2, the number 2.0 becomes: 1.9999360966436217
With 41 times sqrt and then 41 times **2, the number 2.0 becomes: 1.9994478907329654
With 42 times sqrt and then 42 times **2, the number 2.0 becomes: 1.9984718365144798
With 43 times sqrt and then 43 times **2, the number 2.0 becomes: 1.9965211562778555
With 44 times sqrt and then 44 times **2, the number 2.0 becomes: 1.9965211562778555
With 45 times sqrt and then 45 times **2, the number 2.0 becomes: 1.9887374575497223
With 46 times sqrt and then 46 times **2, the number 2.0 becomes: 1.9887374575497223
With 47 times sqrt and then 47 times **2, the number 2.0 becomes: 1.9887374575497223
With 48 times sqrt and then 48 times **2, the number 2.0 becomes: 1.9887374575497223
With 49 times sqrt and then 49 times **2, the number 2.0 becomes: 1.8682459487159784
With 50 times sqrt and then 50 times **2, the number 2.0 becomes: 1.6487212645509468
With 51 times sqrt and then 51 times **2, the number 2.0 becomes: 1.6487212645509468
With 52 times sqrt and then 52 times **2, the number 2.0 becomes: 1.0000000000000000
With 53 times sqrt and then 53 times **2, the number 2.0 becomes: 1.0000000000000000
With 54 times sqrt and then 54 times **2, the number 2.0 becomes: 1.0000000000000000
With 55 times sqrt and then 55 times **2, the number 2.0 becomes: 1.0000000000000000
With 56 times sqrt and then 56 times **2, the number 2.0 becomes: 1.0000000000000000
With 57 times sqrt and then 57 times **2, the number 2.0 becomes: 1.0000000000000000
With 58 times sqrt and then 58 times **2, the number 2.0 becomes: 1.0000000000000000
With 59 times sqrt and then 59 times **2, the number 2.0 becomes: 1.0000000000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
What is happening is that, 1 is returned for n &amp;gt;= 52 as square root of 2, that is, after 52 times square-root operation, the degree of accuracy required for representing the result goes beyond the degree of accuracy available in a Python float. Consequently, the later squaring operation on 1.00000000000000 will leave the number unchanged and therefore, 2 is not recovered.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;eps = 1.0
while 1.0 != 1.0 + eps:
    print ('...............', eps)
    eps /= 2.0
print ('final eps:', eps)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Explain what the code is doing. Run the code and observe the output. How could &lt;code&gt;1.0 != 1.0 + eps&lt;/code&gt; be False?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is the output of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;............... 1.0
............... 0.5
............... 0.25
............... 0.125
............... 0.0625
............... 0.03125
............... 0.015625
............... 0.0078125
............... 0.00390625
............... 0.001953125
............... 0.0009765625
............... 0.00048828125
............... 0.000244140625
............... 0.0001220703125
............... 6.103515625e-05
............... 3.0517578125e-05
............... 1.52587890625e-05
............... 7.62939453125e-06
............... 3.814697265625e-06
............... 1.9073486328125e-06
............... 9.5367431640625e-07
............... 4.76837158203125e-07
............... 2.384185791015625e-07
............... 1.1920928955078125e-07
............... 5.960464477539063e-08
............... 2.9802322387695312e-08
............... 1.4901161193847656e-08
............... 7.450580596923828e-09
............... 3.725290298461914e-09
............... 1.862645149230957e-09
............... 9.313225746154785e-10
............... 4.656612873077393e-10
............... 2.3283064365386963e-10
............... 1.1641532182693481e-10
............... 5.820766091346741e-11
............... 2.9103830456733704e-11
............... 1.4551915228366852e-11
............... 7.275957614183426e-12
............... 3.637978807091713e-12
............... 1.8189894035458565e-12
............... 9.094947017729282e-13
............... 4.547473508864641e-13
............... 2.2737367544323206e-13
............... 1.1368683772161603e-13
............... 5.684341886080802e-14
............... 2.842170943040401e-14
............... 1.4210854715202004e-14
............... 7.105427357601002e-15
............... 3.552713678800501e-15
............... 1.7763568394002505e-15
............... 8.881784197001252e-16
............... 4.440892098500626e-16
............... 2.220446049250313e-16
final eps: 1.1102230246251565e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is happening is that after a certain number of divisions performed on the value of &lt;code&gt;eps&lt;/code&gt;, the value goes beyond the highest float precision representatble by Python standard ($0.0000000000000001$), and therefore the value of &lt;code&gt;eps&lt;/code&gt; is eventually rounded to exact zero. The nonzero eps value computed above is called &lt;strong&gt;machine epsilon&lt;/strong&gt; or &lt;strong&gt;machine zero&lt;/strong&gt; and is an important parameter to know, since it can lead to disasters in your very important complex calculations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the following list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;numbers = list(range(10))
print(numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the following code, given the above list. Explain the weird behavior that you observe.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;for n in numbers:
    i = len(numbers)//2
    del numbers[i]
    print ('n={}, del {}'.format(n,i), numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;numbers = list(range(10))
for n in numbers:
    i = len(numbers)//2
    del numbers[i]
    print ('n={}, del {}'.format(n,i), numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;n=0, del 5 [0, 1, 2, 3, 4, 6, 7, 8, 9]
n=1, del 4 [0, 1, 2, 3, 6, 7, 8, 9]
n=2, del 4 [0, 1, 2, 3, 7, 8, 9]
n=3, del 3 [0, 1, 2, 7, 8, 9]
n=8, del 3 [0, 1, 2, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is really happening is that the list over which we are looping changes its content because of the modifications during on the list in the for-loop. The message in this exercise is to &lt;strong&gt;never modify a list that you are looping over&lt;/strong&gt;. Modification is indeed technically possible, as shown above, but you really need to know what you are doing. Otherwise you will experience very strange program behavior.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Consider a problem similar to what we had in the midterm exam: Write a Python function that when executed, asks the user to enter an integer number, then the function gives out the number of prime numbers that are smaller than the input integer number. Here is the answer to this question using only the knowledge of recursive functions and if-blocks,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def is_prime(n):
    
    is_prime = True
    
    def is_divisible(n,divisor):
        if n&amp;lt;(divisor-1)*divisor: return False
        if n%divisor==0: return True
        else:
            divisor += 1
            return is_divisible(n,divisor)

    if is_divisible(n,divisor=2): is_prime=False
    return is_prime

def get_primes(n):
    count = 0
    if n == 1:
        return count
    else:
        if is_prime(n):
            count = 1
        n -= 1
        return count + get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_primes(13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(A) Now rewrite &lt;code&gt;get_primes(n)&lt;/code&gt; and the other functions in the above code using for-loop this time. Name the new functions &lt;code&gt;get_prime_for(n)&lt;/code&gt; and &lt;code&gt;is_prime_for(n)&lt;/code&gt;, with &lt;em&gt;for&lt;/em&gt; in the names indicating that the functions now use for-loops.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def is_prime_for(x):
    if x &amp;gt; 1:
        n = x // 2
        for i in range(2, n + 1):
            if x % i == 0:
                return False
        return True
    else:
        return False

def get_primes_for(n):
    count = 0
    for i in range(2,n):
        if is_prime(i):
            count += 1
    return count
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here is a test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_primes_for(13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(B) Now compare the performance of the two functions &lt;code&gt;get_primes(n=500)&lt;/code&gt; and &lt;code&gt;get_primes_for(n500)&lt;/code&gt; using Jupyter’s or IPython’s &lt;code&gt;%timeit&lt;/code&gt; magic function. Which one is faster?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit get_primes(500)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1000 loops, best of 3: 1.32 ms per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit get_primes_for(500)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1000 loops, best of 3: 1.69 ms per loop  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interesting, recursive functions seem to be faster than Python for-loops!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/6-solutions-python-modules-loops-IO&quot;&gt;Homework 6: Solutions - Python modules, loops, and I/O&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 29, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 6: Problems - Python modules, loops, and I/O]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/6-problems-python-modules-loops-IO"/>
  <id>http:/ECL2017S/homework/6-problems-python-modules-loops-IO</id>
  <published>2017-03-29T00:00:00-05:00</published>
  <updated>2017-03-29T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This homework aims at giving you some experience with Python for-loops and while-loops as well as reading user input from the Bash command line.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop&lt;/strong&gt;. Consider the following example code, which converts a list of temperature values from Celcius to Ferenheit, using a for-loop and then prints them on screen.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]
print ('    C     F')
for C in Cdegrees:
    F = (9.0/5)*C + 32
print ('%5d %5.1f' % (C, F))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    C     F
  -20  -4.0
  -15   5.0
  -10  14.0
   -5  23.0
    0  32.0
    5  41.0
   10  50.0
   15  59.0
   20  68.0
   25  77.0
   30  86.0
   35  95.0
   40 104.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write a while-loop implementation of the above code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Consider the following nested list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;the following nested list:
q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a for-loop that extracts all the letters in the list and finally prints them all as a single string,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;abcdefgh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider the following program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import sqrt
for n in range(1, 60):
    r_org = 2.0
    r = r_org
    for i in range(n):
        r = sqrt(r)
    for i in range(n):
        r = r ** 2
    print ('With {} times sqrt and then {} times **2, the number {} becomes: {:.16f}'.format(n,n,r_org,r))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain what this code does. Then run the code, and explain why do you the behavior observed. In particular, why do you not recover the original value $2$ after many repetitions of the same forward and reverse task?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Consider the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;eps = 1.0
while 1.0 != 1.0 + eps:
    print ('...............', eps)
    eps /= 2.0
print ('final eps:', eps)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Explain what the code is doing. Run the code and observe the output. How could &lt;code&gt;1.0 != 1.0 + eps&lt;/code&gt; be False?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the following list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;numbers = list(range(10))
print(numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the following code, given the above list. Explain the weird behavior that you observe.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;for n in numbers:
    i = len(numbers)//2
    del numbers[i]
    print ('n={}, del {}'.format(n,i), numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Consider a problem similar to what we had in the midterm exam: Write a Python function that when executed, asks the user to enter an integer number, then the function gives out the number of prime numbers that are smaller than the input integer number. Here is the answer to this question using only the knowledge of recursive functions and if-blocks,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def is_prime(n):
    
    is_prime = True
    
    def is_divisible(n,divisor):
        if n&amp;lt;(divisor-1)*divisor: return False
        if n%divisor==0: return True
        else:
            divisor += 1
            return is_divisible(n,divisor)

    if is_divisible(n,divisor=2): is_prime=False
    return is_prime

def get_primes(n):
    count = 0
    if n == 1:
        return count
    else:
        if is_prime(n):
            count = 1
        n -= 1
        return count + get_primes(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_primes(13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(A) Now rewrite &lt;code&gt;get_primes(n)&lt;/code&gt; and the other functions in the above code using for-loop this time. Name the new functions &lt;code&gt;get_prime_for(n)&lt;/code&gt; and &lt;code&gt;is_prime_for(n)&lt;/code&gt;, with &lt;em&gt;for&lt;/em&gt; in the names indicating that the functions now use for-loops.&lt;/p&gt;

&lt;p&gt;(B) Now compare the performance of the two functions &lt;code&gt;get_primes(n=500)&lt;/code&gt; and &lt;code&gt;get_primes_for(n500)&lt;/code&gt; using Jupyter’s or IPython’s &lt;code&gt;%timeit&lt;/code&gt; magic function. Which one is faster?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/6-problems-python-modules-loops-IO&quot;&gt;Homework 6: Problems - Python modules, loops, and I/O&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 29, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Exam 1: Solutions]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/exam/1-solutions-midterm-exam"/>
  <id>http:/ECL2017S/exam/1-solutions-midterm-exam</id>
  <published>2017-03-22T00:00:00-05:00</published>
  <updated>2017-03-22T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;1-problems-midterm-exam.html&quot; target=&quot;_blank&quot;&gt;Exam 1: Problems&lt;/a&gt;.&lt;/p&gt;

&lt;!--
--&gt;
&lt;p&gt;The following figure illustrates the grade distribution for the midterm exam.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/exam/gradeDist/gradeHistMidtermExam.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This is the first (and last) midterm exam of this course, covering lectures 1-6. Please submit your answers to each of the following questions in a single &lt;code&gt;readme.md&lt;/code&gt; file, in &lt;code&gt;ECL2017S/exams/1/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by the end of the exam.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Name the closest programming language to machine code, and the oldest high-level programming language in history, respectively.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;
Assembly, Fortran.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Name a programming language ancestor of Python.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;
C.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Name the three different generations (not different software) of Version Control Systems ever developed. If you don’t remember the exact names, you can instead briefly explain how each VCS paradigm works.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Local VCS, Centralized VCS, Distributed VCS. For details of each VCS paradigm see &lt;a href=&quot;http:/ECL2017S/lecture/1-version-control-system&quot; target=&quot;_blank&quot;&gt;this lecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; What is the Git command that lists ALL tags in the project?&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt;  Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that applies the relevant Python string manipulator methods to this string,&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Python Is Great For String Manipulation.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and transforms it to the following string and and prints it on screen,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.noitalupinam-gnirts-rof-taerg-si-nohtyp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print( &quot;Python Is Great For String Manipulation.&quot;.lower().replace(' ','-')[::-1] )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;.noitalupinam-gnirts-rof-taerg-si-nohtyp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Name the three major types of programming errors.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
syntax, runtime, and semantic errors.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Are tuples mutable objects? Can they be redefined?&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
No. Yes.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Download &lt;a href=&quot;http:/ECL2017S/homework/4/script_full_of_errors.py&quot; target=&quot;_blank&quot;&gt;this code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_corrected.py&lt;/code&gt; in your &lt;code&gt;exams/1/&lt;/code&gt; folder of your project. Explain in front of each corrected Python statement, why the error occurred.  On the last line of the script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;true = fox is rev in Persian
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the statement runs without error. But can you explain what it does?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The corrected file can be downloaded from &lt;a href=&quot;http:/ECL2017S/homework/4/solutions/script_full_of_errors_corrected.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
The last line of the script, first compares the identity of &lt;code&gt;fox&lt;/code&gt; with &lt;code&gt;rev&lt;/code&gt;, the result of which is either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, then checks if this result is in the list &lt;code&gt;Persian&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; (A) In the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [26]: a = [1,2,3,4,5]

In [27]: b = a

In [28]: b
Out[28]: [1, 2, 3, 5]

In [29]: b.append(6)

In [30]: a
Out[30]: [1, 2, 3, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
explain the relationship between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; (why does &lt;code&gt;a&lt;/code&gt; change from line 25 to line 30?).&lt;/p&gt;

&lt;p&gt;(B) Continuing with the above code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [31]: b = a + a

In [32]: a
Out[32]: [1, 2, 3, 5, 6]

In [33]: b
Out[33]: [1, 2, 3, 5, 6, 1, 2, 3, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
explain why the values of &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; are different?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Simple.&lt;br /&gt;
(A) &lt;code&gt;b&lt;/code&gt; is an alias for the content of &lt;code&gt;a&lt;/code&gt;.&lt;br /&gt;
(B) When &lt;code&gt;b&lt;/code&gt; is redefined in line 31, the alias between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is automatically broken.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. &lt;/strong&gt; Are the following variable assignments considered an alias for the same value (list), or independent copies of the list?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = b = c = [1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If they constitute an alias, how can you assign independent copy of the values of one variable (e.g., &lt;code&gt;c&lt;/code&gt;) to another variable (e.g., &lt;code&gt;a&lt;/code&gt;)? Otherwise, if the above assignment, creates independent copies, how would you change the assignment, such that they becomes aliases for the same value?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Multiple assignment statements result in aliases for &lt;em&gt;list&lt;/em&gt; values. To make hard copies, use the following &lt;code&gt;copy()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [45]: a = b = c = [1,2,3,4]

In [46]: a is b
Out[46]: True

In [47]: a = b.copy()

In [48]: a is b
Out[48]: False

In [49]: a
Out[49]: [1, 2, 3, 4]

In [50]: b
Out[50]: [1, 2, 3, 4]

In [51]: a == b
Out[51]: True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. &lt;/strong&gt; Write a Python program, &lt;code&gt;find_primes.py&lt;/code&gt;, that when executed, asks the user to enter an integer number, then the program prints on screen all the prime numbers smaller than the input integer number.&lt;br /&gt;
(&lt;strong&gt;Hint:&lt;/strong&gt; Start with writing a function that finds whether an input integer number is prime or not, then write another function that repeatedly calls this function to find all the prime numbers smaller than the initial input number.)&lt;/p&gt;

&lt;p&gt;Here is a sample output from the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Enter an integer number: 50
Here is a list of all prime numbers smaller than 50:
47
43
41
37
31
29
23
19
17
13
11
7
5
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
A sample answer can be downloaded from &lt;a href=&quot;http:/ECL2017S/exam/1/find_primes.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. &lt;/strong&gt; (A) Rewrite the following statement in two different but equivalent ways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A &lt;strong&gt;one-line&lt;/strong&gt; if-expression.&lt;/li&gt;
  &lt;li&gt;Using only tuple notation, instead of if-block or if-expression syntax.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)

answer_status = 'wrong'
if abbr == 'ECL':
    answer_status = 'correct'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B) Which one of the above two methods, would also be applicable to the following if-block + print statements. Rewrite it in whichever format that is suitable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if answer_status=='correct':
    print('You answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
(A)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)
answer_status = 'correct' if abbr == 'ECL' else 'wrong'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)
answer_status = ('wrong','correct')[abbr=='ECL']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)
print( ('wrong buddy...try again','You answer is correct!')[answer_status=='correct'] )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)
print( 'You answer is correct!' if answer_status=='correct' else 'wrong buddy...try again' )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. &lt;/strong&gt; Consider the following two Python expressions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1,1) is (1,1)
(1,1) == (1,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Are these two the same? Explain your answer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The keyword &lt;code&gt;is&lt;/code&gt; checks for the same identity of the objects that are compared. The operator &lt;code&gt;==&lt;/code&gt; checks for the same value of the objects.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. &lt;/strong&gt; Consider the following function which takes another function as input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r

x = 2
diff2nd_g = diff2nd(g, x)
print ( &quot;g’’(x=%f)=%f&quot; % (x, diff2nd_g) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a lambda function as an input to this function, that calculates the function value &lt;script type=&quot;math/tex&quot;&gt;x^2 + 4x + 1&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;g = lambda x: x**2 + 4.0*x + 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. &lt;/strong&gt; The traditional way of swapping values of two variables in most programming languages is like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [68]: a = 5

In [69]: b = 7

In [70]: _ = a

In [71]: a = b

In [72]: b = _

In [73]: a
Out[73]: 7

In [74]: b
Out[74]: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Rewrite the swapping above, in a more abbreviated Pythonic way, once using lists, and another using tuples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [75]: (a,b) = (b,a)

In [76]: a
Out[76]: 5

In [77]: b
Out[77]: 7

In [78]: [a,b] = [b,a]

In [79]: a
Out[79]: 7

In [80]: b
Out[80]: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/exam/1-solutions-midterm-exam&quot;&gt;Exam 1: Solutions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 22, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Exam 1: Problems]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/exam/1-problems-midterm-exam"/>
  <id>http:/ECL2017S/exam/1-problems-midterm-exam</id>
  <published>2017-03-22T00:00:00-05:00</published>
  <updated>2017-03-22T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the first (and last) midterm exam of this course, covering lectures 1-6. Please submit your answers to each of the following questions in a single &lt;code&gt;readme.md&lt;/code&gt; file, in &lt;code&gt;ECL2017S/exams/1/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by the end of the exam.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Name the closest programming language to machine code, and the oldest high-level programming language in history, respectively.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Name a programming language ancestor of Python.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Name the three different generations (not different software) of Version Control Systems ever developed. If you don’t remember the exact names, you can instead briefly explain how each VCS paradigm works.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; What is the Git command that lists ALL tags in the project?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt;  Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that applies the relevant Python string manipulator methods to this string,&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Python Is Great For String Manipulation.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and transforms it to the following string and and prints it on screen,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.noitalupinam-gnirts-rof-taerg-si-nohtyp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Name the three major types of programming errors.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Are tuples mutable objects? Can they be redefined?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Download &lt;a href=&quot;http:/ECL2017S/homework/4/script_full_of_errors.py&quot; target=&quot;_blank&quot;&gt;this code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_corrected.py&lt;/code&gt; in your &lt;code&gt;exams/1/&lt;/code&gt; folder of your project. Explain in front of each corrected Python statement, why the error occurred.  On the last line of the script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;true = fox is rev in Persian
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the statement runs without error. But can you explain what it does?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; (A) In the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [26]: a = [1,2,3,4,5]

In [27]: b = a

In [28]: b
Out[28]: [1, 2, 3, 5]

In [29]: b.append(6)

In [30]: a
Out[30]: [1, 2, 3, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
explain the relationship between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; (why does &lt;code&gt;a&lt;/code&gt; change from line 25 to line 30?).&lt;/p&gt;

&lt;p&gt;(B) Continuing with the above code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [31]: b = a + a

In [32]: a
Out[32]: [1, 2, 3, 5, 6]

In [33]: b
Out[33]: [1, 2, 3, 5, 6, 1, 2, 3, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
explain why the values of &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; are different?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. &lt;/strong&gt; Are the following variable assignments considered an alias for the same value (list), or independent copies of the list?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = b = c = [1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If they constitute an alias, how can you assign independent copy of the values of one variable (e.g., &lt;code&gt;c&lt;/code&gt;) to another variable (e.g., &lt;code&gt;a&lt;/code&gt;)? Otherwise, if the above assignment, creates independent copies, how would you change the assignment, such that they becomes aliases for the same value?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. &lt;/strong&gt; Write a Python program, &lt;code&gt;find_primes.py&lt;/code&gt;, that when executed, asks the user to enter an integer number, then the program prints on screen all the prime numbers smaller than the input integer number.&lt;br /&gt;
(&lt;strong&gt;Hint:&lt;/strong&gt; Start with writing a function that finds whether an input integer number is prime or not, then write another function that repeatedly calls this function to find all the prime numbers smaller than the initial input number.)&lt;/p&gt;

&lt;p&gt;Here is a sample output from the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Enter an integer number: 50
Here is a list of all prime numbers smaller than 50:
47
43
41
37
31
29
23
19
17
13
11
7
5
3
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. &lt;/strong&gt; (A) Rewrite the following statement in two different but equivalent ways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A &lt;strong&gt;one-line&lt;/strong&gt; if-expression.&lt;/li&gt;
  &lt;li&gt;Using only tuple notation, instead of if-block or if-expression syntax.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)

answer_status = 'wrong'
if abbr == 'ECL':
    answer_status = 'correct'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B) Which one of the above two methods, would also be applicable to the following if-block + print statements. Rewrite it in whichever format that is suitable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if answer_status=='correct':
    print('You answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. &lt;/strong&gt; Consider the following two Python expressions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1,1) is (1,1)
(1,1) == (1,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Are these two the same? Explain your answer.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. &lt;/strong&gt; Consider the following function which takes another function as input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r

x = 2
diff2nd_g = diff2nd(g, x)
print ( &quot;g’’(x=%f)=%f&quot; % (x, diff2nd_g) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a lambda function as an input to this function, that calculates the function value &lt;script type=&quot;math/tex&quot;&gt;x^2 + 4x + 1&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. &lt;/strong&gt; The traditional way of swapping values of two variables in most programming languages is like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [68]: a = 5

In [69]: b = 7

In [70]: _ = a

In [71]: a = b

In [72]: b = _

In [73]: a
Out[73]: 7

In [74]: b
Out[74]: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Rewrite the swapping above, in a more abbreviated Pythonic way, once using lists, and another using tuples.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/exam/1-problems-midterm-exam&quot;&gt;Exam 1: Problems&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 22, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 5: Solutions - Python variables and assignment statements]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/quiz/5-solutions-python-variables-assignment-statements"/>
  <id>http:/ECL2017S/quiz/5-solutions-python-variables-assignment-statements</id>
  <published>2017-03-08T00:00:00-06:00</published>
  <updated>2017-03-08T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;5-problems-python-variables-assignment-statements.html&quot; target=&quot;_blank&quot;&gt;Quiz 5: Problems - Python variables and assignment statements&lt;/a&gt;.&lt;/p&gt;

&lt;!--
--&gt;
&lt;p&gt;The following figure illustrates the grade distribution for this quiz.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/quiz/gradeDist/gradeHistQuiz5_raw.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Python’s print function, and the how to string manipulation in Python. Don’t forget to push your answers to your remote repository by the end of quiz time. Push your quiz-5 &lt;em&gt;readme.md&lt;/em&gt; file to quiz/5/ folder in your Github project.  If you write your answers in Python scripts, put the script files in the same folder as well. If you feel uncertain about your answer, you can test your final codes on Jupyter or IPython command lines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Make a string from the following list, with one one-line of Python code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = ['The' , 'weather' , 'is' , 'rainy' , 'today' , 'and' , 'cold' , 'only' , '22' , 'F.']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot; &quot;.join(mylist)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'The weather is rainy today and cold only 22 F.'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Are tuples mutable objects? Can they be redefined?&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
No. Yes.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; How do you define an empty dictionary?&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;empty_dict = {} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Write a dictionary representation of the following matrix.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}
    0 &amp; 0 &amp; 0 &amp; 1 \\
    2 &amp; 0 &amp; 0 &amp; 0 \\
    0 &amp; 5 &amp; 0 &amp; 0 \\
    0 &amp; 0 &amp; 0 &amp; 3
\end{bmatrix} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;sparseMatrixDict = { (0,3): 1 , (1,0): 2 , (2,1): 5 , (3,3): 3 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/quiz/5-solutions-python-variables-assignment-statements&quot;&gt;Quiz 5: Solutions - Python variables and assignment statements&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 08, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 5: Problems - Python variables and assignment statements]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/quiz/5-problems-python-variables-assignment-statements"/>
  <id>http:/ECL2017S/quiz/5-problems-python-variables-assignment-statements</id>
  <published>2017-03-08T00:00:00-06:00</published>
  <updated>2017-03-08T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims at testing your basic knowledge of Python’s print function, and the how to string manipulation in Python. Don’t forget to push your answers to your remote repository by the end of quiz time. Push your quiz-5 &lt;em&gt;readme.md&lt;/em&gt; file to quiz/5/ folder in your Github project.  If you write your answers in Python scripts, put the script files in the same folder as well. If you feel uncertain about your answer, you can test your final codes on Jupyter or IPython command lines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Make a string from the following list, with one one-line of Python code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = ['The' , 'weather' , 'is' , 'rainy' , 'today' , 'and' , 'cold' , 'only' , '22' , 'F.']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;2. &lt;/strong&gt; Are tuples mutable objects? Can they be redefined?&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; How do you define an empty dictionary?&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Write a dictionary representation of the following matrix.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}
    0 &amp; 0 &amp; 0 &amp; 1 \\
    2 &amp; 0 &amp; 0 &amp; 0 \\
    0 &amp; 5 &amp; 0 &amp; 0 \\
    0 &amp; 0 &amp; 0 &amp; 3
\end{bmatrix} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/quiz/5-problems-python-variables-assignment-statements&quot;&gt;Quiz 5: Problems - Python variables and assignment statements&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 08, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 6: Python - branching and functions]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/6-python-branching-functions"/>
  <id>http:/ECL2017S/lecture/6-python-branching-functions</id>
  <published>2017-03-08T00:00:00-06:00</published>
  <updated>2017-03-08T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains branching statements, how to define functions in Python, and all other important details of functions in Python.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;branching-in-python&quot;&gt;Branching in Python&lt;/h2&gt;
&lt;p&gt;Consider the last problem in &lt;a href=&quot;http:/ECL2017S/homework/4-problems-python-variables-assignment-statements&quot; target=&quot;_blank&quot;&gt;homework 4&lt;/a&gt;, where we defined a dictionary of people names and their roles in our ECL class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;ecl_dict = { 'nicholas boeker'  : 'student'
           , 'bradley bridges'  : 'student'
           , 'sagar dhana'      : 'student' 
           , 'travis driver'    : 'student'
           , 'eric gagliano'    : 'student'
           , 'christian garcia' : 'student'
           , 'matthew goree'    : 'student'
           , 'lucero herrera'   : 'student'
           , 'jake janssen'     : 'student'
           , 'michael langford' : 'student'
           , 'colin lewis'      : 'student'
           , 'mark loveland'    : 'student'
           , 'emilio mendiola'  : 'student'
           , 'kreshel nguyen'   : 'student'
           , 'russell philley'  : 'student'
           , 'caleb phillips'   : 'student'
           , 'joseph robbins'   : 'student'
           , 'bradley smith'    : 'student'
           , 'vivek varier'     : 'assistant'
           , 'amir shahmoradi'  : 'instructor'
           }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose we would like to write a Python script that, when executed, asks the user to input the full name of a person in our class and then outputs on screen, the role of the person in class. To do this, first we should get familiar with Python’s built-in function &lt;code&gt;input()&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;ATTENTION: Python 2 Alert!&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
In Python 2, the corresponding function is &lt;code&gt;raw_input()&lt;/code&gt;. In Python 3, it is now renamed to &lt;code&gt;input()&lt;/code&gt;.
&lt;/blockquote&gt;
&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;ATTENTION: Python 2 Alert!&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        In Python 2, the corresponding function is &lt;code&gt;raw_input()&lt;/code&gt;. In Python 3, it is now renamed to &lt;code&gt;input()&lt;/code&gt;.
    &lt;/div&gt;
&lt;/div&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: input(&quot;\n Please enter the full name of the person: &quot;)

 Please enter the full name of the person: Amir Shahmoradi
Out[11]: 'Amir Shahmoradi'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The function &lt;code&gt;input()&lt;/code&gt; is a Python built-in function that outputs the input string inside parantheses to the output screen, and then waits for the user to enter an input. This function reads a line from input, and converts it to a &lt;strong&gt;string&lt;/strong&gt; (stripping a trailing newline), and returns that. One can also put the user’s input directly into a variable, which is the normal way of using this function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [13]: input_variable = input(&quot;\n Please enter the full name of the person: &quot;)

 Please enter the full name of the person: Amir Shahmoradi

In [14]: print(input
input          input_key      input_variable

In [14]: print(input_variable)
Amir Shahmoradi

In [15]: type(input_variable)
Out[15]: str

In [16]: input_variable = input(&quot;\n Please enter the full name of the person: &quot;)

 Please enter the full name of the person: 1234

In [17]: type(input_variable)   # whatever type the input is, it will be converted to string by Python interpreter
Out[17]: str
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, back to our originally stated problem in the above, we want to write a program that takes in the name of a person from the command line and then tells the user some information about them, depending on their name. To achive this, we need to become familiar with the concept of &lt;strong&gt;branching&lt;/strong&gt; in Python.  Specifically, we can achieve our goal by writing a &lt;code&gt;if-elif&lt;/code&gt; statement in Python as in the following python script.&lt;/p&gt;

&lt;p&gt;The general syntax for &lt;code&gt;if&lt;/code&gt; blocks in python is the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if expression1:     # if expression1 is True
   statement(s)         # execute the required Python statements
elif expression2:   # else if expression2 is True
   statement(s)         # execute the required Python statements
elif expression3:   # else if expression3 is True
   statement(s)         # execute the required Python statements
else:               # else if neither of the above were True
   statement(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the indentations at beginning of each of the statements is necessary, otherwise the Python interpreter will give you a syntax error. However, if it important to note also that the number of indentations is arbitrary.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;ATTENTION!&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    I highly recommend you to be consistent in indentations of your Python code. The whole point of Python is to write a highly-human-readable code. and this requires you to write your code in the most consistent way possible. For example, I recommend you to always use either 2,3, or 4 white-space characters for indentations in your code, and
    &lt;br /&gt;&lt;br /&gt;
    &lt;div style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;AVOID USING &lt;code&gt;tab&lt;/code&gt; CHARACTER AS INDENTATION IN YOUR CODES&lt;/b&gt;
    &lt;/div&gt;
    &lt;br /&gt;
    unless your editor automatically converts it to a pre-specified number of white-space characters. The &lt;code&gt;tab&lt;/code&gt; character can create a huge mess in your Python codes, and some extra work to clean them up. &lt;a href=&quot;http://www.secnetix.de/olli/Python/block_indentation.hawk&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is a good resource to learn more about indentations in Python
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
ecl_dict = { 'nicholas boeker'  : 'student'
           , 'bradley bridges'  : 'student'
           , 'sagar dhana'      : 'student' 
           , 'travis driver'    : 'student'
           , 'eric gagliano'    : 'student'
           , 'christian garcia' : 'student'
           , 'matthew goree'    : 'student'
           , 'lucero herrera'   : 'student'
           , 'jake janssen'     : 'student'
           , 'michael langford' : 'student'
           , 'colin lewis'      : 'student'
           , 'mark loveland'    : 'student'
           , 'emilio mendiola'  : 'student'
           , 'kreshel nguyen'   : 'student'
           , 'russell philley'  : 'student'
           , 'caleb phillips'   : 'student'
           , 'joseph robbins'   : 'student'
           , 'bradley smith'    : 'student'
           , 'vivek varier'     : 'assistant'
           , 'amir shahmoradi'  : 'instructor'
           }
name = input(&quot;\n Please enter the full name of the person: &quot;)
if name in ecl_dict:    # First make sure the name is in our dictionary
    if ecl_dict[name] == 'instructor':
        print( '\nThe name you enetered: {} belongs to the instructor of the ECL course. His office hours are Mondays 5-6 p.m.\n'.format(name) )
    elif ecl_dict[name] == 'assistant':
        print( '\nThe name you enetered: {} belongs to the Teaching Assistant of the ECL course. His office hours are Tuesdays 9-11 a.m.\n'.format(name) )
    elif ecl_dict[name] == 'student':
        print( '\nThe name you enetered: {} belongs to one of the amazing students in our class. You can certainly reach him during the weekly ECL classes on Wednesdays 9-10 a.m.\n'.format(name) )
else:
    print('\nThe name you entered: {} does not correspond to any real person in ECL class. Make sure you are not looking for a ghost, as our class is ghost-free.\n'.format(name) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, if we run the &lt;a href=&quot;http:/ECL2017S/lecture/6/ecl_names.py&quot; target=&quot;_blank&quot;&gt;file&lt;/a&gt; containing this script, we will get something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./ecl_names.py

 Please enter the full name of the person: amir shahmoradi

The name you enetered: amir shahmoradi belongs to the instructor of the ECL course. His office hours are Mondays 5-6 p.m.

$ ./ecl_names.py

 Please enter the full name of the person: Harry Potter

The name you entered: Harry Potter does not correspond to any real person in ECL class. Make sure you are not looking for a ghost, as our class is ghost-free.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Conditional &lt;code&gt;if&lt;/code&gt; statement is the only built-in branching method in Python. However, it can be written in several different sytaxes, each of which can be useful in some circumstances:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; One-line conditional &lt;strong&gt;statement&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if condition: statement
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if sqrt(2) &amp;lt; 2: print('sqrt(2) &amp;lt; 2\nOf course that was obvious!')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sqrt(2) &amp;lt; 2
Of course that was obvious!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; multiple line (as stated above) conditional &lt;strong&gt;statement&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if condition:
    block statements
elif:
    block statements
else:
    block statements
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; Inline conditional &lt;strong&gt;expression&lt;/strong&gt;: This is a particularly useful syntax for conditional value assignments in Python.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;expression1 if condition_is_met else expression2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, instead of writing,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if condition:
    a = value1
else
    a = value2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
one can summarize it all in one line,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = (value1 if condition else value2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the paratheses are not necessary, however, they are recommended for clarity. Here is an example code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;name = input('Input the name: ')
print( 'This person is the ECL instructor' if name == 'amir' else 'This person is not the ECL instructor')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Input the name: amir
This person is the ECL instructor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;non-boolean-conditions-in-if-statements&quot;&gt;Non-boolean conditions in if-statements&lt;/h3&gt;
&lt;p&gt;There is a rather interesting feature of conditions in Python if-statements, that allows the programmer to use a non-boolean variable or value type directly in place of the condition in if-statement. What really happens here is that, Python interpreter converts the non-boolean type to a boolean value, when it occurs in place of an if-statement condition.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 5.6:
    print('The condition in this if statement is automatically converted from float to boolean')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The condition in this if statement is automatically converted from float to boolean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 0.0:
    print('A float value of zero is converted to False')
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not 0.0:
    print('A float value of zero is converted to False')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A float value of zero is converted to False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 0.000000000000000000000000000000000000000000000000000000000000000000001:
    print('Any non-zero float value of any precision is converted to True')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A float value of zero is converted to False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 1.e-323:
    print('Any non-zero float value of any precision is converted to True')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value of any precision is converted to True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 1.e-324: # make sure you don't go beyond computer precision
    print('Any non-zero float value smaller than the computer precision will be set to 0')
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not 1.e-324: # make sure you don't go beyond computer precision
    print('Any non-zero float value smaller than the computer precision will be set to 0')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value smaller than the computer precision will be set to 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if 12:
    print('The same rules also hold for integers.')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The same rules also hold for integers.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if &quot;&quot;:
    print('An empty string is converted to boolean False')
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not &quot;&quot;:
    print('An empty string is converted to boolean False')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;An empty string is converted to boolean False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if &quot; &quot;:
    print('A non-empty string is converted to boolean True')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A non-empty string is converted to boolean True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if []:
    print('An empty list is converted to boolean False')
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not []:
    print('An empty list is converted to boolean False')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;An empty list is converted to boolean False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if [1]:
    print('A non-empty list is converted to boolean True')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A non-empty list is converted to boolean True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not {}:
    print('The same rules also hold for sets and dictionaries.')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The same rules also hold for sets and dictionaries.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if {1:2}:
    print('The same rules also hold for sets and dictionaries.')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The same rules also hold for sets and dictionaries.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if not None:
    print('The keyword None is also equivalent to False.')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The keyword None is also equivalent to False.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;bool(&quot;amir&quot;) # You can always get the boolean-conversion of a value or type using Python's built-in function bool().
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;functions-in-python&quot;&gt;Functions in Python&lt;/h2&gt;

&lt;p&gt;In Python, like most other programming languages, &lt;strong&gt;function&lt;/strong&gt; is a collection of programming statements that can be executed whenever and wherever  requested. Therefore, the definition of function in programming goes far beyond the mathematical definition of function. For example, programming functions can have no input or output.&lt;/p&gt;

&lt;p&gt;In Python, the syntax of a function is like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def function_name(argument_1, argument_2, ..., argument_N)
    python_statment_1
    python_statment_2
    ...
    return output
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, the line beginning with &lt;code&gt;def&lt;/code&gt; is referred to as the &lt;strong&gt;function header&lt;/strong&gt;, and the statements inside the function are called the &lt;strong&gt;function body&lt;/strong&gt;. To use a function, it must be first defined like above, and then called where it is needed inside the code.&lt;br /&gt;
&lt;strong&gt;Example:&lt;/strong&gt;&lt;br /&gt;
Let’s write a Python function that takes in a temperature value in Centigrads and converts it to Fahrenheit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    return (9.0/5)*C + 32

c_temp = 70.7       # The hottest place on Earth, Lut Desert in Iran 
f_temp = c2f(c_temp)

print(&quot;&quot;&quot;
The hottest place on Earth as of 2005 is in the Lut Desert in Iran at {0} degrees Celsius.
This corresponds to a temerature of {1} degrees Farenheiht!
&quot;&quot;&quot;.format(c_temp,c2f(c_temp)) )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The hottest place on Earth as of 2005 is in the Lut Desert in Iran at 70.7 degrees Celsius.
This corresponds to a temerature of 159.26 degrees Farenheiht!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;functions-with-no-input-arguments&quot;&gt;Functions with no input arguments&lt;/h3&gt;

&lt;p&gt;We can define functions that take no input argument, yet do something predefined for us. Consider the following function which gives information about the ECL course, when called.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_ecl_info():
    return &quot;Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. The overarching goal of the course is to introduce Aerospace undergraduate students with the principles of scientific computing, as well as the applications of numerical methods that the students learn in Engineering Computation (ASE 211K), offered parallel to this course. Towards this goal, Python was chosen as default programming language for the first offering of this course, but it can be switched to other languages such as R, MATLAB, Fortran, C++, etc., depending on the future needs of the Aerospace undergraduate program at UT Austin.&quot;

get_ecl_info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. The overarching goal of the course is to introduce Aerospace undergraduate students with the principles of scientific computing, as well as the applications of numerical methods that the students learn in Engineering Computation (ASE 211K), offered parallel to this course. Towards this goal, Python was chosen as default programming language for the first offering of this course, but it can be switched to other languages such as R, MATLAB, Fortran, C++, etc., depending on the future needs of the Aerospace undergraduate program at UT Austin.'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;functions-with-no-output-return-value&quot;&gt;Functions with no output (return value)&lt;/h3&gt;

&lt;p&gt;We can also modify the above function such that it does not return anything specifically.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_ecl_info():
    print( &quot;Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. The overarching goal of the course is to introduce Aerospace undergraduate students with the principles of scientific computing, as well as the applications of numerical methods that the students learn in Engineering Computation (ASE 211K), offered parallel to this course. Towards this goal, Python was chosen as default programming language for the first offering of this course, but it can be switched to other languages such as R, MATLAB, Fortran, C++, etc., depending on the future needs of the Aerospace undergraduate program at UT Austin.&quot; )

get_ecl_info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Engineering Computation Lab (COE111L) is a new course that is offered by the department of Aerospace Engineering and Engineering Mechanics at the University of Texas at Austin, starting Spring 2017. The overarching goal of the course is to introduce Aerospace undergraduate students with the principles of scientific computing, as well as the applications of numerical methods that the students learn in Engineering Computation (ASE 211K), offered parallel to this course. Towards this goal, Python was chosen as default programming language for the first offering of this course, but it can be switched to other languages such as R, MATLAB, Fortran, C++, etc., depending on the future needs of the Aerospace undergraduate program at UT Austin.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In such cases, you may have already noticed that we can readily skip the &lt;code&gt;return&lt;/code&gt; statement. In reality, in such cases, what happens is that Python interpereter adds an invisible &lt;code&gt;return None&lt;/code&gt; statement at the end of the function. &lt;code&gt;None&lt;/code&gt; is a special reserved keyword of Python that represents &lt;strong&gt;nothing&lt;/strong&gt; or &lt;strong&gt;empty data&lt;/strong&gt; in Python. It is almost equivalent to the word &lt;strong&gt;void&lt;/strong&gt; in languages like Java, C, and C++.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_ecl_info():
    print( &quot;Engineering Computation Lab (COE111L) is a new course that is offered at UT Austin.&quot; )
    return None
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_ecl_info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Engineering Computation Lab (COE111L) is a new course that is offered at UT Austin.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you set a variable equal to this function, the value of the variable will be &lt;code&gt;None&lt;/code&gt;, because the function returns nothing on the output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;variable = get_ecl_info()
type(variable)
print(variable)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;NoneType
None
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;functions-with-multiple-input-arguments&quot;&gt;Functions with multiple input arguments&lt;/h3&gt;

&lt;p&gt;Functions can take almost as many input arguments as we wish. Consider the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def power(base,exponent):
    return base**exponent
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;power(2,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;32
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;the-order-of-input-arguments-both-does-and-does-not-matter&quot;&gt;The order of input arguments both does and does not matter!&lt;/h4&gt;

&lt;p&gt;Note that in the previous code, calling the function with the wrong order of input parameters, can lead to a catastrophe and wrng output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;power(5,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, a really cool feature for function input arguments is that, when calling the function, you can also name the argument variable, and if you name them all, then the order by which the arguments appera becomes irrelevant.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;power(exponent=5,base=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;32
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;functions-with-multiple-output-return-values&quot;&gt;Functions with multiple output (return values)&lt;/h3&gt;

&lt;p&gt;Python funcitons can return more than one value. For this purpose, tuple variable types become a handy tool. Recall that making a tuple is as simple as writing a sequence of comma separated values/variable, like the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mytuple = 1, 2
mytuple
type(mytuple)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(1, 2)
tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if you need to write a function that has multiple return value, you can simply return them all in one sequence of comma separated values/variables. For example, suppose a function takes in two numbers, and then outputs the quotient (the result of integer division) and the remainder of the integer division. An example such function would be like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_quotient_remainder(dividend,divisor):
    return divmod(dividend,divisor)

get_quotient_remainder(11,3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(get_quotient_remainder(11,3))  # By default, the output is a tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, the output of this function is a tuple, since we are returning a tuple in the function. But we could also return the output as a list, or any other appropriate format we wish.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_quotient_remainder(dividend,divisor):
    return list(divmod(dividend,divisor))   # convert the output to list before passing it to main program

type(get_quotient_remainder(11,3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also save the output in a variable as well,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_quotient_remainder(dividend,divisor):
    return divmod(dividend,divisor)

result = get_quotient_remainder(dividend=11,divisor=3) # You can also name the input variables to make sure you assign them in the correct order.
print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or save the individual results in separate variables, like,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;quotient, remainder = get_quotient_remainder(dividend=11,divisor=3)
print(quotient, remainder)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or save it in the form of a tuple or list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;[quotient, remainder] = get_quotient_remainder(dividend=11,divisor=3)
print(quotient, remainder)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;functions-with-optional-input-arguments&quot;&gt;Functions with optional input arguments&lt;/h3&gt;

&lt;p&gt;Like many other high-level programming languages, Python allows you to have optional arguments in your input, which you can drop when calling the function. However, an optional argument must have a preassigned value in the function, otherwise dropping the variable at the time of function call will lead to a runtime error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_quotient_remainder(dividend,divisor=10,message=&quot;This is the default message.&quot;):
    print( &quot;divmod({},{}) = &quot;.format(divmod(dividend,divisor)) )
    print( message )
    return divmod(dividend,divisor)

result = get_quotient_remainder(dividend=11,divisor=3) # the optional input argument 'message' is set to its default value.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;divmod(11,3) = (3, 2)
This is the default message.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above function, default the value of optional message argument to &lt;code&gt;&quot;This is the default message.&quot;&lt;/code&gt; since it is not given at the time of calling the function. The function’s &lt;strong&gt;optional input arguments&lt;/strong&gt; whose values are initialized to a default value are more famously known in Python as &lt;strong&gt;keyword arguments&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;ATTENTION:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Note that when the optional arguments are named and assigned a value at the time of function call, then their order of appearance in the function call does not matter. However, keep in mind that the **ordinary** or **positional** arguments should all appear in order and first, before the keyword arguments appear. However, the keyword arguments can appear in any order one may wish.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For the above example function, the following function calls would be valid,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_quotient_remainder(dividend=11)
get_quotient_remainder(11,divisor=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
and the following would be invalid,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_quotient_remainder(divisor=3,11,message=&quot;A new message.&quot;)   # This is invalid
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-36-27658299aa76&amp;gt;&quot;, line 1
    get_quotient_remainder(divisor=3,11,message=&quot;A new message.&quot;)   # This is invalid, the order is incorrect.
                                    ^
SyntaxError: positional argument follows keyword argument
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_quotient_remainder(11,divisor=3,&quot;A new message.&quot;)   # Also invalid, all arguments after the first named argument must appear with name as well.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-37-1643cc8d6910&amp;gt;&quot;, line 1
    get_quotient_remainder(11,divisor=3,&quot;A new message.&quot;)
                                       ^
SyntaxError: positional argument follows keyword argument
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;ATTENTION:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Note that the keyword arguments must be always listed after the positional arguments in the function definition. Note also, as in the above examples, that the sequence of input arguments **at the time of function call** does not matter, so long as the names of all positional and keyword arguments are provided in the function call.
&lt;/blockquote&gt;

&lt;p&gt;Note also, that the number input arguments at the time of call must be exactly the same as the number of arguments in the function definition.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_quotient_remainder(11,3,&quot;A new message.&quot;,)  # THis works even though, there is an extra comma at the end of the arguments of the function call.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;divmod(11,3) = (3, 2)
A new message.

(3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;local-and-global-variables-in-functions&quot;&gt;Local and global variables in functions&lt;/h3&gt;
&lt;p&gt;Variables that are defined insde of a function, are by default invisible outside the function scope. For example, let’s consider  Let us reconsider the original function defined at the beginning of the lecture, which takes in a temperature value in Centigrads and converts it to Fahrenheit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    converted_value = (9.0/5)*C + 32
    return converted_value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, if the variable &lt;code&gt;converted_value&lt;/code&gt; is called outside the function, it will result in a syntax error since it is undefined outside the function scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;c2f(70)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;158.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;converted_value
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;NameError                                 Traceback (most recent call last)
&amp;lt;ipython-input-42-1aa75d9b79c4&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 converted_value

NameError: name 'converted_value' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    Local variables are created inside a function and destroyed when the program control goes back to the main code, outside the function.
&lt;/blockquote&gt;

&lt;p&gt;Now suppose we had the following script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    converted_value = (9.0/5)*C + 32
    print('Value of C inside function: {}'.format(C))
    return converted_value

C = 70
c2f(50)
print('Value of C outside function: {}'.format(C))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Value of C inside function: 50
Value of C outside function: 70
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clearly, the two values are not the same, even though the variable names are the same. But, if you really want to access the global variable &lt;code&gt;C&lt;/code&gt; inside of the function, then you can use Python’s built-in function &lt;code&gt;globals()&lt;/code&gt; which returns a &lt;strong&gt;dictionary&lt;/strong&gt; of all global variables in the main program, and then use the keyword &lt;code&gt;'C'&lt;/code&gt; to get its value inside the function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(globals())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;globals()['C']
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;70
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the same function as above, but with the global variable value would give you,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    converted_value = (9.0/5)*globals()['C'] + 32
    print('Value of C inside function: {}'.format(globals()['C']))
    return converted_value

C = 70
c2f(50)
print('Value of C outside function: {}'.format(C))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Value of C inside function: 70
Value of C outside function: 70
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    As a general rule, when there are &lt;b&gt;several variables with the same name&lt;/b&gt;, Python interpreter &lt;b&gt;first&lt;/b&gt; tries to look up the variable name among the &lt;b&gt;local variables&lt;/b&gt;, &lt;b&gt;then&lt;/b&gt; there is a search among &lt;b&gt;global variables&lt;/b&gt;, and &lt;b&gt;finally&lt;/b&gt; among built-in &lt;b&gt;Python functions&lt;/b&gt;.  
&lt;/blockquote&gt;

&lt;p&gt;In order to declare a variable inside the function global, use the keyword &lt;code&gt;global&lt;/code&gt; as in the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = 20; b = -2.5 # global variables
def f1(x):
    a = 21 # this is a new local variable
    return a*x + b

print (a) # yields 20

def f2(x):
    global a
    a = 21 # the global a is changed
    return a*x + b

f1(3); print (a) # 20 is printed
f2(3); print (a) # 21 is printed
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;20
20
21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in function &lt;code&gt;f1&lt;/code&gt;, $a = 21$ creates a local variable a. One may think the global &lt;code&gt;a&lt;/code&gt; has changed, but it does not happen. However, in the second function &lt;code&gt;f2&lt;/code&gt;, the globally declared variable is assigned a new value and therefore, the global value of &lt;code&gt;a&lt;/code&gt; outside the function also changes. Test this script yourself and see what you get.&lt;/p&gt;

&lt;blockquote&gt;
    Be careful with using global variables inside your functions, because if you do not define them prior to using the function, then you get a runtime error.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
Here is an example of the error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def f2(x):
    global a    # a must be defined outside the function prior to function call
    return a*x + b

f2(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;NameError                                 Traceback (most recent call last)
&amp;lt;ipython-input-55-ea6f63a0f6d6&amp;gt; in &amp;lt;module&amp;gt;()
    3     return a*x + b
    4 
----&amp;gt; 5 f2(3)

&amp;lt;ipython-input-55-ea6f63a0f6d6&amp;gt; in f2(x)
    1 def f2(x):
    2     global a    # a must be defined outside the function prior to function call
----&amp;gt; 3     return a*x + b
    4 
    5 f2(3)

NameError: name 'a' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;avoid-function-side-effects&quot;&gt;Avoid function side-effects&lt;/h4&gt;

&lt;p&gt;A function in which the value of a global variable is changed while the global variable is not the intended output of the function, is called a &lt;strong&gt;function with side-effects&lt;/strong&gt;. Here is an example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def f2(x):
    global a
    a = 21 # the global a is changed
    return a*x + b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In general, any &lt;em&gt;lasting effect&lt;/em&gt; that occurs in a function, but not through its &lt;code&gt;return&lt;/code&gt; value, is called a &lt;strong&gt;side effect&lt;/strong&gt;. There are three ways to have side effects:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Changing the value of a mutable object.&lt;/li&gt;
  &lt;li&gt;Changing the binding (the storage space) of a global variable.&lt;/li&gt;
  &lt;li&gt;Printing out a value. This doesn’t change any objects or variable bindings, but it does have a potential lasting effect outside the function execution, because a person might see the output and be influenced by it.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
    In general, avoid defining functions that have side-effects. In large codes and projects, side-effects can create complex semantic errors and become a hurdle for optimization and code debugging. 
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pythons-built-in-functions&quot;&gt;Python’s built-in functions&lt;/h3&gt;

&lt;p&gt;Python has a number of built-in functions, which can be handy. &lt;a href=&quot;https://docs.python.org/3/library/functions.html&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is a list of Python’s built-in functions along with a description of what they do.&lt;/p&gt;

&lt;h3 id=&quot;function-docstring&quot;&gt;function docstring&lt;/h3&gt;

&lt;p&gt;There is a convention in Python to insert a documentation string right after the &lt;code&gt;def&lt;/code&gt; line of the function definition (the function header). The documentation string, known as a &lt;strong&gt;doc string&lt;/strong&gt; or &lt;strong&gt;docstring&lt;/strong&gt;, should contain a short description of the purpose of the function and explain what the different arguments and return values are. Doc strings are usually enclosed in triple double quotes &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt;, which allow the string to span several lines.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    &quot;&quot;&quot;
    This function converts Celsius degrees (C) to Fahrenheit.
    Uses global variable C.
    &quot;&quot;&quot;
    converted_value = (9.0/5)*globals()['C'] + 32
    print('Value of C inside function: {}'.format(globals()['C']))
    return converted_value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The docstring is then stored in &lt;code&gt;__doc__&lt;/code&gt; attribute of the function, and can be called like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;c2f.__doc__
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'\n    This function converts Celsius degrees (C) to Fahrenheit.\n    Uses global variable C.\n    '
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’d like to get the formatted docstring, use Python’s &lt;code&gt;help()&lt;/code&gt; function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;help(c2f)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on function c2f in module __main__:

c2f(C)
    This function converts Celsius degrees (C) to Fahrenheit.
    Uses global variable C.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One can also use &lt;code&gt;&quot;&lt;/code&gt; in place of &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt;, although less conventional. But then for multiple lines of docstring, one has to use line continuation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def c2f(C):
    &quot;\
    This function converts Celsius degrees (C) to Fahrenheit.\
    Uses global variable C.\
    &quot;
    converted_value = (9.0/5)*globals()['C'] + 32
    print('Value of C inside function: {}'.format(globals()['C']))
    return converted_value
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
    Note that the docstring must appear before any statement in the function body.
&lt;/blockquote&gt;

&lt;h3 id=&quot;functions-as-input-arguments-to-functions&quot;&gt;Functions as input arguments to functions&lt;/h3&gt;

&lt;p&gt;In happens frequently in scientific programming, that a function needs to use another arbitrary function provided by the user to perform some specific tasks with it inside the function. For example, programs doing calculus frequently need to have functions as arguments in functions. For example,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a Python function that finds the root of a mathematical function, given as input argument.&lt;/li&gt;
  &lt;li&gt;a Python function that differentiates of a mathematical function, given as input argument.&lt;/li&gt;
  &lt;li&gt;a Python function that integrates a mathematical function, given as input argument.&lt;/li&gt;
  &lt;li&gt;a Python function that solves a mathematical differential equation, given as input argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In such cases, Python functions need to have the mathematical function as an input argument with some name(e.g., &lt;code&gt;func&lt;/code&gt;). Like Fortran, this is straightforward in Python and hardly needs any explanation, but in most other languages special constructions must be used for transferring a function to another function as argument. For example, suppose we want to compute numerically the second-derivative of a user given mathematical function,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;func&lt;/code&gt; input argument is like any other argument, i.e., a name for an object, here a function
object that we can call as we normally call functions. An an application, suppose we want to calculate the second derivative of a quadratic function $g(x)$ of the following form at $x=2$,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r

def g(x):
    return x**2 + 4.0*x + 1.0

x = 2
diff2nd_g = diff2nd(g, x)
print ( &quot;g’’(x=%f)=%f&quot; % (x, diff2nd_g) )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;g’’(x=2.000000)=2.001954
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;function-composition&quot;&gt;Function composition&lt;/h3&gt;

&lt;p&gt;The ability to call one function from within another function is called &lt;strong&gt;composition&lt;/strong&gt;. Suppose we have a function &lt;code&gt;distance&lt;/code&gt; that calculates the distance between two points on a 2D plane. and another function that takes in a value for radius, and then calculates the corresponding area for that radius.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def distance(x1, y1, x2, y2):
    from math import sqrt
    return sqrt( (x2-x1)**2 + (y2-y1)**2 )

def area(x1, y1, x2, y2):
    from math import pi
    return pi*distance(x1, y1, x2, y2)**2

area(0.0,0.0,0.0,1.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3.141592653589793
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;recursive-functions&quot;&gt;Recursive functions&lt;/h4&gt;

&lt;p&gt;Now, note that the function being called inside the other, does not necessarily have to be a different function. It could be the same function calling itself repeatedly, &lt;strong&gt;until a condition is met&lt;/strong&gt; (otherwise this would be an endless function call to itself for eternity). For example, a function that would calculate the factorial of an input integer would be like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def factorial(n):
    if isinstance(n,float):
        print('The input number {} is not an integer!'.format(n))
        return None
    if n==0:
        return 1
    elif n==1:
        return n
    else:
        return n*factorial(n-1)

factorial(4)
factorial(4.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;24
The input number 4.5 is not an integer!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;lambda-functions&quot;&gt;Lambda functions&lt;/h3&gt;

&lt;p&gt;There is a quick one-line construction of functions that is often convenient to make Python code compact. For example, recall how we defined &lt;code&gt;g(x)&lt;/code&gt; in the &lt;a href=&quot;#functions-as-input-arguments-to-functions&quot;&gt;example above&lt;/a&gt;. Here is a compact version of it,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;g = lambda x: x**2 + 4.0*x + 1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This code is equivalent to the original code that wrote before,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def g(x):
    return x**2 + 4.0*x + 1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In general, a function of the form,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def g(arg1, arg2, arg3, ...):
    return expression
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
can be converted to the compact form,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;g = lambda arg1, arg2, arg3, ...: expression
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Lambda functions are very useful for defining simple functions in the argument list that is passed to another function. For example, recall our &lt;code&gt;diff2nd&lt;/code&gt; function that we defined in the above,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r

def g(x):
    return x**2 + 4.0*x + 1.0

x = 2
diff2nd_g = diff2nd(g, x)
print ( &quot;g’’(x=%f)=%f&quot; % (x, diff2nd_g) )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;g’’(x=2.000000)=2.001954
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now instead of defining &lt;code&gt;g(x)&lt;/code&gt; separately when calling &lt;code&gt;diff2nd&lt;/code&gt; function, we can use the following compact form,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def diff2nd(func, x, h=1E-6):
    r = (func(x-h) - 2*func(x) + func(x+h))/float(h*h)
    return r

x = 2
print ( &quot;g’’(x=%f)=%f&quot; % (x, diff2nd(lambda x: x**2 + 4.0*x + 1.0, x) ) )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;g’’(x=2.000000)=2.001954
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lambda functions may also take &lt;strong&gt;keyword arguments&lt;/strong&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;d2 = diff2nd(lambda t, A=1, a=0.5: -a*2*t*A*exp(-a*t**2), 1.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This format is particularly useful, if the lambda function contains a constant that is repeatedly used in the expression of the function, the value of which may need to be updated in future runs of the code, or later on in the same code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/6-python-branching-functions&quot;&gt;Lecture 6: Python - branching and functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 08, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 5: Solutions - Python branching and functions]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/5-solutions-python-branching-functions"/>
  <id>http:/ECL2017S/homework/5-solutions-python-branching-functions</id>
  <published>2017-03-08T00:00:00-06:00</published>
  <updated>2017-03-08T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;5-problems-python-branching-functions.html&quot; target=&quot;_blank&quot;&gt;Homework 5: Problems - Python branching and functions&lt;/a&gt;.&lt;/p&gt;

&lt;!--
--&gt;
&lt;p&gt;The following figure illustrates the grade distribution for this homework.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/homework/gradeDist/gradeHistHomework5.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This homework aims at giving you some experience with variables in Python and their syntax, also some experience with using Lists and Dictionaries in Python. Write your Python scripts with the corresponding &lt;code&gt;*.py&lt;/code&gt; file names, and add a readme.md file in HW 5 folder of your project if you need to add any additional explanation (Don’t forget to use markdown syntax highlight in your readme file, if needed).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; In mathematics, the Fibonacci numbers are the numbers in the following integer sequence, called the Fibonacci sequence, that are characterized by the fact that every number after the first two is the sum of the two preceding ones:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;0,~1,~1,~2,~3,~5,~8,~13,~21,~34,~55,~89,~144,~\dots&lt;/script&gt;

&lt;p&gt;with the following sequence equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
     Fib(n) &amp;=&amp; Fib(n-1) + Fib(n-2) ~, \\
     Fib(0) &amp;=&amp; 0 ~, \\
     Fib(1) &amp;=&amp; 1 ~.
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a Python function named &lt;code&gt;fib&lt;/code&gt; that takes in an input argument which should be integer number &lt;code&gt;n&lt;/code&gt;, and then calculates the $n^{th}$ number in the Fibonacci sequence and outputs it on the screen. Also, if the input argument is not a non-negative integer, it prints an error message on the screen and asks the user to re-enter a non-negative integer number. Also, when it is done with finding the requested Fibonacci number, it asks again the user to either input a new non-negative integer, or enter ‘stop’ to end the function, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; fib('amir')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The input argument amir is not a non-negative integer!
Please enter a non-negative integer: -123
The input argument -123 is not a non-negative integer!
Please enter a non-negative integer: 12.4
The input argument 12.4 is not a non-negative integer!
Please enter a non-negative integer: 0
Fib(0) = 0
Please enter another non-negative integer or type stop: 1
Fib(1) = 1
Please enter another non-negative integer or type stop: 2
Fib(2) = 1
Please enter another non-negative integer or type stop: 3
Fib(3) = 2
Please enter another non-negative integer or type stop: 4
Fib(4) = 3
Please enter another non-negative integer or type stop: 5
Fib(5) = 5
Please enter another non-negative integer or type stop: 6
Fib(6) = 8
Please enter another non-negative integer or type stop: 7
Fib(7) = 13
Please enter another non-negative integer or type stop: 8
Fib(8) = 21
Please enter another non-negative integer or type stop: 9
Fib(9) = 34
Please enter another non-negative integer or type stop: 10
Fib(10) = 55
Please enter another non-negative integer or type stop: 11
Fib(11) = 89
Please enter another non-negative integer or type stop: 12
Fib(12) = 144
Please enter another non-negative integer or type stop: stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First write a function &lt;code&gt;fibo(n_int)&lt;/code&gt; that finds the requested Fibonacci number for you, given a non-negative integer input (for example, name it &lt;code&gt;n_int&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Then put this function &lt;strong&gt;inside another Python function &lt;code&gt;fib(n)&lt;/code&gt;&lt;/strong&gt; that checks the type of the input argument &lt;code&gt;n&lt;/code&gt; and prints the appropriate error message as in the above and then asks the user to enter another number (and then again checks for its type to be integer).&lt;/li&gt;
  &lt;li&gt;Then if this number is an integer, this function &lt;code&gt;fib(n)&lt;/code&gt; passes the integer number &lt;code&gt;n&lt;/code&gt; to the function &lt;code&gt;fibo(n_int)&lt;/code&gt; which is inside of itself (it is a &lt;strong&gt;nested function&lt;/strong&gt;), in order to get the requested Fibonacci number.&lt;/li&gt;
  &lt;li&gt;Finally, once the requested Fibonaccy number is obtained, it prints the number value with the requested format as in the above example, AND then asks again the user to input a new non-negative integer, or simply type &lt;code&gt;stop&lt;/code&gt; to stop the function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that, if you call the function as &lt;code&gt;fib('stop')&lt;/code&gt; in the Python interpreter, it should return nothing to you, just like the following example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;fib('stop')

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
I highly recommend you to write your function in Jupyter notebook, test it there, and then get the results for the same input arguments as in the above example (a string, negative integer, float, and n=1,…,12, and also ‘stop’) and download all of the notebook as a Markdown file, and put it in your repository folder for this homework. Name the notebook, &lt;code&gt;fib.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also note that, you don’t need to know or use anything beyond Python function syntax, Python built-in functions and methods (like &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;isdigit()&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;str()&lt;/code&gt;, &lt;code&gt;int()&lt;/code&gt;, …), and Python if-blocks.&lt;/p&gt;
&lt;blockquote&gt;
    I recommend you to use Jupyter notebook on your device, since the online version of notebook, can be interrupted repeatedly because of internet connection.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def fib(n):

    def fibo(n_int):
        if n_int==0: return 0
        elif n_int==1: return 1
        else:
            return fibo(n_int-1) + fibo(n_int-2)

    if n=='stop':
        return None
    elif not str(n).isdigit():    # Make sure n is integer, if not then
        print( 'The input argument {} is not a non-negative integer!'.format(n) )    
        n = input(&quot;Please enter an integer: &quot;)  # Note that n is read as string!
        return fib(n)
    else:
        n=int(n) 
        print('Fib({}) = {}'.format(n,fibo(n)))
        n = input(&quot;Please enter another integer or type stop: &quot;)  # Note that n is read as string!
        return fib(n)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Branching…, the Pythonic way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Change the &lt;strong&gt;first&lt;/strong&gt; if statement in the following script to an equivalent &lt;strong&gt;one-line&lt;/strong&gt; if-expression. Test the resulting new script, and make sure it behaves as the original,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)

answer_status = 'wrong'
if abbr == 'ECL':
    answer_status = 'correct'

if answer_status=='correct':
    print('You answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;(B)&lt;/strong&gt; Can you acheive the same goal as in &lt;strong&gt;(A)&lt;/strong&gt; without if-expression or block, but instead using only tuple notation? Explain why your solution works.&lt;/p&gt;

&lt;p&gt;Modify the if block and the print statements that are only in the last part of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if answer_status=='correct':
    print('You answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to write a single-line Python statement that only uses &lt;code&gt;print&lt;/code&gt; and tuple or list notations, to perform the exact same task as the original print and if-block statement.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)

answer_status = 'correct' if abbr == 'ECL' else 'wrong'

if answer_status=='correct':
    print('You answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;(B)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)

answer_status = ('wrong','correct')[abbr=='ECL']

if answer_status=='correct':
    print('You answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;(C)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)

answer_status = ('wrong','correct')[abbr=='ECL']

print( ('wrong buddy...try again','You answer is correct!')[answer_status=='correct'] )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Write a &lt;strong&gt;single-line&lt;/strong&gt; Python code that reads a string containing comma-separated first-name, last-name, and the city in which a person lives from the Python interpreter command line, and simultaneouly, in the same line of Python code, removes all white-space characters from the input string, and converts all letters of the input variables to lower-case, and converts the string to a tuple and saves in a tuple &lt;code&gt;(first,last,city)&lt;/code&gt;, such that, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Enter the first name, last name, and the city of the person (comma-separated): Amir, Shahmoradi  ,  Austin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
would give,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(first,last,city)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;('amir', 'shahmoradi', 'austin')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; Use &lt;code&gt;input&lt;/code&gt; function for this purpose. The output of &lt;code&gt;input&lt;/code&gt; is a string, which can be manipulated repeatedly on the same line, using multiple string methods that you learned about in the previous lectures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; As discuss in our lecture 6, the one-line if-expression syntax does not provide a functionality like &lt;code&gt;elif&lt;/code&gt; keyword as in the if-statement syntax. Our goal here is to learn how to convert a Python if-statement containing &lt;code&gt;elif&lt;/code&gt; to a one-line Python expression. Convert the following if-block to a single line if-expression. Modify the if-block inside the following function to one-line if-expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def dummy(i):
    if i==0:
        j=0
    elif i==1:
        j=1
    elif i==2:
        j=2
    else: j = 'j is not in [0,1,2]' 
    return j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(first,last,univ) = ((input('Enter the first name, last name, and the city of the person (comma-separated): ').replace(' ','')).lower()).split(',')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;(B)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def dummy(i):
    j = 0 if i==0 else (1 if i==1 else (2 if i==2 else 'j is not in [0,1,2]') )
    return j
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; 
An arbitrary triangle can be described by the coordinates of its three vertices: $(x1,y1),(x2,y2),(x3,y3)$, numbered in a counterclockwise direction. The area of the triangle is given by the formula,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \frac{1}{2} \bigg| x2y3 - x3y2 - x1y3 + x3y1 + x1y2 - x2y1j \bigg|&lt;/script&gt;

&lt;p&gt;Write a function &lt;code&gt;get_triangle_area(vertices)&lt;/code&gt; that returns the area of a triangle whose vertices are specified by the argument vertices, which is a nested list of the vertex coordinates. Test your implementation with the following test function, which also illustrates how the &lt;code&gt;get_triangle_area&lt;/code&gt; function works.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def test_get_triangle_area():
    &quot;&quot;&quot;
    Verify the area of a triangle with vertex coordinates
    (0,0), (1,0), and (0,2).
    &quot;&quot;&quot;
    v1 = (0,0); v2 = (1,0); v3 = (0,2)
    vertices = [v1, v2, v3]
    expected = 1
    computed = get_triangle_area(vertices)
    tol = 1E-14
    success = abs(expected - computed) &amp;lt; tol
    msg = 'computed area=%g != %g (expected)' % (computed, expected)
    assert success, msg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_triangle_area(vert):
    area = 0.5 * abs(vert[1][0] * vert[2][1] - vert[2][0] * vert[1][1] -
                     vert[0][0] * vert[2][1] + vert[2][0] * vert[0][1] +
                     vert[0][0] * vert[1][1] - vert[1][0] * vert[0][1])
    return area
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Write a logical (boolean) function named &lt;code&gt;is_prime(n)&lt;/code&gt; that takes in an integer number &lt;code&gt;n&lt;/code&gt;, and finds whether it is a Prime number or not. Example output is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;is_prime(n=23)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;is_prime(12)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you do not need and don’t have to use &lt;code&gt;for-loop&lt;/code&gt; for this problem (we have not yet discussed loops in our class!). All of it can be done using recursive function concept.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def is_prime(n):
    
    is_prime = True
    
    def is_divisible(n,divisor):
        if n&amp;lt;(divisor-1)*divisor: return False
        if n%divisor==0: return True
        else:
            divisor += 1
            return is_divisible(n,divisor)

    if is_divisible(n,divisor=2): is_prime=False
    return is_prime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/5-solutions-python-branching-functions&quot;&gt;Homework 5: Solutions - Python branching and functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 08, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 5: Problems - Python branching and functions]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/homework/5-problems-python-branching-functions"/>
  <id>http:/ECL2017S/homework/5-problems-python-branching-functions</id>
  <published>2017-03-08T00:00:00-06:00</published>
  <updated>2017-03-08T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This homework aims at giving you some experience with variables in Python and their syntax, also some experience with using Lists and Dictionaries in Python. Write your Python scripts with the corresponding &lt;code&gt;*.py&lt;/code&gt; file names, and add a readme.md file in HW 5 folder of your project if you need to add any additional explanation (Don’t forget to use markdown syntax highlight in your readme file, if needed).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; In mathematics, the Fibonacci numbers are the numbers in the following integer sequence, called the Fibonacci sequence, that are characterized by the fact that every number after the first two is the sum of the two preceding ones:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;0,~1,~1,~2,~3,~5,~8,~13,~21,~34,~55,~89,~144,~\dots&lt;/script&gt;

&lt;p&gt;with the following sequence equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
     Fib(n) &amp;=&amp; Fib(n-1) + Fib(n-2) ~, \\
     Fib(0) &amp;=&amp; 0 ~, \\
     Fib(1) &amp;=&amp; 1 ~.
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a Python function named &lt;code&gt;fib&lt;/code&gt; that takes in an input argument which should be integer number &lt;code&gt;n&lt;/code&gt;, and then calculates the $n^{th}$ number in the Fibonacci sequence and outputs it on the screen. Also, if the input argument is not a non-negative integer, it prints an error message on the screen and asks the user to re-enter a non-negative integer number. Also, when it is done with finding the requested Fibonacci number, it asks again the user to either input a new non-negative integer, or enter ‘stop’ to end the function, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; fib('amir')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The input argument amir is not a non-negative integer!
Please enter a non-negative integer: -123
The input argument -123 is not a non-negative integer!
Please enter a non-negative integer: 12.4
The input argument 12.4 is not a non-negative integer!
Please enter a non-negative integer: 0
Fib(0) = 0
Please enter another non-negative integer or type stop: 1
Fib(1) = 1
Please enter another non-negative integer or type stop: 2
Fib(2) = 1
Please enter another non-negative integer or type stop: 3
Fib(3) = 2
Please enter another non-negative integer or type stop: 4
Fib(4) = 3
Please enter another non-negative integer or type stop: 5
Fib(5) = 5
Please enter another non-negative integer or type stop: 6
Fib(6) = 8
Please enter another non-negative integer or type stop: 7
Fib(7) = 13
Please enter another non-negative integer or type stop: 8
Fib(8) = 21
Please enter another non-negative integer or type stop: 9
Fib(9) = 34
Please enter another non-negative integer or type stop: 10
Fib(10) = 55
Please enter another non-negative integer or type stop: 11
Fib(11) = 89
Please enter another non-negative integer or type stop: 12
Fib(12) = 144
Please enter another non-negative integer or type stop: stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First write a function &lt;code&gt;fibo(n_int)&lt;/code&gt; that finds the requested Fibonacci number for you, given a non-negative integer input (for example, name it &lt;code&gt;n_int&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Then put this function &lt;strong&gt;inside another Python function &lt;code&gt;fib(n)&lt;/code&gt;&lt;/strong&gt; that checks the type of the input argument &lt;code&gt;n&lt;/code&gt; and prints the appropriate error message as in the above and then asks the user to enter another number (and then again checks for its type to be integer).&lt;/li&gt;
  &lt;li&gt;Then if this number is an integer, this function &lt;code&gt;fib(n)&lt;/code&gt; passes the integer number &lt;code&gt;n&lt;/code&gt; to the function &lt;code&gt;fibo(n_int)&lt;/code&gt; which is inside of itself (it is a &lt;strong&gt;nested function&lt;/strong&gt;), in order to get the requested Fibonacci number.&lt;/li&gt;
  &lt;li&gt;Finally, once the requested Fibonaccy number is obtained, it prints the number value with the requested format as in the above example, AND then asks again the user to input a new non-negative integer, or simply type &lt;code&gt;stop&lt;/code&gt; to stop the function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that, if you call the function as &lt;code&gt;fib('stop')&lt;/code&gt; in the Python interpreter, it should return nothing to you, just like the following example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;fib('stop')

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
I highly recommend you to write your function in Jupyter notebook, test it there, and then get the results for the same input arguments as in the above example (a string, negative integer, float, and n=1,…,12, and also ‘stop’) and download all of the notebook as a Markdown file, and put it in your repository folder for this homework. Name the notebook, &lt;code&gt;fib.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also note that, you don’t need to know or use anything beyond Python function syntax, Python built-in functions and methods (like &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;isdigit()&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;str()&lt;/code&gt;, &lt;code&gt;int()&lt;/code&gt;, …), and Python if-blocks.&lt;/p&gt;
&lt;blockquote&gt;
    I recommend you to use Jupyter notebook on your device, since the online version of notebook, can be interrupted repeatedly because of internet connection.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Branching…, the Pythonic way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Change the &lt;strong&gt;first&lt;/strong&gt; if statement in the following script to an equivalent &lt;strong&gt;one-line&lt;/strong&gt; if-expression. Test the resulting new script, and make sure it behaves as the original,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the three letter abbreviation of this course? &quot;)

answer_status = 'wrong'
if abbr == 'ECL':
    answer_status = 'correct'

if answer_status=='correct':
    print('You answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;(B)&lt;/strong&gt; Can you acheive the same goal as in &lt;strong&gt;(A)&lt;/strong&gt; without if-expression or block, but instead using only tuple notation? Explain why your solution works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; Modify the if block and the print statements that are only in the last part of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if answer_status=='correct':
    print('You answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to write a single-line Python statement that only uses &lt;code&gt;print&lt;/code&gt; and tuple or list notations, to perform the exact same task as the original print and if-block statement.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Write a &lt;strong&gt;single-line&lt;/strong&gt; Python code that reads a string containing comma-separated first-name, last-name, and the city in which a person lives from the Python interpreter command line, and simultaneouly, in the same line of Python code, removes all white-space characters from the input string, and converts all letters of the input variables to lower-case, and converts the string to a tuple and saves in a tuple &lt;code&gt;(first,last,city)&lt;/code&gt;, such that, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Enter the first name, last name, and the city of the person (comma-separated): Amir, Shahmoradi  ,  Austin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
would give,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(first,last,city)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;('amir', 'shahmoradi', 'austin')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; Use &lt;code&gt;input&lt;/code&gt; function for this purpose. The output of &lt;code&gt;input&lt;/code&gt; is a string, which can be manipulated repeatedly on the same line, using multiple string methods that you learned about in the previous lectures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; As discuss in our lecture 6, the one-line if-expression syntax does not provide a functionality like &lt;code&gt;elif&lt;/code&gt; keyword as in the if-statement syntax. Our goal here is to learn how to convert a Python if-statement containing &lt;code&gt;elif&lt;/code&gt; to a one-line Python expression. Convert the following if-block to a single line if-expression. Modify the if-block inside the following function to one-line if-expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def dummy(i):
    if i==0:
        j=0
    elif i==1:
        j=1
    elif i==2:
        j=2
    else: j = 'j is not in [0,1,2]' 
    return j
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; 
An arbitrary triangle can be described by the coordinates of its three vertices: $(x1,y1),(x2,y2),(x3,y3)$, numbered in a counterclockwise direction. The area of the triangle is given by the formula,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \frac{1}{2} \bigg| x2y3 - x3y2 - x1y3 + x3y1 + x1y2 - x2y1j \bigg|&lt;/script&gt;

&lt;p&gt;Write a function &lt;code&gt;get_triangle_area(vertices)&lt;/code&gt; that returns the area of a triangle whose vertices are specified by the argument vertices, which is a nested list of the vertex coordinates. Test your implementation with the following test function, which also illustrates how the &lt;code&gt;get_triangle_area&lt;/code&gt; function works.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def test_get_triangle_area():
    &quot;&quot;&quot;
    Verify the area of a triangle with vertex coordinates
    (0,0), (1,0), and (0,2).
    &quot;&quot;&quot;
    v1 = (0,0); v2 = (1,0); v3 = (0,2)
    vertices = [v1, v2, v3]
    expected = 1
    computed = get_triangle_area(vertices)
    tol = 1E-14
    success = abs(expected - computed) &amp;lt; tol
    msg = 'computed area=%g != %g (expected)' % (computed, expected)
    assert success, msg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Write a logical (boolean) function named &lt;code&gt;is_prime(n)&lt;/code&gt; that takes in an integer number &lt;code&gt;n&lt;/code&gt;, and finds whether it is a Prime number or not. Example output is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;is_prime(n=23)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;is_prime(12)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you do not need and don’t have to use &lt;code&gt;for-loop&lt;/code&gt; for this problem (we have not yet discussed loops in our class!). All of it can be done using recursive function concept.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/homework/5-problems-python-branching-functions&quot;&gt;Homework 5: Problems - Python branching and functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 08, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 4: Solutions - Python values, variables, types]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/quiz/4-solutions-python-values-variables-types"/>
  <id>http:/ECL2017S/quiz/4-solutions-python-values-variables-types</id>
  <published>2017-03-01T00:00:00-06:00</published>
  <updated>2017-03-01T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;4-problems-python-values-variables-types.html&quot; target=&quot;_blank&quot;&gt;Quiz 4: Problems - Python values, variables, types&lt;/a&gt;.&lt;/p&gt;

&lt;!--
--&gt;
&lt;p&gt;The following figure illustrates the grade distribution for this quiz.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ECL2017S/quiz/gradeDist/gradeHistQuiz4.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Python’s print function, and the how to string manipulation in Python.&lt;br /&gt;
Don’t forget to push your answers to your remote repository by the end of quiz time. Push your quiz-4 &lt;em&gt;readme.md&lt;/em&gt; file to quiz/4/ folder in your Github project.  If you write your answers in Python scripts, put the script files in the same folder as well.&lt;br /&gt;
If you feel uncertain about your answer, you can test your final codes on Jupyter or IPython command lines.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that prints your full name 5 times, each on a separate line.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('Amir Shahmoradi\n'*5)
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Amir Shahmoradi
 Amir Shahmoradi
 Amir Shahmoradi
 Amir Shahmoradi
 Amir Shahmoradi
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that applies the relevant Python string manipulator methods to this string,&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code&gt;Python Is Great For String Manipulation.
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;and transforms it to the following string and and prints it on screen,&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;.noitalupinaMgnirtSroFtaerGsInohtyP
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print( &quot;Python Is Great For String Manipulation.&quot;.replace(' ','')[::-1] )
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;.noitalupinaMgnirtSroFtaerGsInohtyP
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name the three major types of programming errors.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
syntax, runtime, and semantic errors.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/quiz/4-solutions-python-values-variables-types&quot;&gt;Quiz 4: Solutions - Python values, variables, types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 01, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 4: Problems - Python values, variables, types]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/quiz/4-problems-python-values-variables-types"/>
  <id>http:/ECL2017S/quiz/4-problems-python-values-variables-types</id>
  <published>2017-03-01T00:00:00-06:00</published>
  <updated>2017-03-01T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims at testing your basic knowledge of Python’s print function, and the how to string manipulation in Python. Don’t forget to push your answers to your remote repository by the end of quiz time. Push your quiz-4 &lt;em&gt;readme.md&lt;/em&gt; file to quiz/4/ folder in your Github project.  If you write your answers in Python scripts, put the script files in the same folder as well. If you feel uncertain about your answer, you can test your final codes on Jupyter or IPython command lines.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that prints your full name 5 times, each on a separate line.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Write a &lt;strong&gt;single-line&lt;/strong&gt; python script, that applies the relevant Python string manipulator methods to this string,&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code&gt;Python Is Great For String Manipulation.
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;and transforms it to the following string and and prints it on screen,&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;.noitalupinaMgnirtSroFtaerGsInohtyP
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name the three major types of programming errors.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/quiz/4-problems-python-values-variables-types&quot;&gt;Quiz 4: Problems - Python values, variables, types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;COE 111L - Spring 2017&lt;/a&gt; on March 01, 2017.&lt;/p&gt;</content>
</entry>

</feed>
