<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">ECL - Spring 2017</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/ECL2017S/feed.xml" />
<link rel="alternate" type="text/html" href="http:/ECL2017S/" />
<updated>2017-01-18T12:06:37-06:00</updated>
<id>http:/ECL2017S/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/ECL2017S/</uri>
  <email>amir@ices.utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Student-professor connection day]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/other/student-professor-connection"/>
  <id>http:/ECL2017S/other/student-professor-connection</id>
  <published>2017-01-18T00:00:00-06:00</published>
  <updated>2017-01-18T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;I have ordered cookies to be delivered to our first ECL class. We will try to get to know each other and I will attempt to describe my research work and educational background for you, as well as what we should expect from this course. Then I will give you links to two surveys that will assess your programming knowledge and will determine the favorite programming language which the majority of class wish to learn.&lt;/p&gt;

&lt;h2 id=&quot;about-me-amir-the-instructor&quot;&gt;About me, Amir, the instructor&lt;/h2&gt;

&lt;p&gt;I am a physicist and researcher, currently at &lt;a target=&quot;_blank&quot; href=&quot;https://www.ices.utexas.edu/&quot;&gt;Institute for Computational Engineering and Sciences&lt;/a&gt; at &lt;a target=&quot;_blank&quot; href=&quot;http://www.utexas.edu/&quot;&gt;The University of Texas at Austin&lt;/a&gt;. I am a member of the &lt;a target=&quot;_blank&quot; href=&quot;http://cco.ices.utexas.edu/&quot;&gt;Center for Computational Oncology&lt;/a&gt; led by &lt;a target=&quot;_blank&quot; href=&quot;https://www.bme.utexas.edu/about-us/faculty-directory/yankeelov&quot;&gt;Dr. Thomas E. Yankeelov&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;https://www.ices.utexas.edu/people/85/&quot;&gt;Dr. J. Tinsley Oden&lt;/a&gt; at ICES with the goal of understanding Tumor Growth.&lt;/p&gt;

&lt;p&gt;The following figures show the growth of Glioblastoma tumor cells in a Ratâ€™s brain over time.&lt;/p&gt;

&lt;figure align=&quot;center&quot;&gt;
	&lt;img src=&quot;http:/ECL2017S/lectures/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_1_t10.0.png&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure align=&quot;center&quot;&gt;
	&lt;img src=&quot;http:/ECL2017S/lectures/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_2_t12.0.png&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure align=&quot;center&quot;&gt;
	&lt;img src=&quot;http:/ECL2017S/lectures/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_3_t14.0.png&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure align=&quot;center&quot;&gt;
	&lt;img src=&quot;http:/ECL2017S/lectures/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_5_t16.0.png&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure align=&quot;center&quot;&gt;
	&lt;img src=&quot;http:/ECL2017S/lectures/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_6_t18.0.png&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure align=&quot;center&quot;&gt;
	&lt;img src=&quot;http:/ECL2017S/lectures/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_7_t20.0.png&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;One of the fields on which my research is currently focused, is developing Monte Carlo optimizer/sampler and integrator algorithms for Bayesian inverse problems. Below you see example animations of two &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo&quot; target=&quot;_blank&quot;&gt;Markov Chain Monte Carlo&lt;/a&gt; (MCMC) samplers, both of which sample a double Gaussian-peak function, but with different MCMC sampling parameters.&lt;/p&gt;

&lt;figure align=&quot;center&quot;&gt;
	&lt;img src=&quot;http:/ECL2017S/lectures/0/PDF_RS_L_Forever20ms.gif&quot; width=&quot;700&quot; /&gt;
    &lt;div class=&quot;center&quot;&gt;
        &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of low-efficiency, but good-mixing MCMC sampler.&lt;/figcaption&gt;
    &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure align=&quot;center&quot;&gt;
	&lt;img src=&quot;http:/ECL2017S/lectures/0/PDF_RS_H_Forever20ms.gif&quot; width=&quot;700&quot; /&gt;
    &lt;div class=&quot;center&quot;&gt;
        &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of highly-efficiency, but bad-mixing MCMC sampler.&lt;/figcaption&gt;
    &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;While my current focus of research is mathematical modelling of tumor growth and Monte Carlo samplers, I am and have been working in multiple branches of science and engineering for several years, from the subatomic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Elementary_particle&quot;&gt;elementary particles&lt;/a&gt;, to the microscopic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Macromolecule&quot;&gt;biological macromolecules&lt;/a&gt;, to &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot;&gt;astrophysical phenomena&lt;/a&gt; occurring on the grandest scales of the &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Observable_universe&quot;&gt;observable Universe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For several years of my research, I have been working on understanding Gamma-Ray Bursts (GRB) and their physics. Below is a movie of the moment a Short-duration GRB is generated from the merger of a binary Neutron star system.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/P2ESs1rPO_A?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I have also worked for a few years in the field of bioinformatics and evolutionary biology. The overarching goal in the field of protein bioinformatics and biophysics is to understand how proteins fold into their unique structure, and what determines the stability of the protein &lt;abbr title=&quot;3-Dimensional&quot;&gt;3D&lt;/abbr&gt; structure. One of the workhorses of this field, is therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Molecular_dynamics&quot; target=&quot;_blank&quot;&gt;molecular dynamic simulation&lt;/a&gt; to probe the dynamics of proteins and their interactions with other molecules. The following is a 1.5ns molecular dynamics simulation of Human Influenza H1 Hemagglutinin protein (&lt;a href=&quot;http://www.rcsb.org/pdb/explore.do?structureId=1rd8&quot; target=&quot;_blank&quot;&gt;1RD8&lt;/a&gt;, chains AB).&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- &lt;div id=&quot;video&quot;&gt; --&gt;

&lt;!--
&lt;div class=&quot;videoWrapper&quot;&gt;
&lt;div class=&quot;flex-video&quot;&gt;
    &lt;embed src=&quot;https://www.youtube.com/embed/P2ESs1rPO_A?rel=0&quot; style=&quot;width:100%;height:480px&quot; frameborder=&quot;0&quot; allowfullscreen&gt;
&lt;/div&gt;
&lt;/div&gt;
--&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/other/student-professor-connection&quot;&gt;Student-professor connection day&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;ECL - Spring 2017&lt;/a&gt; on January 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 0: Programming history]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/lecture/lecture-0-programming-history"/>
  <id>http:/ECL2017S/lecture/lecture-0-programming-history</id>
  <published>2017-01-18T00:00:00-06:00</published>
  <updated>2017-01-18T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief history of the development of computers and computer programming languages and their mutual interaction with rapid developments in natural sciences in the 20th century.&lt;/p&gt;

&lt;h3 id=&quot;the-rise-of-the-machines&quot;&gt;The rise of the machines&lt;/h3&gt;

&lt;p&gt;Immediately after the first world-war and during the second world-war, many fields of science and engineering witnessed rapid growth. In particular, two fields of mathematical and physical sciences, &lt;strong&gt;mathematical programming&lt;/strong&gt; (a terminology used commonly in place of &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematical_optimization&quot; target=&quot;_blank&quot;&gt;mathematical optimization&lt;/a&gt;) (not to be confused with computer programming!) and &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot; target=&quot;_blank&quot;&gt;Monte Carlo methods&lt;/a&gt; witnessed rapid exponential growth in both theory and practical applications. Parallel to progresses in natural sciences, a new field of science and technology, &lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_computer_science&quot; target=&quot;_blank&quot;&gt;computer science&lt;/a&gt;, began to rise during the years of world-war-II, partly in response to the needs of war, but mostly in response to the exponential growth of natural sciences and engineering in the post-world-war-II era.&lt;/p&gt;

&lt;p&gt;The history of computer programming probably begins with the development of the first computer, &lt;a href=&quot;https://en.wikipedia.org/wiki/ENIAC&quot; target=&quot;_blank&quot;&gt;ENIAC&lt;/a&gt; (&lt;em&gt;Electronic Numerical Integrator And Computer&lt;/em&gt;), one of the earliest electronic general-purpose computers made.&lt;/p&gt;

&lt;figure align=&quot;center&quot;&gt;
	&lt;img src=&quot;http:/ECL2017S/lectures/0/wordFreq.png&quot; width=&quot;900&quot; /&gt;
    &lt;div class=&quot;center&quot;&gt;
        &lt;figcaption style=&quot;text-align:justify&quot;&gt;
            A word-usage relative frequency plot, illustrating the exponential growth of computer technology in the mid 20th century, as well as developments in the fields of deterministic and stochastic optimization techniques, which ultimately led to the emergence of &lt;a href=&quot;https://www.nibib.nih.gov/science-education/science-topics/computational-modeling&quot; target=&quot;_blank&quot;&gt;computational modeling&lt;/a&gt; as the third pillar of science. Advances in the computational methods and technology also led to the gradual popularity of Bayesian techniques in mathematical modeling towards the end of the 20th century, and the emergence of an important of subfield of computational modeling, now known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Uncertainty_quantification&quot; target=&quot;_blank&quot;&gt;Uncertainty Quantification&lt;/a&gt;. Note that the positive-slope linear behavior on this semi-logarithmic plot indicates a exponential growth. (Data is courtesy of &lt;a href=&quot;https://books.google.com/ngrams&quot; target=&quot;_blank&quot;&gt;Google Ngrams&lt;/a&gt;).
        &lt;/figcaption&gt;
    &lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;programming-language-generations&quot;&gt;Programming language generations&lt;/h3&gt;

&lt;p&gt;Initially computers had to be programmed by what is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine code&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine language&lt;/a&gt;, a set of instructions for the Central Processing Unit (CPU)  of the computer, comprising a long sequence of binary digital zeros and ones. Any interaction with computer hardware, even nowadays, has to be first converted to machine code in order to become comprehensible by the computer hardware. The coding in this language is however, very tedious and time consuming, and non-portable. As a result, immediately after the development of the first generation of computers, the first generation of programming languages also came to exist, most notably, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot; target=&quot;_blank&quot;&gt;Assembly language&lt;/a&gt; in the late 1940s. Many more programming languages have been since developed that provide higher and higher levels of &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstraction_(software_engineering)&quot; target=&quot;_blank&quot;&gt;programming abstraction&lt;/a&gt; by hiding more complexities of the machine code interaction with machine hardware from the front-end computer software and users.&lt;/p&gt;

&lt;figure align=&quot;center&quot;&gt;
	&lt;a href=&quot;http:/ECL2017S/lectures/0/PLchart.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ECL2017S/lectures/0/PLchart.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;div class=&quot;center&quot;&gt;
        &lt;figcaption style=&quot;text-align:center&quot;&gt;
            A diagram tracing the history of computer languages throughout the history of computer science.
        &lt;/figcaption&gt;
    &lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Depending on their levels of abstraction, programming languages are classified into different generations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/First-generation_programming_language&quot; target=&quot;_blank&quot;&gt;First generation&lt;/a&gt; languages, or machine languages, are the lowest-level computer programming languages, which provide no abstraction in their interactions with computer hardware. These languages directly interact with computer hardware, and so there is no need for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot; target=&quot;_blank&quot;&gt;compiler&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language#Assembler&quot; target=&quot;_blank&quot;&gt;assembler&lt;/a&gt; to interpret these languages for the hardware.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Second generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/Second-generation_programming_language&quot; target=&quot;_blank&quot;&gt;second generation&lt;/a&gt; languages, are at a higher level of abstraction from the machine hardware, meaning that they require an &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language#Assembler&quot; target=&quot;_blank&quot;&gt;assembler&lt;/a&gt; to interpret the code for the computer hardware. The most prominent and, to my understanding, the sole language of this generation is &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot; target=&quot;_blank&quot;&gt;Assembly&lt;/a&gt;, which is the closest-possible compiled programming language to computer hardware.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Third generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/Third-generation_programming_language&quot; target=&quot;_blank&quot;&gt;third generation&lt;/a&gt; languages, or &lt;a href=&quot;https://en.wikipedia.org/wiki/High-level_programming_language&quot; target=&quot;_blank&quot;&gt;high-level&lt;/a&gt; programming languages provide an even higher abstraction level than the second-generation languages. Third-generation languages make programming almost platform-independent, meaning that the content of the code does not depend directly on the current hardware being used. This helps the programmer to focus more on the problem of interest, rather than spending time to understand details of the specific computer and hardware being currently used. Examples of third-generation programming languages are: &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/ALGOL&quot; target=&quot;_blank&quot;&gt;ALGOL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL&quot; target=&quot;_blank&quot;&gt;COBOL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/BASIC&quot; target=&quot;_blank&quot;&gt;BASIC&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot; target=&quot;_blank&quot;&gt;C&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&quot; target=&quot;_blank&quot;&gt;C#&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot; target=&quot;_blank&quot;&gt;C++&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Pascal_(programming_language)&quot; target=&quot;_blank&quot;&gt;Pascal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fourth generation:&lt;/strong&gt; The definition for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourth-generation_programming_language&quot; target=&quot;_blank&quot;&gt;fourth generation&lt;/a&gt; and beyond is not very clear, however, it is generally as the set of languages that provide an even higher level of abstraction from the hardware and proximity to the user (programmer). Some prominent examples of this category include &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot; target=&quot;_blank&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Perl&quot; target=&quot;_blank&quot;&gt;Perl&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ruby_(programming_language)&quot; target=&quot;_blank&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/IDL_(programming_language)&quot; target=&quot;_blank&quot;&gt;IDL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/R_programming_language&quot; target=&quot;_blank&quot;&gt;R&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/S_(programming_language)&quot; target=&quot;_blank&quot;&gt;S&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the field of scientific computation, &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt; (FORmula TRANslation), first released in 1956, is undoubtedly the most influential programming language of all human history and the oldest high-level programming language that is still in active everyday use. Here is a history of Fortran by its original developers:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/KohboWwrsXg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-final-personal-remark&quot;&gt;A final, personal remark&lt;/h3&gt;

&lt;p&gt;Sometimes science acts like humans: it finds a matching partner (a programming language), then they flourish together, make a love story and occasionally decline together as well, with the only difference that polygamy is allowed in science, like Fortranâ€™s marriage with Aerospace and &lt;a href=&quot;https://en.wikipedia.org/wiki/Plasma_(physics)&quot; target=&quot;_blank&quot;&gt;Plasma physics&lt;/a&gt;:&lt;/p&gt;

&lt;figure align=&quot;center&quot;&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=fortran%2Cplasma%2Caerospace&amp;amp;case_insensitive=on&amp;amp;year_start=1920&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cfortran%3B%2Cc0%3B%2Cs0%3B%3BFORTRAN%3B%2Cc0%3B%3BFortran%3B%2Cc0%3B.t4%3B%2Cplasma%3B%2Cc0%3B%2Cs0%3B%3Bplasma%3B%2Cc0%3B%3BPlasma%3B%2Cc0%3B%3BPLASMA%3B%2Cc0%3B.t4%3B%2Caerospace%3B%2Cc0%3B%2Cs0%3B%3BAerospace%3B%2Cc0%3B%3Baerospace%3B%2Cc0%3B%3BAEROSPACE%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ECL2017S/lectures/0/plasma-aerospace-fortran.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;div class=&quot;center&quot;&gt;
        &lt;figcaption style=&quot;text-align:justify&quot;&gt;
            A plot illustrating the co-evolution of two of the most challenging computationally-intensive fields of science (Aerospace and Plasma Physics) with the most popular high-performance scientific programming language in human history as of today. The vertical axis represents the relative word-usage frequency of the three keywords (Plasma, Aerospace, and Fortran) in all digital corpus, and the horizontal axis represents the year. Note that the downward slope of the curves in later times does NOT imply the decline of these fields of science or the decline of Fortran. It merely means that they have reached their exponential peak growth in the mid-1980s, and are now expanding steadily (linearly), whereas other newer fields (such as bioinformatics) are being more and more frequently referenced than the above three keywords every year in all digital corpus.
        &lt;/figcaption&gt;
    &lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Many times throughout the recent history, some specific fields of science have boosted and popularized some computer programming languages and vice versa, in a positive feedback loop. A younger just-married couple seems to be Bioinformatics-Python, both of which, as of today seem to be thriving:&lt;/p&gt;

&lt;figure align=&quot;center&quot;&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=python%2Cbioinformatics&amp;amp;case_insensitive=on&amp;amp;year_start=1980&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cpython%3B%2Cc0%3B%2Cs0%3B%3BPython%3B%2Cc0%3B%3Bpython%3B%2Cc0%3B%3BPYTHON%3B%2Cc0%3B.t4%3B%2Cbioinformatics%3B%2Cc0%3B%2Cs0%3B%3BBioinformatics%3B%2Cc0%3B%3Bbioinformatics%3B%2Cc0%3B%3BBIOINFORMATICS%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ECL2017S/lectures/0/bioinformatics-python.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;div class=&quot;center&quot;&gt;
        &lt;figcaption style=&quot;text-align:justify&quot;&gt;
            A plot illustrating the co-evolution and thriving of the field of bioinformatics with the popular programming language, Python. The vertical axis represents the relative word-usage frequency of the two keywords (Bioinformatics and Python) in all digital corpus, and the horizontal axis represents the year.
        &lt;/figcaption&gt;
    &lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, a programming language couples with a specific field of science and thrives for a few years, only to be soon replaced with a younger, more attractive, programming language. This is probably what happened to the co-evolution of Perl with bioinformatics, a language which was gradually replaced with Python in the beginning of the new millennium, at least in the field of bioinformatics.&lt;/p&gt;

&lt;figure align=&quot;center&quot;&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=python%2Cbioinformatics%2Cperl&amp;amp;case_insensitive=on&amp;amp;year_start=1980&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cpython%3B%2Cc0%3B%2Cs0%3B%3BPython%3B%2Cc0%3B%3Bpython%3B%2Cc0%3B%3BPYTHON%3B%2Cc0%3B.t4%3B%2Cbioinformatics%3B%2Cc0%3B%2Cs0%3B%3BBioinformatics%3B%2Cc0%3B%3Bbioinformatics%3B%2Cc0%3B%3BBIOINFORMATICS%3B%2Cc0%3B.t4%3B%2Cperl%3B%2Cc0%3B%2Cs0%3B%3BPerl%3B%2Cc0%3B%3Bperl%3B%2Cc0%3B%3BPERL%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ECL2017S/lectures/0/bioinformatics-python-perl.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;div class=&quot;center&quot;&gt;
        &lt;figcaption style=&quot;text-align:justify&quot;&gt;
            A plot illustrating the evolution and steady expansion of the Perl programming language and its gradual replacement with Python, in the field of bioinformatics. The vertical axis represents the relative word-usage frequency of the three keywords (Bioinformatics, Python, and Perl) in all digital corpus, and the horizontal axis represents the year.
        &lt;/figcaption&gt;
    &lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/lecture/lecture-0-programming-history&quot;&gt;Lecture 0: Programming history&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;ECL - Spring 2017&lt;/a&gt; on January 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Assessing your programming knowledge and interests]]></title>
  <link rel="alternate" type="text/html" href="http:/ECL2017S/other/assessing-your-programming-knowledge-and-interests"/>
  <id>http:/ECL2017S/other/assessing-your-programming-knowledge-and-interests</id>
  <published>2017-01-18T00:00:00-06:00</published>
  <updated>2017-01-18T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ECL2017S</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to assess your prior programming experience and to identify the favorite programming language of the class. Please fill out the following two survey questions, and submit them within 3 minutes.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;script&gt;
        (function(t,e,c,s){var n,o,r;t.SMCX=t.SMCX||[],e.getElementById(s)||(n=e.getElementsByTagName(c),o=n[n.length-1],r=e.createElement(c),r.type=&quot;text/javascript&quot;,r.async=!0,r.id=s,r.src=[&quot;https:&quot;===location.protocol?&quot;https://&quot;:&quot;http://&quot;,&quot;widget.surveymonkey.com/collect/website/js/cWwdqYkJlcOqqIvX4OQ6L0ROZOarbpr7vA_2BB3stCB3CdrDL1W7Ipzjdzq6PQKazc.js&quot;].join(&quot;&quot;),o.parentNode.insertBefore(r,o))})(window,document,&quot;script&quot;,&quot;smcx-sdk&quot;);
    &lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ECL2017S/other/assessing-your-programming-knowledge-and-interests&quot;&gt;Assessing your programming knowledge and interests&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ECL2017S&quot;&gt;ECL - Spring 2017&lt;/a&gt; on January 18, 2017.&lt;/p&gt;</content>
</entry>

</feed>
